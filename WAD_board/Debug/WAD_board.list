
WAD_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800a744  0800a744  0001a744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a888  0800a888  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a888  0800a888  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a888  0800a888  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a888  0800a888  0001a888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a88c  0800a88c  0001a88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000125c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  2000143c  2000143c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012353  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003259  00000000  00000000  00032563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  000357c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb8  00000000  00000000  00036600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020721  00000000  00000000  000372b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013bc7  00000000  00000000  000579d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afcbd  00000000  00000000  0006b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011b25d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004084  00000000  00000000  0011b2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a72c 	.word	0x0800a72c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a72c 	.word	0x0800a72c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <_write>:
#define ITM_STIMULUS_PORT0    *((volatile uint32_t*) 0xE0000000u)
#define ITM_TRACE_EN          *((volatile uint32_t*) 0xE0000E00u)

/* Override low-level _write system call */
int _write(int file, char *ptr, int len)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	b086      	sub	sp, #24
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	60f8      	str	r0, [r7, #12]
 80002c6:	60b9      	str	r1, [r7, #8]
 80002c8:	607a      	str	r2, [r7, #4]
	(void) file;
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	e009      	b.n	80002e4 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	60ba      	str	r2, [r7, #8]
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ffc9 	bl	8000270 <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	3301      	adds	r3, #1
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	dbf1      	blt.n	80002d0 <_write+0x12>
    }
    return len;
 80002ec:	687b      	ldr	r3, [r7, #4]
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08c      	sub	sp, #48	; 0x30
 80002fc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	// Enable TRCENA
	DEMCR |= (1 << 24);
 80002fe:	4b3a      	ldr	r3, [pc, #232]	; (80003e8 <main+0xf0>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a39      	ldr	r2, [pc, #228]	; (80003e8 <main+0xf0>)
 8000304:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000308:	6013      	str	r3, [r2, #0]
	// Enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800030a:	4b38      	ldr	r3, [pc, #224]	; (80003ec <main+0xf4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a37      	ldr	r2, [pc, #220]	; (80003ec <main+0xf4>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fca1 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f86d 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f909 	bl	8000534 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000322:	f000 f8c7 	bl	80004b4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000326:	f008 fd77 	bl	8008e18 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // initialize all hall-effect sensors
  hall_sensor_init(I2C_ADDR_2000_top);
 800032a:	2060      	movs	r0, #96	; 0x60
 800032c:	f000 fa2e 	bl	800078c <hall_sensor_init>
  hall_sensor_init(I2C_ADDR_2000_bottom);
 8000330:	206c      	movs	r0, #108	; 0x6c
 8000332:	f000 fa2b 	bl	800078c <hall_sensor_init>

  uint8_t check1[4] = {0};
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
  HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR_2000_top << 1, 0x02, I2C_MEMADD_SIZE_8BIT, check1, DATA_SIZE, TIMEOUT);
 800033a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033e:	9302      	str	r3, [sp, #8]
 8000340:	2304      	movs	r3, #4
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	2301      	movs	r3, #1
 800034a:	2202      	movs	r2, #2
 800034c:	21c0      	movs	r1, #192	; 0xc0
 800034e:	4828      	ldr	r0, [pc, #160]	; (80003f0 <main+0xf8>)
 8000350:	f001 f956 	bl	8001600 <HAL_I2C_Mem_Read>

  uint8_t check2[4] = {0};
 8000354:	2300      	movs	r3, #0
 8000356:	603b      	str	r3, [r7, #0]
  HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR_2000_bottom << 1, 0x02, I2C_MEMADD_SIZE_8BIT, check2, DATA_SIZE, TIMEOUT);
 8000358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800035c:	9302      	str	r3, [sp, #8]
 800035e:	2304      	movs	r3, #4
 8000360:	9301      	str	r3, [sp, #4]
 8000362:	463b      	mov	r3, r7
 8000364:	9300      	str	r3, [sp, #0]
 8000366:	2301      	movs	r3, #1
 8000368:	2202      	movs	r2, #2
 800036a:	21d8      	movs	r1, #216	; 0xd8
 800036c:	4820      	ldr	r0, [pc, #128]	; (80003f0 <main+0xf8>)
 800036e:	f001 f947 	bl	8001600 <HAL_I2C_Mem_Read>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Read component fields from top ALS31313KLEATR-2000
	int32_t x_top = single_read_component_field(I2C_ADDR_2000_top, 0);
 8000372:	2100      	movs	r1, #0
 8000374:	2060      	movs	r0, #96	; 0x60
 8000376:	f000 fa63 	bl	8000840 <single_read_component_field>
 800037a:	4603      	mov	r3, r0
 800037c:	61fb      	str	r3, [r7, #28]
	int32_t y_top = single_read_component_field(I2C_ADDR_2000_top, 1);
 800037e:	2101      	movs	r1, #1
 8000380:	2060      	movs	r0, #96	; 0x60
 8000382:	f000 fa5d 	bl	8000840 <single_read_component_field>
 8000386:	4603      	mov	r3, r0
 8000388:	61bb      	str	r3, [r7, #24]
	int32_t z_top = single_read_component_field(I2C_ADDR_2000_top, 2);
 800038a:	2102      	movs	r1, #2
 800038c:	2060      	movs	r0, #96	; 0x60
 800038e:	f000 fa57 	bl	8000840 <single_read_component_field>
 8000392:	4603      	mov	r3, r0
 8000394:	617b      	str	r3, [r7, #20]

    // Read component fields from bottom ALS31313KLEATR-2000
	int32_t x_bottom = single_read_component_field(I2C_ADDR_2000_bottom, 0);
 8000396:	2100      	movs	r1, #0
 8000398:	206c      	movs	r0, #108	; 0x6c
 800039a:	f000 fa51 	bl	8000840 <single_read_component_field>
 800039e:	4603      	mov	r3, r0
 80003a0:	613b      	str	r3, [r7, #16]
	int32_t y_bottom = single_read_component_field(I2C_ADDR_2000_bottom, 1);
 80003a2:	2101      	movs	r1, #1
 80003a4:	206c      	movs	r0, #108	; 0x6c
 80003a6:	f000 fa4b 	bl	8000840 <single_read_component_field>
 80003aa:	4603      	mov	r3, r0
 80003ac:	60fb      	str	r3, [r7, #12]
	int32_t z_bottom = single_read_component_field(I2C_ADDR_2000_bottom, 2);
 80003ae:	2102      	movs	r1, #2
 80003b0:	206c      	movs	r0, #108	; 0x6c
 80003b2:	f000 fa45 	bl	8000840 <single_read_component_field>
 80003b6:	4603      	mov	r3, r0
 80003b8:	60bb      	str	r3, [r7, #8]
	//	int32_t z_top = 0xDEADBEEF;
	//  // Read component fields from bottom ALS31313KLEATR-2000
	//	int32_t x_bottom = 0xDEADBEEF;
	//	int32_t y_bottom = 0xDEADBEEF;
	//	int32_t z_bottom = 0xDEADBEEF;
	printf("Top: (%ld, %ld, %ld), Bottom: (%ld, %ld, %ld)\n\r", x_top, y_top, z_top, x_bottom, y_bottom, z_bottom);
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	9302      	str	r3, [sp, #8]
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	69ba      	ldr	r2, [r7, #24]
 80003ca:	69f9      	ldr	r1, [r7, #28]
 80003cc:	4809      	ldr	r0, [pc, #36]	; (80003f4 <main+0xfc>)
 80003ce:	f009 fa1f 	bl	8009810 <iprintf>
	// send data to USB host
	transmit_component_fields_USB(x_top, y_top, z_top, x_bottom, y_bottom, z_bottom);
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	697a      	ldr	r2, [r7, #20]
 80003de:	69b9      	ldr	r1, [r7, #24]
 80003e0:	69f8      	ldr	r0, [r7, #28]
 80003e2:	f000 f8f1 	bl	80005c8 <transmit_component_fields_USB>
  {
 80003e6:	e7c4      	b.n	8000372 <main+0x7a>
 80003e8:	e000edfc 	.word	0xe000edfc
 80003ec:	e0000e00 	.word	0xe0000e00
 80003f0:	200001fc 	.word	0x200001fc
 80003f4:	0800a744 	.word	0x0800a744

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b09e      	sub	sp, #120	; 0x78
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f009 f9fa 	bl	8009800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041c:	463b      	mov	r3, r7
 800041e:	223c      	movs	r2, #60	; 0x3c
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f009 f9ec 	bl	8009800 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000428:	2301      	movs	r3, #1
 800042a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800042c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000430:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000436:	2301      	movs	r3, #1
 8000438:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043a:	2302      	movs	r3, #2
 800043c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800043e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000442:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000444:	2300      	movs	r3, #0
 8000446:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000448:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800044c:	4618      	mov	r0, r3
 800044e:	f003 fa19 	bl	8003884 <HAL_RCC_OscConfig>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000458:	f000 fa9a 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045c:	230f      	movs	r3, #15
 800045e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000460:	2302      	movs	r3, #2
 8000462:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800046c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000472:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000476:	2101      	movs	r1, #1
 8000478:	4618      	mov	r0, r3
 800047a:	f004 fa41 	bl	8004900 <HAL_RCC_ClockConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000484:	f000 fa84 	bl	8000990 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <SystemClock_Config+0xb8>)
 800048a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800048c:	2310      	movs	r3, #16
 800048e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000490:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000494:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000496:	463b      	mov	r3, r7
 8000498:	4618      	mov	r0, r3
 800049a:	f004 fc19 	bl	8004cd0 <HAL_RCCEx_PeriphCLKConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80004a4:	f000 fa74 	bl	8000990 <Error_Handler>
  }
}
 80004a8:	bf00      	nop
 80004aa:	3778      	adds	r7, #120	; 0x78
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	00020020 	.word	0x00020020

080004b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_I2C1_Init+0x74>)
 80004ba:	4a1c      	ldr	r2, [pc, #112]	; (800052c <MX_I2C1_Init+0x78>)
 80004bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 80004be:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <MX_I2C1_Init+0x74>)
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <MX_I2C1_Init+0x7c>)
 80004c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <MX_I2C1_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004ca:	4b17      	ldr	r3, [pc, #92]	; (8000528 <MX_I2C1_Init+0x74>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <MX_I2C1_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004d6:	4b14      	ldr	r3, [pc, #80]	; (8000528 <MX_I2C1_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_I2C1_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <MX_I2C1_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <MX_I2C1_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ee:	480e      	ldr	r0, [pc, #56]	; (8000528 <MX_I2C1_Init+0x74>)
 80004f0:	f000 fee2 	bl	80012b8 <HAL_I2C_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004fa:	f000 fa49 	bl	8000990 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004fe:	2100      	movs	r1, #0
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <MX_I2C1_Init+0x74>)
 8000502:	f001 fc4f 	bl	8001da4 <HAL_I2CEx_ConfigAnalogFilter>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800050c:	f000 fa40 	bl	8000990 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000510:	2100      	movs	r1, #0
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <MX_I2C1_Init+0x74>)
 8000514:	f001 fc91 	bl	8001e3a <HAL_I2CEx_ConfigDigitalFilter>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800051e:	f000 fa37 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200001fc 	.word	0x200001fc
 800052c:	40005400 	.word	0x40005400
 8000530:	2010091a 	.word	0x2010091a

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054a:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <MX_GPIO_Init+0x90>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000550:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MX_GPIO_Init+0x90>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_B_Pin|LED_R_Pin, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	2107      	movs	r1, #7
 8000596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059a:	f000 fe75 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_G_Pin LED_B_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_B_Pin|LED_R_Pin;
 800059e:	2307      	movs	r3, #7
 80005a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	4619      	mov	r1, r3
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f000 fcec 	bl	8000f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40021000 	.word	0x40021000

080005c8 <transmit_component_fields_USB>:
 * @param y3: y-component for ALS31313KLEATR-2000
 * @param z3: z-component for ALS31313KLEATR-2000
 * @retval None
 */
static void transmit_component_fields_USB(int32_t x1, int32_t y1, int32_t z1, int32_t x2, int32_t y2, int32_t z2)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b092      	sub	sp, #72	; 0x48
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
 80005d4:	603b      	str	r3, [r7, #0]
	uint8_t *x1_vals = (uint8_t *)&x1;
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t *y1_vals = (uint8_t *)&y1;
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t *z1_vals = (uint8_t *)&z1;
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38

	uint8_t *x2_vals = (uint8_t *)&x2;
 80005e6:	463b      	mov	r3, r7
 80005e8:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t *y2_vals = (uint8_t *)&y2;
 80005ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t *z2_vals = (uint8_t *)&z2;
 80005f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t buffer[24] = {0};
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

	for (uint8_t i = 0; i < sizeof(buffer); ++i)
 800060a:	2300      	movs	r3, #0
 800060c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000610:	e0a9      	b.n	8000766 <transmit_component_fields_USB+0x19e>
	{
		if (i <= 3)
 8000612:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000616:	2b03      	cmp	r3, #3
 8000618:	d80e      	bhi.n	8000638 <transmit_component_fields_USB+0x70>
		{
			buffer[i] = x1_vals[3 - i];
 800061a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800061e:	f1c3 0303 	rsb	r3, r3, #3
 8000622:	461a      	mov	r2, r3
 8000624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000626:	441a      	add	r2, r3
 8000628:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800062c:	7812      	ldrb	r2, [r2, #0]
 800062e:	3348      	adds	r3, #72	; 0x48
 8000630:	443b      	add	r3, r7
 8000632:	f803 2c34 	strb.w	r2, [r3, #-52]
 8000636:	e091      	b.n	800075c <transmit_component_fields_USB+0x194>
		}

		else if ((i >= 4) & (i <= 7))
 8000638:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800063c:	2b03      	cmp	r3, #3
 800063e:	bf8c      	ite	hi
 8000640:	2301      	movhi	r3, #1
 8000642:	2300      	movls	r3, #0
 8000644:	b2da      	uxtb	r2, r3
 8000646:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800064a:	2b07      	cmp	r3, #7
 800064c:	bf94      	ite	ls
 800064e:	2301      	movls	r3, #1
 8000650:	2300      	movhi	r3, #0
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4013      	ands	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00e      	beq.n	800067a <transmit_component_fields_USB+0xb2>
		{
			buffer[i] = y1_vals[7 - i];
 800065c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000660:	f1c3 0307 	rsb	r3, r3, #7
 8000664:	461a      	mov	r2, r3
 8000666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000668:	441a      	add	r2, r3
 800066a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800066e:	7812      	ldrb	r2, [r2, #0]
 8000670:	3348      	adds	r3, #72	; 0x48
 8000672:	443b      	add	r3, r7
 8000674:	f803 2c34 	strb.w	r2, [r3, #-52]
 8000678:	e070      	b.n	800075c <transmit_component_fields_USB+0x194>
		}

		else if ((i >= 8) & (i <= 11))
 800067a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800067e:	2b07      	cmp	r3, #7
 8000680:	bf8c      	ite	hi
 8000682:	2301      	movhi	r3, #1
 8000684:	2300      	movls	r3, #0
 8000686:	b2da      	uxtb	r2, r3
 8000688:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800068c:	2b0b      	cmp	r3, #11
 800068e:	bf94      	ite	ls
 8000690:	2301      	movls	r3, #1
 8000692:	2300      	movhi	r3, #0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4013      	ands	r3, r2
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00e      	beq.n	80006bc <transmit_component_fields_USB+0xf4>
		{
			buffer[i] = z1_vals[11 - i];
 800069e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006a2:	f1c3 030b 	rsb	r3, r3, #11
 80006a6:	461a      	mov	r2, r3
 80006a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006aa:	441a      	add	r2, r3
 80006ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	3348      	adds	r3, #72	; 0x48
 80006b4:	443b      	add	r3, r7
 80006b6:	f803 2c34 	strb.w	r2, [r3, #-52]
 80006ba:	e04f      	b.n	800075c <transmit_component_fields_USB+0x194>
		}

		else if ((i >= 12) & (i <= 15))
 80006bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006c0:	2b0b      	cmp	r3, #11
 80006c2:	bf8c      	ite	hi
 80006c4:	2301      	movhi	r3, #1
 80006c6:	2300      	movls	r3, #0
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006ce:	2b0f      	cmp	r3, #15
 80006d0:	bf94      	ite	ls
 80006d2:	2301      	movls	r3, #1
 80006d4:	2300      	movhi	r3, #0
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4013      	ands	r3, r2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00e      	beq.n	80006fe <transmit_component_fields_USB+0x136>
		{
			buffer[i] = x2_vals[15 - i];
 80006e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006e4:	f1c3 030f 	rsb	r3, r3, #15
 80006e8:	461a      	mov	r2, r3
 80006ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ec:	441a      	add	r2, r3
 80006ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006f2:	7812      	ldrb	r2, [r2, #0]
 80006f4:	3348      	adds	r3, #72	; 0x48
 80006f6:	443b      	add	r3, r7
 80006f8:	f803 2c34 	strb.w	r2, [r3, #-52]
 80006fc:	e02e      	b.n	800075c <transmit_component_fields_USB+0x194>
		}

		else if ((i >= 16) & (i <= 19))
 80006fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000702:	2b0f      	cmp	r3, #15
 8000704:	bf8c      	ite	hi
 8000706:	2301      	movhi	r3, #1
 8000708:	2300      	movls	r3, #0
 800070a:	b2da      	uxtb	r2, r3
 800070c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000710:	2b13      	cmp	r3, #19
 8000712:	bf94      	ite	ls
 8000714:	2301      	movls	r3, #1
 8000716:	2300      	movhi	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4013      	ands	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00e      	beq.n	8000740 <transmit_component_fields_USB+0x178>
		{
			buffer[i] = y2_vals[19 - i];
 8000722:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000726:	f1c3 0313 	rsb	r3, r3, #19
 800072a:	461a      	mov	r2, r3
 800072c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800072e:	441a      	add	r2, r3
 8000730:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	3348      	adds	r3, #72	; 0x48
 8000738:	443b      	add	r3, r7
 800073a:	f803 2c34 	strb.w	r2, [r3, #-52]
 800073e:	e00d      	b.n	800075c <transmit_component_fields_USB+0x194>
		}

		else
		{
			buffer[i] = z2_vals[23 - i];
 8000740:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000744:	f1c3 0317 	rsb	r3, r3, #23
 8000748:	461a      	mov	r2, r3
 800074a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800074c:	441a      	add	r2, r3
 800074e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	3348      	adds	r3, #72	; 0x48
 8000756:	443b      	add	r3, r7
 8000758:	f803 2c34 	strb.w	r2, [r3, #-52]
	for (uint8_t i = 0; i < sizeof(buffer); ++i)
 800075c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000760:	3301      	adds	r3, #1
 8000762:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000766:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800076a:	2b17      	cmp	r3, #23
 800076c:	f67f af51 	bls.w	8000612 <transmit_component_fields_USB+0x4a>
		}
	}

	CDC_Transmit_FS(buffer, sizeof(buffer));
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2118      	movs	r1, #24
 8000776:	4618      	mov	r0, r3
 8000778:	f008 fc0c 	bl	8008f94 <CDC_Transmit_FS>
	HAL_Delay(300);
 800077c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000780:	f000 fad2 	bl	8000d28 <HAL_Delay>
}
 8000784:	bf00      	nop
 8000786:	3748      	adds	r7, #72	; 0x48
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <hall_sensor_init>:
 * @brief Hall Effect Sensor Initialization Function
 * @param dev_address: 7-bit I2C device address
 * @retval None
 */
static void hall_sensor_init(uint16_t dev_address)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af04      	add	r7, sp, #16
 8000792:	4603      	mov	r3, r0
 8000794:	80fb      	strh	r3, [r7, #6]
	// enter customer access code to enable writing to volatile registers
	uint8_t access_code[4] = {0x2C, 0x41, 0x35, 0x34};
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <hall_sensor_init+0x6c>)
 8000798:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, dev_address << 1, 0x35, I2C_MEMADD_SIZE_8BIT, access_code, DATA_SIZE, TIMEOUT);
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	b299      	uxth	r1, r3
 80007a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a4:	9302      	str	r3, [sp, #8]
 80007a6:	2304      	movs	r3, #4
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2301      	movs	r3, #1
 80007b2:	2235      	movs	r2, #53	; 0x35
 80007b4:	4811      	ldr	r0, [pc, #68]	; (80007fc <hall_sensor_init+0x70>)
 80007b6:	f000 fe0f 	bl	80013d8 <HAL_I2C_Mem_Write>
	HAL_Delay(1000);
 80007ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007be:	f000 fab3 	bl	8000d28 <HAL_Delay>

  // Enables X, Y, and Z channels
  // Sets hall mode to 00 and BW select to 000
  // BW Select = 000 corresponds with a three channel update rate of 2 kHz
  uint8_t init_data[4] = {0x00, 0x00, 0x01, 0xC0};
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <hall_sensor_init+0x74>)
 80007c4:	60bb      	str	r3, [r7, #8]
  HAL_I2C_Mem_Write(&hi2c1, dev_address << 1, 0x02, I2C_MEMADD_SIZE_8BIT, init_data, DATA_SIZE, TIMEOUT);
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	b299      	uxth	r1, r3
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	9302      	str	r3, [sp, #8]
 80007d2:	2304      	movs	r3, #4
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2301      	movs	r3, #1
 80007de:	2202      	movs	r2, #2
 80007e0:	4806      	ldr	r0, [pc, #24]	; (80007fc <hall_sensor_init+0x70>)
 80007e2:	f000 fdf9 	bl	80013d8 <HAL_I2C_Mem_Write>
  HAL_Delay(1000);
 80007e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ea:	f000 fa9d 	bl	8000d28 <HAL_Delay>
}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	3435412c 	.word	0x3435412c
 80007fc:	200001fc 	.word	0x200001fc
 8000800:	c0010000 	.word	0xc0010000

08000804 <convert_8_to_16>:
 * @param dataFirst: First half of binary value
 * @param dataSecond: Second half of binary value
 * @retval dataBoth: uint16_t of combined binary value
 */
static int16_t convert_8_to_16(uint8_t data_first, uint8_t data_second)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	460a      	mov	r2, r1
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	4613      	mov	r3, r2
 8000812:	71bb      	strb	r3, [r7, #6]
    int16_t data_both = 0x0000;
 8000814:	2300      	movs	r3, #0
 8000816:	81fb      	strh	r3, [r7, #14]
    data_both = data_first;
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	81fb      	strh	r3, [r7, #14]
    data_both = data_both << 8;
 800081c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	81fb      	strh	r3, [r7, #14]
    data_both |= data_second;
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	b21a      	sxth	r2, r3
 8000828:	89fb      	ldrh	r3, [r7, #14]
 800082a:	4313      	orrs	r3, r2
 800082c:	81fb      	strh	r3, [r7, #14]
    return data_both;
 800082e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <single_read_component_field>:
 * @param dev_address: 7-bit I2C device address
 * @param axis: select 0, 1, 2 corresponding to x, y, z, axis
 * @retval b_field: component field
 */
static int16_t single_read_component_field(uint16_t dev_address, uint8_t axis)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	; 0x38
 8000844:	af04      	add	r7, sp, #16
 8000846:	4603      	mov	r3, r0
 8000848:	460a      	mov	r2, r1
 800084a:	80fb      	strh	r3, [r7, #6]
 800084c:	4613      	mov	r3, r2
 800084e:	717b      	strb	r3, [r7, #5]
	uint8_t data[8] = {0};
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
	uint8_t Msbs[3] = {0};
 8000858:	4b4b      	ldr	r3, [pc, #300]	; (8000988 <single_read_component_field+0x148>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	81bb      	strh	r3, [r7, #12]
 800085e:	2300      	movs	r3, #0
 8000860:	73bb      	strb	r3, [r7, #14]
	uint8_t Lsbs[2] = {0};
 8000862:	2300      	movs	r3, #0
 8000864:	813b      	strh	r3, [r7, #8]
	int16_t b_field = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	84fb      	strh	r3, [r7, #38]	; 0x26
	HAL_I2C_Mem_Read(&hi2c1, dev_address << 1, 0x28, I2C_MEMADD_SIZE_8BIT, data, DATA_SIZE * 2, TIMEOUT); // read MSBs
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	b299      	uxth	r1, r3
 8000870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000874:	9302      	str	r3, [sp, #8]
 8000876:	2308      	movs	r3, #8
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2301      	movs	r3, #1
 8000882:	2228      	movs	r2, #40	; 0x28
 8000884:	4841      	ldr	r0, [pc, #260]	; (800098c <single_read_component_field+0x14c>)
 8000886:	f000 febb 	bl	8001600 <HAL_I2C_Mem_Read>
	//HAL_Delay(300);

	// populate MSBs
	for (uint8_t i = 0; i < 3; ++i)
 800088a:	2300      	movs	r3, #0
 800088c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000890:	e010      	b.n	80008b4 <single_read_component_field+0x74>
	{
		Msbs[i] = data[i];
 8000892:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000896:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800089a:	3228      	adds	r2, #40	; 0x28
 800089c:	443a      	add	r2, r7
 800089e:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80008a2:	3328      	adds	r3, #40	; 0x28
 80008a4:	443b      	add	r3, r7
 80008a6:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i = 0; i < 3; ++i)
 80008aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008ae:	3301      	adds	r3, #1
 80008b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80008b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d9ea      	bls.n	8000892 <single_read_component_field+0x52>
	}

	// populate LSBs
	for (uint8_t i = 0; i < 2; ++i)
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80008c2:	e011      	b.n	80008e8 <single_read_component_field+0xa8>
	{
		Lsbs[i] = data[i + 5];
 80008c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008c8:	1d5a      	adds	r2, r3, #5
 80008ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008ce:	3228      	adds	r2, #40	; 0x28
 80008d0:	443a      	add	r2, r7
 80008d2:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80008d6:	3328      	adds	r3, #40	; 0x28
 80008d8:	443b      	add	r3, r7
 80008da:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (uint8_t i = 0; i < 2; ++i)
 80008de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008e2:	3301      	adds	r3, #1
 80008e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80008e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d9e9      	bls.n	80008c4 <single_read_component_field+0x84>
	}

	if (axis == 0) // x-axis selected
 80008f0:	797b      	ldrb	r3, [r7, #5]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d112      	bne.n	800091c <single_read_component_field+0xdc>
	{
		uint8_t mask = 0x0F;
 80008f6:	230f      	movs	r3, #15
 80008f8:	777b      	strb	r3, [r7, #29]
		uint8_t msb = Msbs[0]; // extract MSBs
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	773b      	strb	r3, [r7, #28]
		uint8_t lsb = Lsbs[0] & mask; // extract LSBs
 80008fe:	7a3a      	ldrb	r2, [r7, #8]
 8000900:	7f7b      	ldrb	r3, [r7, #29]
 8000902:	4013      	ands	r3, r2
 8000904:	76fb      	strb	r3, [r7, #27]
		b_field = convert_8_to_16(msb, (lsb << 4)); // combine MSBs and LSBs into 12 bit value
 8000906:	7efb      	ldrb	r3, [r7, #27]
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	b2da      	uxtb	r2, r3
 800090c:	7f3b      	ldrb	r3, [r7, #28]
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff77 	bl	8000804 <convert_8_to_16>
 8000916:	4603      	mov	r3, r0
 8000918:	84fb      	strh	r3, [r7, #38]	; 0x26
 800091a:	e02d      	b.n	8000978 <single_read_component_field+0x138>
	}

	else if (axis == 1) // y-axis selected
 800091c:	797b      	ldrb	r3, [r7, #5]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d112      	bne.n	8000948 <single_read_component_field+0x108>
	{
		uint8_t mask = 0xF0;
 8000922:	23f0      	movs	r3, #240	; 0xf0
 8000924:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t msb = Msbs[1];
 8000928:	7b7b      	ldrb	r3, [r7, #13]
 800092a:	77fb      	strb	r3, [r7, #31]
		uint8_t lsb = Lsbs[1] & mask;
 800092c:	7a7a      	ldrb	r2, [r7, #9]
 800092e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000932:	4013      	ands	r3, r2
 8000934:	77bb      	strb	r3, [r7, #30]
		b_field = convert_8_to_16(msb, lsb);
 8000936:	7fba      	ldrb	r2, [r7, #30]
 8000938:	7ffb      	ldrb	r3, [r7, #31]
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff61 	bl	8000804 <convert_8_to_16>
 8000942:	4603      	mov	r3, r0
 8000944:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000946:	e017      	b.n	8000978 <single_read_component_field+0x138>
	}

	else // z-axis selected (axis == 2)
	{
		uint8_t mask = 0x0F;
 8000948:	230f      	movs	r3, #15
 800094a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t msb = Msbs[2];
 800094e:	7bbb      	ldrb	r3, [r7, #14]
 8000950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t lsb = Lsbs[1] & mask;
 8000954:	7a7a      	ldrb	r2, [r7, #9]
 8000956:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800095a:	4013      	ands	r3, r2
 800095c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		b_field = convert_8_to_16(msb, (lsb << 4));
 8000960:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000964:	011b      	lsls	r3, r3, #4
 8000966:	b2da      	uxtb	r2, r3
 8000968:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff48 	bl	8000804 <convert_8_to_16>
 8000974:	4603      	mov	r3, r0
 8000976:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	return (b_field >> 4); // right align 12 bit B-field
 8000978:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800097c:	111b      	asrs	r3, r3, #4
 800097e:	b21b      	sxth	r3, r3
}
 8000980:	4618      	mov	r0, r3
 8000982:	3728      	adds	r7, #40	; 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	0800a774 	.word	0x0800a774
 800098c:	200001fc 	.word	0x200001fc

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_MspInit+0x44>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_MspInit+0x44>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6193      	str	r3, [r2, #24]
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_MspInit+0x44>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x44>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x44>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	61d3      	str	r3, [r2, #28]
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x44>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <HAL_I2C_MspInit+0x7c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d127      	bne.n	8000a56 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <HAL_I2C_MspInit+0x80>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <HAL_I2C_MspInit+0x80>)
 8000a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a10:	6153      	str	r3, [r2, #20]
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <HAL_I2C_MspInit+0x80>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a1e:	23c0      	movs	r3, #192	; 0xc0
 8000a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a22:	2312      	movs	r3, #18
 8000a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <HAL_I2C_MspInit+0x84>)
 8000a3a:	f000 faab 	bl	8000f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_I2C_MspInit+0x80>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_I2C_MspInit+0x80>)
 8000a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a48:	61d3      	str	r3, [r2, #28]
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_I2C_MspInit+0x80>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40005400 	.word	0x40005400
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48000400 	.word	0x48000400

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f916 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000ac6:	f001 fafc 	bl	80020c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000f20 	.word	0x20000f20

08000ad4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e00a      	b.n	8000afc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae6:	f3af 8000 	nop.w
 8000aea:	4601      	mov	r1, r0
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	b2ca      	uxtb	r2, r1
 8000af4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbf0      	blt.n	8000ae6 <_read+0x12>
  }

  return len;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_close>:
    }
    return len;
}

int _close(int file)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b36:	605a      	str	r2, [r3, #4]
  return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_isatty>:

int _isatty(int file)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f008 fe00 	bl	80097ac <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20008000 	.word	0x20008000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	20000250 	.word	0x20000250
 8000be0:	20001440 	.word	0x20001440

08000be4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c0c:	f7ff ffea 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	; (8000c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	; (8000c54 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f008 fdbf 	bl	80097b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3a:	f7ff fb5d 	bl	80002f8 <main>

08000c3e <LoopForever>:

LoopForever:
    b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c40:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000c4c:	0800a890 	.word	0x0800a890
  ldr r2, =_sbss
 8000c50:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000c54:	2000143c 	.word	0x2000143c

08000c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_2_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_Init+0x28>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_Init+0x28>)
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f94f 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	200f      	movs	r0, #15
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff fe90 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40022000 	.word	0x40022000

08000c88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f967 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc4:	f000 f92f 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000254 	.word	0x20000254

08000d10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000254 	.word	0x20000254

08000d28 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff3e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff31 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	e154      	b.n	800124e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8146 	beq.w	8001248 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d005      	beq.n	8000fd4 <HAL_GPIO_Init+0x40>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d130      	bne.n	8001036 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800100a:	2201      	movs	r2, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	f003 0201 	and.w	r2, r3, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b03      	cmp	r3, #3
 8001040:	d017      	beq.n	8001072 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d123      	bne.n	80010c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	6939      	ldr	r1, [r7, #16]
 80010c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0203 	and.w	r2, r3, #3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 80a0 	beq.w	8001248 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001108:	4b58      	ldr	r3, [pc, #352]	; (800126c <HAL_GPIO_Init+0x2d8>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a57      	ldr	r2, [pc, #348]	; (800126c <HAL_GPIO_Init+0x2d8>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b55      	ldr	r3, [pc, #340]	; (800126c <HAL_GPIO_Init+0x2d8>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001120:	4a53      	ldr	r2, [pc, #332]	; (8001270 <HAL_GPIO_Init+0x2dc>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800114a:	d019      	beq.n	8001180 <HAL_GPIO_Init+0x1ec>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a49      	ldr	r2, [pc, #292]	; (8001274 <HAL_GPIO_Init+0x2e0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d013      	beq.n	800117c <HAL_GPIO_Init+0x1e8>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a48      	ldr	r2, [pc, #288]	; (8001278 <HAL_GPIO_Init+0x2e4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d00d      	beq.n	8001178 <HAL_GPIO_Init+0x1e4>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a47      	ldr	r2, [pc, #284]	; (800127c <HAL_GPIO_Init+0x2e8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d007      	beq.n	8001174 <HAL_GPIO_Init+0x1e0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a46      	ldr	r2, [pc, #280]	; (8001280 <HAL_GPIO_Init+0x2ec>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d101      	bne.n	8001170 <HAL_GPIO_Init+0x1dc>
 800116c:	2304      	movs	r3, #4
 800116e:	e008      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001170:	2305      	movs	r3, #5
 8001172:	e006      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001174:	2303      	movs	r3, #3
 8001176:	e004      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001178:	2302      	movs	r3, #2
 800117a:	e002      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001180:	2300      	movs	r3, #0
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	f002 0203 	and.w	r2, r2, #3
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	4093      	lsls	r3, r2
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001192:	4937      	ldr	r1, [pc, #220]	; (8001270 <HAL_GPIO_Init+0x2dc>)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a0:	4b38      	ldr	r3, [pc, #224]	; (8001284 <HAL_GPIO_Init+0x2f0>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011c4:	4a2f      	ldr	r2, [pc, #188]	; (8001284 <HAL_GPIO_Init+0x2f0>)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ca:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <HAL_GPIO_Init+0x2f0>)
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011ee:	4a25      	ldr	r2, [pc, #148]	; (8001284 <HAL_GPIO_Init+0x2f0>)
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <HAL_GPIO_Init+0x2f0>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001218:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <HAL_GPIO_Init+0x2f0>)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <HAL_GPIO_Init+0x2f0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <HAL_GPIO_Init+0x2f0>)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	f47f aea3 	bne.w	8000fa4 <HAL_GPIO_Init+0x10>
  }
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000
 8001274:	48000400 	.word	0x48000400
 8001278:	48000800 	.word	0x48000800
 800127c:	48000c00 	.word	0x48000c00
 8001280:	48001000 	.word	0x48001000
 8001284:	40010400 	.word	0x40010400

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e081      	b.n	80013ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d106      	bne.n	80012e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fb80 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2224      	movs	r2, #36	; 0x24
 80012e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0201 	bic.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001308:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001318:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d107      	bne.n	8001332 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	e006      	b.n	8001340 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800133e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d104      	bne.n	8001352 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001350:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001364:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001374:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691a      	ldr	r2, [r3, #16]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69d9      	ldr	r1, [r3, #28]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1a      	ldr	r2, [r3, #32]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2220      	movs	r2, #32
 80013ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af02      	add	r7, sp, #8
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	4608      	mov	r0, r1
 80013e2:	4611      	mov	r1, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	817b      	strh	r3, [r7, #10]
 80013ea:	460b      	mov	r3, r1
 80013ec:	813b      	strh	r3, [r7, #8]
 80013ee:	4613      	mov	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b20      	cmp	r3, #32
 80013fc:	f040 80f9 	bne.w	80015f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <HAL_I2C_Mem_Write+0x34>
 8001406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001412:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e0ed      	b.n	80015f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_I2C_Mem_Write+0x4e>
 8001422:	2302      	movs	r3, #2
 8001424:	e0e6      	b.n	80015f4 <HAL_I2C_Mem_Write+0x21c>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800142e:	f7ff fc6f 	bl	8000d10 <HAL_GetTick>
 8001432:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2319      	movs	r3, #25
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f000 fac3 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0d1      	b.n	80015f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2221      	movs	r2, #33	; 0x21
 8001454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2240      	movs	r2, #64	; 0x40
 800145c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a3a      	ldr	r2, [r7, #32]
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001470:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001478:	88f8      	ldrh	r0, [r7, #6]
 800147a:	893a      	ldrh	r2, [r7, #8]
 800147c:	8979      	ldrh	r1, [r7, #10]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	4603      	mov	r3, r0
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 f9d3 	bl	8001834 <I2C_RequestMemoryWrite>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0a9      	b.n	80015f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	2bff      	cmp	r3, #255	; 0xff
 80014a8:	d90e      	bls.n	80014c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	22ff      	movs	r2, #255	; 0xff
 80014ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	8979      	ldrh	r1, [r7, #10]
 80014b8:	2300      	movs	r3, #0
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 fc3d 	bl	8001d40 <I2C_TransferConfig>
 80014c6:	e00f      	b.n	80014e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	8979      	ldrh	r1, [r7, #10]
 80014da:	2300      	movs	r3, #0
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 fc2c 	bl	8001d40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 fabc 	bl	8001a6a <I2C_WaitOnTXISFlagUntilTimeout>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e07b      	b.n	80015f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001516:	b29b      	uxth	r3, r3
 8001518:	3b01      	subs	r3, #1
 800151a:	b29a      	uxth	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001524:	3b01      	subs	r3, #1
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001530:	b29b      	uxth	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d034      	beq.n	80015a0 <HAL_I2C_Mem_Write+0x1c8>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153a:	2b00      	cmp	r3, #0
 800153c:	d130      	bne.n	80015a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001544:	2200      	movs	r2, #0
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 fa3f 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e04d      	b.n	80015f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155c:	b29b      	uxth	r3, r3
 800155e:	2bff      	cmp	r3, #255	; 0xff
 8001560:	d90e      	bls.n	8001580 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	22ff      	movs	r2, #255	; 0xff
 8001566:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156c:	b2da      	uxtb	r2, r3
 800156e:	8979      	ldrh	r1, [r7, #10]
 8001570:	2300      	movs	r3, #0
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 fbe1 	bl	8001d40 <I2C_TransferConfig>
 800157e:	e00f      	b.n	80015a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158e:	b2da      	uxtb	r2, r3
 8001590:	8979      	ldrh	r1, [r7, #10]
 8001592:	2300      	movs	r3, #0
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 fbd0 	bl	8001d40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d19e      	bne.n	80014e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 faa2 	bl	8001af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e01a      	b.n	80015f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2220      	movs	r2, #32
 80015c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_I2C_Mem_Write+0x224>)
 80015d2:	400b      	ands	r3, r1
 80015d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2220      	movs	r2, #32
 80015da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80015f2:	2302      	movs	r3, #2
  }
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	fe00e800 	.word	0xfe00e800

08001600 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af02      	add	r7, sp, #8
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	4608      	mov	r0, r1
 800160a:	4611      	mov	r1, r2
 800160c:	461a      	mov	r2, r3
 800160e:	4603      	mov	r3, r0
 8001610:	817b      	strh	r3, [r7, #10]
 8001612:	460b      	mov	r3, r1
 8001614:	813b      	strh	r3, [r7, #8]
 8001616:	4613      	mov	r3, r2
 8001618:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b20      	cmp	r3, #32
 8001624:	f040 80fd 	bne.w	8001822 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <HAL_I2C_Mem_Read+0x34>
 800162e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001630:	2b00      	cmp	r3, #0
 8001632:	d105      	bne.n	8001640 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0f1      	b.n	8001824 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_I2C_Mem_Read+0x4e>
 800164a:	2302      	movs	r3, #2
 800164c:	e0ea      	b.n	8001824 <HAL_I2C_Mem_Read+0x224>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001656:	f7ff fb5b 	bl	8000d10 <HAL_GetTick>
 800165a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2319      	movs	r3, #25
 8001662:	2201      	movs	r2, #1
 8001664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f9af 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0d5      	b.n	8001824 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2222      	movs	r2, #34	; 0x22
 800167c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2240      	movs	r2, #64	; 0x40
 8001684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a3a      	ldr	r2, [r7, #32]
 8001692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001698:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016a0:	88f8      	ldrh	r0, [r7, #6]
 80016a2:	893a      	ldrh	r2, [r7, #8]
 80016a4:	8979      	ldrh	r1, [r7, #10]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	4603      	mov	r3, r0
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f913 	bl	80018dc <I2C_RequestMemoryRead>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0ad      	b.n	8001824 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	2bff      	cmp	r3, #255	; 0xff
 80016d0:	d90e      	bls.n	80016f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	22ff      	movs	r2, #255	; 0xff
 80016d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	8979      	ldrh	r1, [r7, #10]
 80016e0:	4b52      	ldr	r3, [pc, #328]	; (800182c <HAL_I2C_Mem_Read+0x22c>)
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 fb29 	bl	8001d40 <I2C_TransferConfig>
 80016ee:	e00f      	b.n	8001710 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	8979      	ldrh	r1, [r7, #10]
 8001702:	4b4a      	ldr	r3, [pc, #296]	; (800182c <HAL_I2C_Mem_Read+0x22c>)
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 fb18 	bl	8001d40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001716:	2200      	movs	r2, #0
 8001718:	2104      	movs	r1, #4
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 f956 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07c      	b.n	8001824 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b01      	subs	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001760:	b29b      	uxth	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d034      	beq.n	80017d0 <HAL_I2C_Mem_Read+0x1d0>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176a:	2b00      	cmp	r3, #0
 800176c:	d130      	bne.n	80017d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001774:	2200      	movs	r2, #0
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f000 f927 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e04d      	b.n	8001824 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178c:	b29b      	uxth	r3, r3
 800178e:	2bff      	cmp	r3, #255	; 0xff
 8001790:	d90e      	bls.n	80017b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	22ff      	movs	r2, #255	; 0xff
 8001796:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179c:	b2da      	uxtb	r2, r3
 800179e:	8979      	ldrh	r1, [r7, #10]
 80017a0:	2300      	movs	r3, #0
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 fac9 	bl	8001d40 <I2C_TransferConfig>
 80017ae:	e00f      	b.n	80017d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	8979      	ldrh	r1, [r7, #10]
 80017c2:	2300      	movs	r3, #0
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 fab8 	bl	8001d40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d19a      	bne.n	8001710 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 f98a 	bl	8001af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e01a      	b.n	8001824 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2220      	movs	r2, #32
 80017f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_I2C_Mem_Read+0x230>)
 8001802:	400b      	ands	r3, r1
 8001804:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2220      	movs	r2, #32
 800180a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001822:	2302      	movs	r3, #2
  }
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	80002400 	.word	0x80002400
 8001830:	fe00e800 	.word	0xfe00e800

08001834 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af02      	add	r7, sp, #8
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	4608      	mov	r0, r1
 800183e:	4611      	mov	r1, r2
 8001840:	461a      	mov	r2, r3
 8001842:	4603      	mov	r3, r0
 8001844:	817b      	strh	r3, [r7, #10]
 8001846:	460b      	mov	r3, r1
 8001848:	813b      	strh	r3, [r7, #8]
 800184a:	4613      	mov	r3, r2
 800184c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	8979      	ldrh	r1, [r7, #10]
 8001854:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <I2C_RequestMemoryWrite+0xa4>)
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 fa6f 	bl	8001d40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	69b9      	ldr	r1, [r7, #24]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f8ff 	bl	8001a6a <I2C_WaitOnTXISFlagUntilTimeout>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e02c      	b.n	80018d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800187c:	893b      	ldrh	r3, [r7, #8]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
 8001886:	e015      	b.n	80018b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001888:	893b      	ldrh	r3, [r7, #8]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	b29b      	uxth	r3, r3
 800188e:	b2da      	uxtb	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	69b9      	ldr	r1, [r7, #24]
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 f8e5 	bl	8001a6a <I2C_WaitOnTXISFlagUntilTimeout>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e012      	b.n	80018d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018aa:	893b      	ldrh	r3, [r7, #8]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2200      	movs	r2, #0
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 f884 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	80002000 	.word	0x80002000

080018dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	4608      	mov	r0, r1
 80018e6:	4611      	mov	r1, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	817b      	strh	r3, [r7, #10]
 80018ee:	460b      	mov	r3, r1
 80018f0:	813b      	strh	r3, [r7, #8]
 80018f2:	4613      	mov	r3, r2
 80018f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	8979      	ldrh	r1, [r7, #10]
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <I2C_RequestMemoryRead+0xa4>)
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2300      	movs	r3, #0
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 fa1c 	bl	8001d40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	69b9      	ldr	r1, [r7, #24]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f8ac 	bl	8001a6a <I2C_WaitOnTXISFlagUntilTimeout>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e02c      	b.n	8001976 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d105      	bne.n	800192e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001922:	893b      	ldrh	r3, [r7, #8]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
 800192c:	e015      	b.n	800195a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800192e:	893b      	ldrh	r3, [r7, #8]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	b29b      	uxth	r3, r3
 8001934:	b2da      	uxtb	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	69b9      	ldr	r1, [r7, #24]
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f892 	bl	8001a6a <I2C_WaitOnTXISFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e012      	b.n	8001976 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001950:	893b      	ldrh	r3, [r7, #8]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2200      	movs	r2, #0
 8001962:	2140      	movs	r1, #64	; 0x40
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f831 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	80002000 	.word	0x80002000

08001984 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b02      	cmp	r3, #2
 8001998:	d103      	bne.n	80019a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d007      	beq.n	80019c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	619a      	str	r2, [r3, #24]
  }
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	4613      	mov	r3, r2
 80019da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019dc:	e031      	b.n	8001a42 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019e4:	d02d      	beq.n	8001a42 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e6:	f7ff f993 	bl	8000d10 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d302      	bcc.n	80019fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d122      	bne.n	8001a42 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4013      	ands	r3, r2
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d113      	bne.n	8001a42 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f043 0220 	orr.w	r2, r3, #32
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00f      	b.n	8001a62 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699a      	ldr	r2, [r3, #24]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	bf0c      	ite	eq
 8001a52:	2301      	moveq	r3, #1
 8001a54:	2300      	movne	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d0be      	beq.n	80019de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a76:	e033      	b.n	8001ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f87f 	bl	8001b80 <I2C_IsErrorOccurred>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e031      	b.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a92:	d025      	beq.n	8001ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a94:	f7ff f93c 	bl	8000d10 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d302      	bcc.n	8001aaa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d11a      	bne.n	8001ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d013      	beq.n	8001ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	f043 0220 	orr.w	r2, r3, #32
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e007      	b.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d1c4      	bne.n	8001a78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b04:	e02f      	b.n	8001b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f838 	bl	8001b80 <I2C_IsErrorOccurred>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e02d      	b.n	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b1a:	f7ff f8f9 	bl	8000d10 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d302      	bcc.n	8001b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d11a      	bne.n	8001b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f003 0320 	and.w	r3, r3, #32
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	d013      	beq.n	8001b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f043 0220 	orr.w	r2, r3, #32
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e007      	b.n	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d1c8      	bne.n	8001b06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d068      	beq.n	8001c7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bb4:	e049      	b.n	8001c4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bbc:	d045      	beq.n	8001c4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bbe:	f7ff f8a7 	bl	8000d10 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d302      	bcc.n	8001bd4 <I2C_IsErrorOccurred+0x54>
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d13a      	bne.n	8001c4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001be6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bf6:	d121      	bne.n	8001c3c <I2C_IsErrorOccurred+0xbc>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bfe:	d01d      	beq.n	8001c3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001c00:	7cfb      	ldrb	r3, [r7, #19]
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d01a      	beq.n	8001c3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c16:	f7ff f87b 	bl	8000d10 <HAL_GetTick>
 8001c1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c1c:	e00e      	b.n	8001c3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c1e:	f7ff f877 	bl	8000d10 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b19      	cmp	r3, #25
 8001c2a:	d907      	bls.n	8001c3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	f043 0320 	orr.w	r3, r3, #32
 8001c32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001c3a:	e006      	b.n	8001c4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d1e9      	bne.n	8001c1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0320 	and.w	r3, r3, #32
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d003      	beq.n	8001c60 <I2C_IsErrorOccurred+0xe0>
 8001c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0aa      	beq.n	8001bb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d103      	bne.n	8001c70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00b      	beq.n	8001ca8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01c      	beq.n	8001d2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f7ff fe45 	bl	8001984 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <I2C_IsErrorOccurred+0x1bc>)
 8001d06:	400b      	ands	r3, r1
 8001d08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3728      	adds	r7, #40	; 0x28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	fe00e800 	.word	0xfe00e800

08001d40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	817b      	strh	r3, [r7, #10]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d58:	7a7b      	ldrb	r3, [r7, #9]
 8001d5a:	041b      	lsls	r3, r3, #16
 8001d5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	0d5b      	lsrs	r3, r3, #21
 8001d7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <I2C_TransferConfig+0x60>)
 8001d80:	430b      	orrs	r3, r1
 8001d82:	43db      	mvns	r3, r3
 8001d84:	ea02 0103 	and.w	r1, r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d92:	bf00      	nop
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	03ff63ff 	.word	0x03ff63ff

08001da4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b20      	cmp	r3, #32
 8001db8:	d138      	bne.n	8001e2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e032      	b.n	8001e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001df6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e000      	b.n	8001e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
  }
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d139      	bne.n	8001ec4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e033      	b.n	8001ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2224      	movs	r2, #36	; 0x24
 8001e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e000      	b.n	8001ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ec4:	2302      	movs	r3, #2
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed4:	b08b      	sub	sp, #44	; 0x2c
 8001ed6:	af06      	add	r7, sp, #24
 8001ed8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0c4      	b.n	800206e <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f007 f981 	bl	8009200 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2203      	movs	r2, #3
 8001f02:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f003 f8a7 	bl	800505e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e040      	b.n	8001f98 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	440b      	add	r3, r1
 8001f26:	3301      	adds	r3, #1
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	440b      	add	r3, r1
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	3303      	adds	r3, #3
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	3338      	adds	r3, #56	; 0x38
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	440b      	add	r3, r1
 8001f78:	333c      	adds	r3, #60	; 0x3c
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3340      	adds	r3, #64	; 0x40
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	3301      	adds	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d3b9      	bcc.n	8001f16 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	e044      	b.n	8002032 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	440b      	add	r3, r1
 8001fcc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	3301      	adds	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	429a      	cmp	r2, r3
 800203a:	d3b5      	bcc.n	8001fa8 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	687e      	ldr	r6, [r7, #4]
 8002044:	466d      	mov	r5, sp
 8002046:	f106 0410 	add.w	r4, r6, #16
 800204a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	602b      	str	r3, [r5, #0]
 8002052:	1d33      	adds	r3, r6, #4
 8002054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002056:	6838      	ldr	r0, [r7, #0]
 8002058:	f003 f81c 	bl	8005094 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002076 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_PCD_Start+0x16>
 8002088:	2302      	movs	r3, #2
 800208a:	e016      	b.n	80020ba <HAL_PCD_Start+0x44>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f002 ffc9 	bl	8005030 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800209e:	2101      	movs	r1, #1
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f007 fb4b 	bl	800973c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f005 fa89 	bl	80075c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f005 fa82 	bl	80075d8 <USB_ReadInterrupts>
 80020d4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 fab2 	bl	800264a <PCD_EP_ISR_Handler>

    return;
 80020e6:	e0bd      	b.n	8002264 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d013      	beq.n	800211a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002104:	b292      	uxth	r2, r2
 8002106:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f007 f919 	bl	8009342 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002110:	2100      	movs	r1, #0
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8a9 	bl	800226a <HAL_PCD_SetAddress>

    return;
 8002118:	e0a4      	b.n	8002264 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00c      	beq.n	800213e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800212c:	b29a      	uxth	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002136:	b292      	uxth	r2, r2
 8002138:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800213c:	e092      	b.n	8002264 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00c      	beq.n	8002162 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002150:	b29a      	uxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800215a:	b292      	uxth	r2, r2
 800215c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002160:	e080      	b.n	8002264 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d027      	beq.n	80021bc <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002174:	b29a      	uxth	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0204 	bic.w	r2, r2, #4
 800217e:	b292      	uxth	r2, r2
 8002180:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800218c:	b29a      	uxth	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0208 	bic.w	r2, r2, #8
 8002196:	b292      	uxth	r2, r2
 8002198:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f007 f909 	bl	80093b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021b4:	b292      	uxth	r2, r2
 80021b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80021ba:	e053      	b.n	8002264 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d027      	beq.n	8002216 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0208 	orr.w	r2, r2, #8
 80021d8:	b292      	uxth	r2, r2
 80021da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f0:	b292      	uxth	r2, r2
 80021f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021fe:	b29a      	uxth	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0204 	orr.w	r2, r2, #4
 8002208:	b292      	uxth	r2, r2
 800220a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f007 f8b6 	bl	8009380 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002214:	e026      	b.n	8002264 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00f      	beq.n	8002240 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002228:	b29a      	uxth	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002232:	b292      	uxth	r2, r2
 8002234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f007 f874 	bl	8009326 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800223e:	e011      	b.n	8002264 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002252:	b29a      	uxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800225c:	b292      	uxth	r2, r2
 800225e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002262:	bf00      	nop
  }
}
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_PCD_SetAddress+0x1a>
 8002280:	2302      	movs	r3, #2
 8002282:	e013      	b.n	80022ac <HAL_PCD_SetAddress+0x42>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f005 f97c 	bl	800759a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	4608      	mov	r0, r1
 80022be:	4611      	mov	r1, r2
 80022c0:	461a      	mov	r2, r3
 80022c2:	4603      	mov	r3, r0
 80022c4:	70fb      	strb	r3, [r7, #3]
 80022c6:	460b      	mov	r3, r1
 80022c8:	803b      	strh	r3, [r7, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	da0e      	bge.n	80022f8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	705a      	strb	r2, [r3, #1]
 80022f6:	e00e      	b.n	8002316 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 0207 	and.w	r2, r3, #7
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002322:	883a      	ldrh	r2, [r7, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	78ba      	ldrb	r2, [r7, #2]
 800232c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800232e:	78bb      	ldrb	r3, [r7, #2]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d102      	bne.n	800233a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_PCD_EP_Open+0x94>
 8002344:	2302      	movs	r3, #2
 8002346:	e00e      	b.n	8002366 <HAL_PCD_EP_Open+0xb2>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68f9      	ldr	r1, [r7, #12]
 8002356:	4618      	mov	r0, r3
 8002358:	f002 febe 	bl	80050d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002364:	7afb      	ldrb	r3, [r7, #11]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800237a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800237e:	2b00      	cmp	r3, #0
 8002380:	da0e      	bge.n	80023a0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	705a      	strb	r2, [r3, #1]
 800239e:	e00e      	b.n	80023be <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	f003 0207 	and.w	r2, r3, #7
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_PCD_EP_Close+0x6a>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e00e      	b.n	80023f6 <HAL_PCD_EP_Close+0x88>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68f9      	ldr	r1, [r7, #12]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 fa3a 	bl	8005860 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	460b      	mov	r3, r1
 800240c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800240e:	7afb      	ldrb	r3, [r7, #11]
 8002410:	f003 0207 	and.w	r2, r3, #7
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2200      	movs	r2, #0
 8002436:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2200      	movs	r2, #0
 800243c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800243e:	7afb      	ldrb	r3, [r7, #11]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	b2da      	uxtb	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6979      	ldr	r1, [r7, #20]
 8002450:	4618      	mov	r0, r3
 8002452:	f003 fbf2 	bl	8005c3a <USB_EPStartXfer>

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	f003 0207 	and.w	r2, r3, #7
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	460b      	mov	r3, r1
 800249e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a0:	7afb      	ldrb	r3, [r7, #11]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4413      	add	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2200      	movs	r2, #0
 80024d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2201      	movs	r2, #1
 80024da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024dc:	7afb      	ldrb	r3, [r7, #11]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6979      	ldr	r1, [r7, #20]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 fba3 	bl	8005c3a <USB_EPStartXfer>

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	f003 0207 	and.w	r2, r3, #7
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	d901      	bls.n	800251c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e03e      	b.n	800259a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800251c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002520:	2b00      	cmp	r3, #0
 8002522:	da0e      	bge.n	8002542 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	705a      	strb	r2, [r3, #1]
 8002540:	e00c      	b.n	800255c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	b2da      	uxtb	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_PCD_EP_SetStall+0x7e>
 8002578:	2302      	movs	r3, #2
 800257a:	e00e      	b.n	800259a <HAL_PCD_EP_SetStall+0x9c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68f9      	ldr	r1, [r7, #12]
 800258a:	4618      	mov	r0, r3
 800258c:	f004 ff06 	bl	800739c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	f003 020f 	and.w	r2, r3, #15
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d901      	bls.n	80025c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e040      	b.n	8002642 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	da0e      	bge.n	80025e6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	705a      	strb	r2, [r3, #1]
 80025e4:	e00e      	b.n	8002604 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	f003 0207 	and.w	r2, r3, #7
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	4413      	add	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	b2da      	uxtb	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_PCD_EP_ClrStall+0x82>
 8002620:	2302      	movs	r3, #2
 8002622:	e00e      	b.n	8002642 <HAL_PCD_EP_ClrStall+0xa0>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68f9      	ldr	r1, [r7, #12]
 8002632:	4618      	mov	r0, r3
 8002634:	f004 ff03 	bl	800743e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b096      	sub	sp, #88	; 0x58
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002652:	e3bf      	b.n	8002dd4 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800265c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002660:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800266e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 8179 	bne.w	800296a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002678:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b00      	cmp	r3, #0
 8002682:	d152      	bne.n	800272a <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002694:	81fb      	strh	r3, [r7, #14]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	89fb      	ldrh	r3, [r7, #14]
 800269c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3328      	adds	r3, #40	; 0x28
 80026ac:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	3302      	adds	r3, #2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	441a      	add	r2, r3
 80026e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80026e8:	2100      	movs	r1, #0
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f006 fe01 	bl	80092f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 836b 	beq.w	8002dd4 <PCD_EP_ISR_Handler+0x78a>
 80026fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 8366 	bne.w	8002dd4 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002714:	b2da      	uxtb	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b292      	uxth	r2, r2
 800271c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002728:	e354      	b.n	8002dd4 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002730:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800273c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002744:	2b00      	cmp	r3, #0
 8002746:	d034      	beq.n	80027b2 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002750:	b29b      	uxth	r3, r3
 8002752:	461a      	mov	r2, r3
 8002754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	3306      	adds	r3, #6
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	4413      	add	r3, r2
 8002766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002772:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800277e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002780:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002784:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002786:	b29b      	uxth	r3, r3
 8002788:	f004 ff7c 	bl	8007684 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29a      	uxth	r2, r3
 8002794:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002798:	4013      	ands	r3, r2
 800279a:	823b      	strh	r3, [r7, #16]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	8a3a      	ldrh	r2, [r7, #16]
 80027a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027a6:	b292      	uxth	r2, r2
 80027a8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f006 fd74 	bl	8009298 <HAL_PCD_SetupStageCallback>
 80027b0:	e310      	b.n	8002dd4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027b2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f280 830c 	bge.w	8002dd4 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027c8:	4013      	ands	r3, r2
 80027ca:	83fb      	strh	r3, [r7, #30]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	8bfa      	ldrh	r2, [r7, #30]
 80027d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027d6:	b292      	uxth	r2, r2
 80027d8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	3306      	adds	r3, #6
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002804:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d019      	beq.n	8002842 <PCD_EP_ISR_Handler+0x1f8>
 800280e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d015      	beq.n	8002842 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281c:	6959      	ldr	r1, [r3, #20]
 800281e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002820:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002824:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002826:	b29b      	uxth	r3, r3
 8002828:	f004 ff2c 	bl	8007684 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800282c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	441a      	add	r2, r3
 8002836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002838:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800283a:	2100      	movs	r1, #0
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f006 fd3d 	bl	80092bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800284c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002854:	2b00      	cmp	r3, #0
 8002856:	f040 82bd 	bne.w	8002dd4 <PCD_EP_ISR_Handler+0x78a>
 800285a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800285e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002862:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002866:	f000 82b5 	beq.w	8002dd4 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002878:	b29b      	uxth	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002894:	b29a      	uxth	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	801a      	strh	r2, [r3, #0]
 800289a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b3e      	cmp	r3, #62	; 0x3e
 80028a0:	d91d      	bls.n	80028de <PCD_EP_ISR_Handler+0x294>
 80028a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	647b      	str	r3, [r7, #68]	; 0x44
 80028aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <PCD_EP_ISR_Handler+0x272>
 80028b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b8:	3b01      	subs	r3, #1
 80028ba:	647b      	str	r3, [r7, #68]	; 0x44
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	029b      	lsls	r3, r3, #10
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	4313      	orrs	r3, r2
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	801a      	strh	r2, [r3, #0]
 80028dc:	e026      	b.n	800292c <PCD_EP_ISR_Handler+0x2e2>
 80028de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <PCD_EP_ISR_Handler+0x2b2>
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	e017      	b.n	800292c <PCD_EP_ISR_Handler+0x2e2>
 80028fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	647b      	str	r3, [r7, #68]	; 0x44
 8002904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <PCD_EP_ISR_Handler+0x2cc>
 8002910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002912:	3301      	adds	r3, #1
 8002914:	647b      	str	r3, [r7, #68]	; 0x44
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29a      	uxth	r2, r3
 800291c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800291e:	b29b      	uxth	r3, r3
 8002920:	029b      	lsls	r3, r3, #10
 8002922:	b29b      	uxth	r3, r3
 8002924:	4313      	orrs	r3, r2
 8002926:	b29a      	uxth	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293c:	827b      	strh	r3, [r7, #18]
 800293e:	8a7b      	ldrh	r3, [r7, #18]
 8002940:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002944:	827b      	strh	r3, [r7, #18]
 8002946:	8a7b      	ldrh	r3, [r7, #18]
 8002948:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800294c:	827b      	strh	r3, [r7, #18]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	8a7b      	ldrh	r3, [r7, #18]
 8002954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800295c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002964:	b29b      	uxth	r3, r3
 8002966:	8013      	strh	r3, [r2, #0]
 8002968:	e234      	b.n	8002dd4 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800297e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002982:	2b00      	cmp	r3, #0
 8002984:	f280 80fc 	bge.w	8002b80 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29a      	uxth	r2, r3
 800299a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800299e:	4013      	ands	r3, r2
 80029a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80029b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029ba:	b292      	uxth	r2, r2
 80029bc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80029be:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80029d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d6:	7b1b      	ldrb	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d125      	bne.n	8002a28 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	3306      	adds	r3, #6
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a04:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002a08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8092 	beq.w	8002b36 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a18:	6959      	ldr	r1, [r3, #20]
 8002a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1c:	88da      	ldrh	r2, [r3, #6]
 8002a1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a22:	f004 fe2f 	bl	8007684 <USB_ReadPMA>
 8002a26:	e086      	b.n	8002b36 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2a:	78db      	ldrb	r3, [r3, #3]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d10a      	bne.n	8002a46 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002a30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a34:	461a      	mov	r2, r3
 8002a36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f9d9 	bl	8002df0 <HAL_PCD_EP_DB_Receive>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002a44:	e077      	b.n	8002b36 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a60:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	441a      	add	r2, r3
 8002a72:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d024      	beq.n	8002aee <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3302      	adds	r3, #2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002acc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002ad0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d02e      	beq.n	8002b36 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ade:	6959      	ldr	r1, [r3, #20]
 8002ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae2:	891a      	ldrh	r2, [r3, #8]
 8002ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ae8:	f004 fdcc 	bl	8007684 <USB_ReadPMA>
 8002aec:	e023      	b.n	8002b36 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	3306      	adds	r3, #6
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b16:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002b1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b28:	6959      	ldr	r1, [r3, #20]
 8002b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2c:	895a      	ldrh	r2, [r3, #10]
 8002b2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b32:	f004 fda7 	bl	8007684 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b38:	69da      	ldr	r2, [r3, #28]
 8002b3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b3e:	441a      	add	r2, r3
 8002b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b42:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b4c:	441a      	add	r2, r3
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b50:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <PCD_EP_ISR_Handler+0x51c>
 8002b5a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d206      	bcs.n	8002b74 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f006 fba5 	bl	80092bc <HAL_PCD_DataOutStageCallback>
 8002b72:	e005      	b.n	8002b80 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 f85d 	bl	8005c3a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8123 	beq.w	8002dd4 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b8e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	441a      	add	r2, r3
 8002bce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be0:	78db      	ldrb	r3, [r3, #3]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	f040 80a2 	bne.w	8002d2c <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bea:	2200      	movs	r2, #0
 8002bec:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf0:	7b1b      	ldrb	r3, [r3, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8093 	beq.w	8002d1e <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bf8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d046      	beq.n	8002c92 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c06:	785b      	ldrb	r3, [r3, #1]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d126      	bne.n	8002c5a <PCD_EP_ISR_Handler+0x610>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	4413      	add	r3, r2
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
 8002c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	011a      	lsls	r2, r3, #4
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	801a      	strh	r2, [r3, #0]
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	801a      	strh	r2, [r3, #0]
 8002c58:	e061      	b.n	8002d1e <PCD_EP_ISR_Handler+0x6d4>
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5c:	785b      	ldrb	r3, [r3, #1]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d15d      	bne.n	8002d1e <PCD_EP_ISR_Handler+0x6d4>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c76:	4413      	add	r3, r2
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	011a      	lsls	r2, r3, #4
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	4413      	add	r3, r2
 8002c84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	801a      	strh	r2, [r3, #0]
 8002c90:	e045      	b.n	8002d1e <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9a:	785b      	ldrb	r3, [r3, #1]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d126      	bne.n	8002cee <PCD_EP_ISR_Handler+0x6a4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb4:	4413      	add	r3, r2
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	011a      	lsls	r2, r3, #4
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	801a      	strh	r2, [r3, #0]
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	801a      	strh	r2, [r3, #0]
 8002cec:	e017      	b.n	8002d1e <PCD_EP_ISR_Handler+0x6d4>
 8002cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d113      	bne.n	8002d1e <PCD_EP_ISR_Handler+0x6d4>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d04:	4413      	add	r3, r2
 8002d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	011a      	lsls	r2, r3, #4
 8002d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d10:	4413      	add	r3, r2
 8002d12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	4619      	mov	r1, r3
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f006 fae4 	bl	80092f2 <HAL_PCD_DataInStageCallback>
 8002d2a:	e053      	b.n	8002dd4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002d2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d146      	bne.n	8002dc6 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d60:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d66:	699a      	ldr	r2, [r3, #24]
 8002d68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d907      	bls.n	8002d80 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d78:	1ad2      	subs	r2, r2, r3
 8002d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7c:	619a      	str	r2, [r3, #24]
 8002d7e:	e002      	b.n	8002d86 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d82:	2200      	movs	r2, #0
 8002d84:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	4619      	mov	r1, r3
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f006 faac 	bl	80092f2 <HAL_PCD_DataInStageCallback>
 8002d9a:	e01b      	b.n	8002dd4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002da4:	441a      	add	r2, r3
 8002da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002db2:	441a      	add	r2, r3
 8002db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f002 ff3b 	bl	8005c3a <USB_EPStartXfer>
 8002dc4:	e006      	b.n	8002dd4 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002dc6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002dca:	461a      	mov	r2, r3
 8002dcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f91b 	bl	800300a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	b21b      	sxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f6ff ac37 	blt.w	8002654 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3758      	adds	r7, #88	; 0x58
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d07e      	beq.n	8002f06 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e30:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	8b7b      	ldrh	r3, [r7, #26]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d306      	bcc.n	8002e4a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	699a      	ldr	r2, [r3, #24]
 8002e40:	8b7b      	ldrh	r3, [r7, #26]
 8002e42:	1ad2      	subs	r2, r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	619a      	str	r2, [r3, #24]
 8002e48:	e002      	b.n	8002e50 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d123      	bne.n	8002ea0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e72:	833b      	strh	r3, [r7, #24]
 8002e74:	8b3b      	ldrh	r3, [r7, #24]
 8002e76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e7a:	833b      	strh	r3, [r7, #24]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	441a      	add	r2, r3
 8002e8a:	8b3b      	ldrh	r3, [r7, #24]
 8002e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01f      	beq.n	8002eea <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec4:	82fb      	strh	r3, [r7, #22]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	441a      	add	r2, r3
 8002ed4:	8afb      	ldrh	r3, [r7, #22]
 8002ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002eea:	8b7b      	ldrh	r3, [r7, #26]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8087 	beq.w	8003000 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	6959      	ldr	r1, [r3, #20]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	891a      	ldrh	r2, [r3, #8]
 8002efe:	8b7b      	ldrh	r3, [r7, #26]
 8002f00:	f004 fbc0 	bl	8007684 <USB_ReadPMA>
 8002f04:	e07c      	b.n	8003000 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	3306      	adds	r3, #6
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f2e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	699a      	ldr	r2, [r3, #24]
 8002f34:	8b7b      	ldrh	r3, [r7, #26]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d306      	bcc.n	8002f48 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	8b7b      	ldrh	r3, [r7, #26]
 8002f40:	1ad2      	subs	r2, r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	619a      	str	r2, [r3, #24]
 8002f46:	e002      	b.n	8002f4e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d123      	bne.n	8002f9e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f70:	83fb      	strh	r3, [r7, #30]
 8002f72:	8bfb      	ldrh	r3, [r7, #30]
 8002f74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f78:	83fb      	strh	r3, [r7, #30]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	441a      	add	r2, r3
 8002f88:	8bfb      	ldrh	r3, [r7, #30]
 8002f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11f      	bne.n	8002fe8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc2:	83bb      	strh	r3, [r7, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	441a      	add	r2, r3
 8002fd2:	8bbb      	ldrh	r3, [r7, #28]
 8002fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fe8:	8b7b      	ldrh	r3, [r7, #26]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	6959      	ldr	r1, [r3, #20]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	895a      	ldrh	r2, [r3, #10]
 8002ffa:	8b7b      	ldrh	r3, [r7, #26]
 8002ffc:	f004 fb42 	bl	8007684 <USB_ReadPMA>
    }
  }

  return count;
 8003000:	8b7b      	ldrh	r3, [r7, #26]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3720      	adds	r7, #32
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b0a4      	sub	sp, #144	; 0x90
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	4613      	mov	r3, r2
 8003016:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 81dd 	beq.w	80033de <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302c:	b29b      	uxth	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	3302      	adds	r3, #2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800304c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003058:	429a      	cmp	r2, r3
 800305a:	d907      	bls.n	800306c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003064:	1ad2      	subs	r2, r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	619a      	str	r2, [r3, #24]
 800306a:	e002      	b.n	8003072 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2200      	movs	r2, #0
 8003070:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 80b9 	bne.w	80031ee <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	785b      	ldrb	r3, [r3, #1]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d126      	bne.n	80030d2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003092:	b29b      	uxth	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	4413      	add	r3, r2
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	011a      	lsls	r2, r3, #4
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	4413      	add	r3, r2
 80030a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	801a      	strh	r2, [r3, #0]
 80030d0:	e01a      	b.n	8003108 <HAL_PCD_EP_DB_Transmit+0xfe>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	785b      	ldrb	r3, [r3, #1]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d116      	bne.n	8003108 <HAL_PCD_EP_DB_Transmit+0xfe>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	637b      	str	r3, [r7, #52]	; 0x34
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ee:	4413      	add	r3, r2
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	011a      	lsls	r2, r3, #4
 80030f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fa:	4413      	add	r3, r2
 80030fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003100:	633b      	str	r3, [r7, #48]	; 0x30
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	2200      	movs	r2, #0
 8003106:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	785b      	ldrb	r3, [r3, #1]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d126      	bne.n	8003164 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003124:	b29b      	uxth	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	4413      	add	r3, r2
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	011a      	lsls	r2, r3, #4
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	4413      	add	r3, r2
 8003138:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003148:	b29a      	uxth	r2, r3
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	801a      	strh	r2, [r3, #0]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800315c:	b29a      	uxth	r2, r3
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	801a      	strh	r2, [r3, #0]
 8003162:	e017      	b.n	8003194 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	785b      	ldrb	r3, [r3, #1]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d113      	bne.n	8003194 <HAL_PCD_EP_DB_Transmit+0x18a>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003174:	b29b      	uxth	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	4413      	add	r3, r2
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	011a      	lsls	r2, r3, #4
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	4413      	add	r3, r2
 8003188:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800318c:	623b      	str	r3, [r7, #32]
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	2200      	movs	r2, #0
 8003192:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	4619      	mov	r1, r3
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f006 f8a9 	bl	80092f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 82fc 	beq.w	80037a4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c6:	82fb      	strh	r3, [r7, #22]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	441a      	add	r2, r3
 80031d6:	8afb      	ldrh	r3, [r7, #22]
 80031d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	8013      	strh	r3, [r2, #0]
 80031ec:	e2da      	b.n	80037a4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d021      	beq.n	800323c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003212:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	441a      	add	r2, r3
 8003224:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800322c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003238:	b29b      	uxth	r3, r3
 800323a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003242:	2b01      	cmp	r3, #1
 8003244:	f040 82ae 	bne.w	80037a4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003250:	441a      	add	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800325e:	441a      	add	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	6a1a      	ldr	r2, [r3, #32]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	429a      	cmp	r2, r3
 800326e:	d30b      	bcc.n	8003288 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003280:	1ad2      	subs	r2, r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	621a      	str	r2, [r3, #32]
 8003286:	e017      	b.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d108      	bne.n	80032a2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003290:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003294:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032a0:	e00a      	b.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2200      	movs	r2, #0
 80032b6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d165      	bne.n	800338c <HAL_PCD_EP_DB_Transmit+0x382>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d4:	4413      	add	r3, r2
 80032d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	011a      	lsls	r2, r3, #4
 80032de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e0:	4413      	add	r3, r2
 80032e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f6:	801a      	strh	r2, [r3, #0]
 80032f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032fc:	2b3e      	cmp	r3, #62	; 0x3e
 80032fe:	d91d      	bls.n	800333c <HAL_PCD_EP_DB_Transmit+0x332>
 8003300:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	64bb      	str	r3, [r7, #72]	; 0x48
 8003308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <HAL_PCD_EP_DB_Transmit+0x310>
 8003314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003316:	3b01      	subs	r3, #1
 8003318:	64bb      	str	r3, [r7, #72]	; 0x48
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	b29a      	uxth	r2, r3
 8003320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003322:	b29b      	uxth	r3, r3
 8003324:	029b      	lsls	r3, r3, #10
 8003326:	b29b      	uxth	r3, r3
 8003328:	4313      	orrs	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003334:	b29a      	uxth	r2, r3
 8003336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003338:	801a      	strh	r2, [r3, #0]
 800333a:	e044      	b.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800333c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <HAL_PCD_EP_DB_Transmit+0x350>
 8003344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800334e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003352:	b29a      	uxth	r2, r3
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	801a      	strh	r2, [r3, #0]
 8003358:	e035      	b.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800335a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800335e:	085b      	lsrs	r3, r3, #1
 8003360:	64bb      	str	r3, [r7, #72]	; 0x48
 8003362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_PCD_EP_DB_Transmit+0x36a>
 800336e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003370:	3301      	adds	r3, #1
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b29a      	uxth	r2, r3
 800337a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337c:	b29b      	uxth	r3, r3
 800337e:	029b      	lsls	r3, r3, #10
 8003380:	b29b      	uxth	r3, r3
 8003382:	4313      	orrs	r3, r2
 8003384:	b29a      	uxth	r2, r3
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	801a      	strh	r2, [r3, #0]
 800338a:	e01c      	b.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	785b      	ldrb	r3, [r3, #1]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d118      	bne.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	647b      	str	r3, [r7, #68]	; 0x44
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a8:	4413      	add	r3, r2
 80033aa:	647b      	str	r3, [r7, #68]	; 0x44
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	011a      	lsls	r2, r3, #4
 80033b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b4:	4413      	add	r3, r2
 80033b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033ba:	643b      	str	r3, [r7, #64]	; 0x40
 80033bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	6959      	ldr	r1, [r3, #20]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	891a      	ldrh	r2, [r3, #8]
 80033d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f004 f90e 	bl	80075f8 <USB_WritePMA>
 80033dc:	e1e2      	b.n	80037a4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	3306      	adds	r3, #6
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003406:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003412:	429a      	cmp	r2, r3
 8003414:	d307      	bcc.n	8003426 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	699a      	ldr	r2, [r3, #24]
 800341a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800341e:	1ad2      	subs	r2, r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	619a      	str	r2, [r3, #24]
 8003424:	e002      	b.n	800342c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 80c0 	bne.w	80035b6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	785b      	ldrb	r3, [r3, #1]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d126      	bne.n	800348c <HAL_PCD_EP_DB_Transmit+0x482>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800344c:	b29b      	uxth	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003452:	4413      	add	r3, r2
 8003454:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	011a      	lsls	r2, r3, #4
 800345c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800345e:	4413      	add	r3, r2
 8003460:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003464:	67bb      	str	r3, [r7, #120]	; 0x78
 8003466:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003470:	b29a      	uxth	r2, r3
 8003472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003474:	801a      	strh	r2, [r3, #0]
 8003476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003484:	b29a      	uxth	r2, r3
 8003486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003488:	801a      	strh	r2, [r3, #0]
 800348a:	e01a      	b.n	80034c2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	785b      	ldrb	r3, [r3, #1]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d116      	bne.n	80034c2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	667b      	str	r3, [r7, #100]	; 0x64
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034a8:	4413      	add	r3, r2
 80034aa:	667b      	str	r3, [r7, #100]	; 0x64
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	011a      	lsls	r2, r3, #4
 80034b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034b4:	4413      	add	r3, r2
 80034b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034ba:	663b      	str	r3, [r7, #96]	; 0x60
 80034bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034be:	2200      	movs	r2, #0
 80034c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	677b      	str	r3, [r7, #116]	; 0x74
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	785b      	ldrb	r3, [r3, #1]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d12b      	bne.n	8003528 <HAL_PCD_EP_DB_Transmit+0x51e>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034de:	b29b      	uxth	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e4:	4413      	add	r3, r2
 80034e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	011a      	lsls	r2, r3, #4
 80034ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f0:	4413      	add	r3, r2
 80034f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003506:	b29a      	uxth	r2, r3
 8003508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800350c:	801a      	strh	r2, [r3, #0]
 800350e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800351a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800351e:	b29a      	uxth	r2, r3
 8003520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003524:	801a      	strh	r2, [r3, #0]
 8003526:	e017      	b.n	8003558 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	785b      	ldrb	r3, [r3, #1]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d113      	bne.n	8003558 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003538:	b29b      	uxth	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353e:	4413      	add	r3, r2
 8003540:	677b      	str	r3, [r7, #116]	; 0x74
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	011a      	lsls	r2, r3, #4
 8003548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800354a:	4413      	add	r3, r2
 800354c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003550:	673b      	str	r3, [r7, #112]	; 0x70
 8003552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003554:	2200      	movs	r2, #0
 8003556:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	4619      	mov	r1, r3
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f005 fec7 	bl	80092f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356a:	2b00      	cmp	r3, #0
 800356c:	f040 811a 	bne.w	80037a4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	b29b      	uxth	r3, r3
 8003582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	441a      	add	r2, r3
 800359c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80035a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	8013      	strh	r3, [r2, #0]
 80035b4:	e0f6      	b.n	80037a4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d121      	bne.n	8003604 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	441a      	add	r2, r3
 80035ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003600:	b29b      	uxth	r3, r3
 8003602:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800360a:	2b01      	cmp	r3, #1
 800360c:	f040 80ca 	bne.w	80037a4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003618:	441a      	add	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	69da      	ldr	r2, [r3, #28]
 8003622:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003626:	441a      	add	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	6a1a      	ldr	r2, [r3, #32]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	429a      	cmp	r2, r3
 8003636:	d30b      	bcc.n	8003650 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	6a1a      	ldr	r2, [r3, #32]
 8003644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003648:	1ad2      	subs	r2, r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	621a      	str	r2, [r3, #32]
 800364e:	e017      	b.n	8003680 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d108      	bne.n	800366a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003658:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800365c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003668:	e00a      	b.n	8003680 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2200      	movs	r2, #0
 8003676:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	657b      	str	r3, [r7, #84]	; 0x54
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	785b      	ldrb	r3, [r3, #1]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d165      	bne.n	800375a <HAL_PCD_EP_DB_Transmit+0x750>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369c:	b29b      	uxth	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a2:	4413      	add	r3, r2
 80036a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	011a      	lsls	r2, r3, #4
 80036ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ae:	4413      	add	r3, r2
 80036b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80036b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ca:	2b3e      	cmp	r3, #62	; 0x3e
 80036cc:	d91d      	bls.n	800370a <HAL_PCD_EP_DB_Transmit+0x700>
 80036ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80036d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <HAL_PCD_EP_DB_Transmit+0x6de>
 80036e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036e4:	3b01      	subs	r3, #1
 80036e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80036e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	029b      	lsls	r3, r3, #10
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	4313      	orrs	r3, r2
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003702:	b29a      	uxth	r2, r3
 8003704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	e041      	b.n	800378e <HAL_PCD_EP_DB_Transmit+0x784>
 800370a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800371c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003720:	b29a      	uxth	r2, r3
 8003722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003724:	801a      	strh	r2, [r3, #0]
 8003726:	e032      	b.n	800378e <HAL_PCD_EP_DB_Transmit+0x784>
 8003728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_PCD_EP_DB_Transmit+0x738>
 800373c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800373e:	3301      	adds	r3, #1
 8003740:	66bb      	str	r3, [r7, #104]	; 0x68
 8003742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29a      	uxth	r2, r3
 8003748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800374a:	b29b      	uxth	r3, r3
 800374c:	029b      	lsls	r3, r3, #10
 800374e:	b29b      	uxth	r3, r3
 8003750:	4313      	orrs	r3, r2
 8003752:	b29a      	uxth	r2, r3
 8003754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003756:	801a      	strh	r2, [r3, #0]
 8003758:	e019      	b.n	800378e <HAL_PCD_EP_DB_Transmit+0x784>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d115      	bne.n	800378e <HAL_PCD_EP_DB_Transmit+0x784>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800376a:	b29b      	uxth	r3, r3
 800376c:	461a      	mov	r2, r3
 800376e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003770:	4413      	add	r3, r2
 8003772:	657b      	str	r3, [r7, #84]	; 0x54
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	011a      	lsls	r2, r3, #4
 800377a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377c:	4413      	add	r3, r2
 800377e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003782:	653b      	str	r3, [r7, #80]	; 0x50
 8003784:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003788:	b29a      	uxth	r2, r3
 800378a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	6959      	ldr	r1, [r3, #20]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	895a      	ldrh	r2, [r3, #10]
 800379a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f003 ff2a 	bl	80075f8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037be:	82bb      	strh	r3, [r7, #20]
 80037c0:	8abb      	ldrh	r3, [r7, #20]
 80037c2:	f083 0310 	eor.w	r3, r3, #16
 80037c6:	82bb      	strh	r3, [r7, #20]
 80037c8:	8abb      	ldrh	r3, [r7, #20]
 80037ca:	f083 0320 	eor.w	r3, r3, #32
 80037ce:	82bb      	strh	r3, [r7, #20]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	441a      	add	r2, r3
 80037de:	8abb      	ldrh	r3, [r7, #20]
 80037e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3790      	adds	r7, #144	; 0x90
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80037fe:	b480      	push	{r7}
 8003800:	b087      	sub	sp, #28
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	817b      	strh	r3, [r7, #10]
 800380c:	4613      	mov	r3, r2
 800380e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003810:	897b      	ldrh	r3, [r7, #10]
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800381c:	897b      	ldrh	r3, [r7, #10]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	e009      	b.n	8003848 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003834:	897a      	ldrh	r2, [r7, #10]
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4413      	add	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003848:	893b      	ldrh	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d107      	bne.n	800385e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2200      	movs	r2, #0
 8003852:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	b29a      	uxth	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	80da      	strh	r2, [r3, #6]
 800385c:	e00b      	b.n	8003876 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2201      	movs	r2, #1
 8003862:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	b29a      	uxth	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	0c1b      	lsrs	r3, r3, #16
 8003870:	b29a      	uxth	r2, r3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800388a:	af00      	add	r7, sp, #0
 800388c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003890:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003894:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f001 b823 	b.w	80048f0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 817d 	beq.w	8003bba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038c0:	4bbc      	ldr	r3, [pc, #752]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d00c      	beq.n	80038e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038cc:	4bb9      	ldr	r3, [pc, #740]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d15c      	bne.n	8003992 <HAL_RCC_OscConfig+0x10e>
 80038d8:	4bb6      	ldr	r3, [pc, #728]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e4:	d155      	bne.n	8003992 <HAL_RCC_OscConfig+0x10e>
 80038e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d102      	bne.n	8003918 <HAL_RCC_OscConfig+0x94>
 8003912:	4ba8      	ldr	r3, [pc, #672]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	e015      	b.n	8003944 <HAL_RCC_OscConfig+0xc0>
 8003918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800391c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800392c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003930:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003934:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003938:	fa93 f3a3 	rbit	r3, r3
 800393c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003940:	4b9c      	ldr	r3, [pc, #624]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003948:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800394c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003950:	fa92 f2a2 	rbit	r2, r2
 8003954:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003958:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800395c:	fab2 f282 	clz	r2, r2
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	f042 0220 	orr.w	r2, r2, #32
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	f002 021f 	and.w	r2, r2, #31
 800396c:	2101      	movs	r1, #1
 800396e:	fa01 f202 	lsl.w	r2, r1, r2
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 811f 	beq.w	8003bb8 <HAL_RCC_OscConfig+0x334>
 800397a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 8116 	bne.w	8003bb8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f000 bfaf 	b.w	80048f0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003996:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a2:	d106      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12e>
 80039a4:	4b83      	ldr	r3, [pc, #524]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a82      	ldr	r2, [pc, #520]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	e036      	b.n	8003a20 <HAL_RCC_OscConfig+0x19c>
 80039b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x158>
 80039c2:	4b7c      	ldr	r3, [pc, #496]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a7b      	ldr	r2, [pc, #492]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 80039c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b79      	ldr	r3, [pc, #484]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a78      	ldr	r2, [pc, #480]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 80039d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e021      	b.n	8003a20 <HAL_RCC_OscConfig+0x19c>
 80039dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x184>
 80039ee:	4b71      	ldr	r3, [pc, #452]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a70      	ldr	r2, [pc, #448]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 80039f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b6e      	ldr	r3, [pc, #440]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a6d      	ldr	r2, [pc, #436]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0x19c>
 8003a08:	4b6a      	ldr	r3, [pc, #424]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a69      	ldr	r2, [pc, #420]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 8003a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b67      	ldr	r3, [pc, #412]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a66      	ldr	r2, [pc, #408]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 8003a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a20:	4b64      	ldr	r3, [pc, #400]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	f023 020f 	bic.w	r2, r3, #15
 8003a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	495f      	ldr	r1, [pc, #380]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d059      	beq.n	8003afe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4a:	f7fd f961 	bl	8000d10 <HAL_GetTick>
 8003a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fd f95c 	bl	8000d10 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b64      	cmp	r3, #100	; 0x64
 8003a62:	d902      	bls.n	8003a6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	f000 bf43 	b.w	80048f0 <HAL_RCC_OscConfig+0x106c>
 8003a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003a7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d102      	bne.n	8003a9c <HAL_RCC_OscConfig+0x218>
 8003a96:	4b47      	ldr	r3, [pc, #284]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	e015      	b.n	8003ac8 <HAL_RCC_OscConfig+0x244>
 8003a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aa0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ab4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003ab8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003ac4:	4b3b      	ldr	r3, [pc, #236]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003acc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003ad0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003ad4:	fa92 f2a2 	rbit	r2, r2
 8003ad8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003adc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003ae0:	fab2 f282 	clz	r2, r2
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	f042 0220 	orr.w	r2, r2, #32
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	f002 021f 	and.w	r2, r2, #31
 8003af0:	2101      	movs	r1, #1
 8003af2:	fa01 f202 	lsl.w	r2, r1, r2
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ab      	beq.n	8003a54 <HAL_RCC_OscConfig+0x1d0>
 8003afc:	e05d      	b.n	8003bba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fd f907 	bl	8000d10 <HAL_GetTick>
 8003b02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b08:	f7fd f902 	bl	8000d10 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b64      	cmp	r3, #100	; 0x64
 8003b16:	d902      	bls.n	8003b1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	f000 bee9 	b.w	80048f0 <HAL_RCC_OscConfig+0x106c>
 8003b1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b22:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003b2a:	fa93 f3a3 	rbit	r3, r3
 8003b2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003b32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b36:	fab3 f383 	clz	r3, r3
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	095b      	lsrs	r3, r3, #5
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d102      	bne.n	8003b50 <HAL_RCC_OscConfig+0x2cc>
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	e015      	b.n	8003b7c <HAL_RCC_OscConfig+0x2f8>
 8003b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b5c:	fa93 f3a3 	rbit	r3, r3
 8003b60:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003b6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003b78:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <HAL_RCC_OscConfig+0x330>)
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b80:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003b84:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003b88:	fa92 f2a2 	rbit	r2, r2
 8003b8c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003b90:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003b94:	fab2 f282 	clz	r2, r2
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	f042 0220 	orr.w	r2, r2, #32
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	f002 021f 	and.w	r2, r2, #31
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ab      	bne.n	8003b08 <HAL_RCC_OscConfig+0x284>
 8003bb0:	e003      	b.n	8003bba <HAL_RCC_OscConfig+0x336>
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 817d 	beq.w	8003eca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bd0:	4ba6      	ldr	r3, [pc, #664]	; (8003e6c <HAL_RCC_OscConfig+0x5e8>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00b      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bdc:	4ba3      	ldr	r3, [pc, #652]	; (8003e6c <HAL_RCC_OscConfig+0x5e8>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d172      	bne.n	8003cce <HAL_RCC_OscConfig+0x44a>
 8003be8:	4ba0      	ldr	r3, [pc, #640]	; (8003e6c <HAL_RCC_OscConfig+0x5e8>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d16c      	bne.n	8003cce <HAL_RCC_OscConfig+0x44a>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003c06:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	fab3 f383 	clz	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d102      	bne.n	8003c24 <HAL_RCC_OscConfig+0x3a0>
 8003c1e:	4b93      	ldr	r3, [pc, #588]	; (8003e6c <HAL_RCC_OscConfig+0x5e8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	e013      	b.n	8003c4c <HAL_RCC_OscConfig+0x3c8>
 8003c24:	2302      	movs	r3, #2
 8003c26:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003c36:	2302      	movs	r3, #2
 8003c38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003c3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003c48:	4b88      	ldr	r3, [pc, #544]	; (8003e6c <HAL_RCC_OscConfig+0x5e8>)
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003c52:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003c56:	fa92 f2a2 	rbit	r2, r2
 8003c5a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003c5e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003c62:	fab2 f282 	clz	r2, r2
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	f042 0220 	orr.w	r2, r2, #32
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	f002 021f 	and.w	r2, r2, #31
 8003c72:	2101      	movs	r1, #1
 8003c74:	fa01 f202 	lsl.w	r2, r1, r2
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCC_OscConfig+0x410>
 8003c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d002      	beq.n	8003c94 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f000 be2e 	b.w	80048f0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c94:	4b75      	ldr	r3, [pc, #468]	; (8003e6c <HAL_RCC_OscConfig+0x5e8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	21f8      	movs	r1, #248	; 0xf8
 8003caa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003cb2:	fa91 f1a1 	rbit	r1, r1
 8003cb6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003cba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003cbe:	fab1 f181 	clz	r1, r1
 8003cc2:	b2c9      	uxtb	r1, r1
 8003cc4:	408b      	lsls	r3, r1
 8003cc6:	4969      	ldr	r1, [pc, #420]	; (8003e6c <HAL_RCC_OscConfig+0x5e8>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ccc:	e0fd      	b.n	8003eca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8088 	beq.w	8003df0 <HAL_RCC_OscConfig+0x56c>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003cf2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	461a      	mov	r2, r3
 8003d08:	2301      	movs	r3, #1
 8003d0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd f800 	bl	8000d10 <HAL_GetTick>
 8003d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	e00a      	b.n	8003d2c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d16:	f7fc fffb 	bl	8000d10 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d902      	bls.n	8003d2c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	f000 bde2 	b.w	80048f0 <HAL_RCC_OscConfig+0x106c>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003d36:	fa93 f3a3 	rbit	r3, r3
 8003d3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003d3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d102      	bne.n	8003d5c <HAL_RCC_OscConfig+0x4d8>
 8003d56:	4b45      	ldr	r3, [pc, #276]	; (8003e6c <HAL_RCC_OscConfig+0x5e8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	e013      	b.n	8003d84 <HAL_RCC_OscConfig+0x500>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003d6e:	2302      	movs	r3, #2
 8003d70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003d74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003d78:	fa93 f3a3 	rbit	r3, r3
 8003d7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003d80:	4b3a      	ldr	r3, [pc, #232]	; (8003e6c <HAL_RCC_OscConfig+0x5e8>)
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	2202      	movs	r2, #2
 8003d86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003d8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003d8e:	fa92 f2a2 	rbit	r2, r2
 8003d92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003d96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003d9a:	fab2 f282 	clz	r2, r2
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	f042 0220 	orr.w	r2, r2, #32
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	f002 021f 	and.w	r2, r2, #31
 8003daa:	2101      	movs	r1, #1
 8003dac:	fa01 f202 	lsl.w	r2, r1, r2
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0af      	beq.n	8003d16 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db6:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <HAL_RCC_OscConfig+0x5e8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	21f8      	movs	r1, #248	; 0xf8
 8003dcc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003dd4:	fa91 f1a1 	rbit	r1, r1
 8003dd8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003ddc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003de0:	fab1 f181 	clz	r1, r1
 8003de4:	b2c9      	uxtb	r1, r1
 8003de6:	408b      	lsls	r3, r1
 8003de8:	4920      	ldr	r1, [pc, #128]	; (8003e6c <HAL_RCC_OscConfig+0x5e8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]
 8003dee:	e06c      	b.n	8003eca <HAL_RCC_OscConfig+0x646>
 8003df0:	2301      	movs	r3, #1
 8003df2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003dfa:	fa93 f3a3 	rbit	r3, r3
 8003dfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003e02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e06:	fab3 f383 	clz	r3, r3
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	461a      	mov	r2, r3
 8003e18:	2300      	movs	r3, #0
 8003e1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7fc ff78 	bl	8000d10 <HAL_GetTick>
 8003e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e24:	e00a      	b.n	8003e3c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e26:	f7fc ff73 	bl	8000d10 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d902      	bls.n	8003e3c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	f000 bd5a 	b.w	80048f0 <HAL_RCC_OscConfig+0x106c>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e46:	fa93 f3a3 	rbit	r3, r3
 8003e4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d104      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5ec>
 8003e66:	4b01      	ldr	r3, [pc, #4]	; (8003e6c <HAL_RCC_OscConfig+0x5e8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	e015      	b.n	8003e98 <HAL_RCC_OscConfig+0x614>
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	2302      	movs	r3, #2
 8003e72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e7a:	fa93 f3a3 	rbit	r3, r3
 8003e7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e82:	2302      	movs	r3, #2
 8003e84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e8c:	fa93 f3a3 	rbit	r3, r3
 8003e90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003e94:	4bc8      	ldr	r3, [pc, #800]	; (80041b8 <HAL_RCC_OscConfig+0x934>)
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003e9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ea2:	fa92 f2a2 	rbit	r2, r2
 8003ea6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003eaa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003eae:	fab2 f282 	clz	r2, r2
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	f042 0220 	orr.w	r2, r2, #32
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	f002 021f 	and.w	r2, r2, #31
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1ad      	bne.n	8003e26 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8110 	beq.w	8004100 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d079      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x760>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f06:	fab3 f383 	clz	r3, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4bab      	ldr	r3, [pc, #684]	; (80041bc <HAL_RCC_OscConfig+0x938>)
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	461a      	mov	r2, r3
 8003f16:	2301      	movs	r3, #1
 8003f18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1a:	f7fc fef9 	bl	8000d10 <HAL_GetTick>
 8003f1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f24:	f7fc fef4 	bl	8000d10 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d902      	bls.n	8003f3a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	f000 bcdb 	b.w	80048f0 <HAL_RCC_OscConfig+0x106c>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f54:	2202      	movs	r2, #2
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	fa93 f2a3 	rbit	r2, r3
 8003f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f78:	2202      	movs	r2, #2
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	fa93 f2a3 	rbit	r2, r3
 8003f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f94:	4b88      	ldr	r3, [pc, #544]	; (80041b8 <HAL_RCC_OscConfig+0x934>)
 8003f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	6019      	str	r1, [r3, #0]
 8003fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	fa93 f1a3 	rbit	r1, r3
 8003fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003fba:	6019      	str	r1, [r3, #0]
  return result;
 8003fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	fab3 f383 	clz	r3, r3
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0a0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x6a0>
 8003fe2:	e08d      	b.n	8004100 <HAL_RCC_OscConfig+0x87c>
 8003fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	fa93 f2a3 	rbit	r2, r3
 8003ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004002:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004006:	601a      	str	r2, [r3, #0]
  return result;
 8004008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004010:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	4b68      	ldr	r3, [pc, #416]	; (80041bc <HAL_RCC_OscConfig+0x938>)
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	461a      	mov	r2, r3
 8004022:	2300      	movs	r3, #0
 8004024:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004026:	f7fc fe73 	bl	8000d10 <HAL_GetTick>
 800402a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402e:	e00a      	b.n	8004046 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004030:	f7fc fe6e 	bl	8000d10 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d902      	bls.n	8004046 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	f000 bc55 	b.w	80048f0 <HAL_RCC_OscConfig+0x106c>
 8004046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800404e:	2202      	movs	r2, #2
 8004050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004056:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	fa93 f2a3 	rbit	r2, r3
 8004060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004064:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004072:	2202      	movs	r2, #2
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	fa93 f2a3 	rbit	r2, r3
 8004084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004096:	2202      	movs	r2, #2
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	fa93 f2a3 	rbit	r2, r3
 80040a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80040b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b2:	4b41      	ldr	r3, [pc, #260]	; (80041b8 <HAL_RCC_OscConfig+0x934>)
 80040b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80040be:	2102      	movs	r1, #2
 80040c0:	6019      	str	r1, [r3, #0]
 80040c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	fa93 f1a3 	rbit	r1, r3
 80040d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80040d8:	6019      	str	r1, [r3, #0]
  return result;
 80040da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	2101      	movs	r1, #1
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d197      	bne.n	8004030 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004104:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 81a1 	beq.w	8004458 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411c:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <HAL_RCC_OscConfig+0x934>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d116      	bne.n	8004156 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004128:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <HAL_RCC_OscConfig+0x934>)
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <HAL_RCC_OscConfig+0x934>)
 800412e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004132:	61d3      	str	r3, [r2, #28]
 8004134:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <HAL_RCC_OscConfig+0x934>)
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800413c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004140:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800414e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004150:	2301      	movs	r3, #1
 8004152:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004156:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <HAL_RCC_OscConfig+0x93c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11a      	bne.n	8004198 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004162:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <HAL_RCC_OscConfig+0x93c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a16      	ldr	r2, [pc, #88]	; (80041c0 <HAL_RCC_OscConfig+0x93c>)
 8004168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416e:	f7fc fdcf 	bl	8000d10 <HAL_GetTick>
 8004172:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004176:	e009      	b.n	800418c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004178:	f7fc fdca 	bl	8000d10 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b64      	cmp	r3, #100	; 0x64
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e3b1      	b.n	80048f0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <HAL_RCC_OscConfig+0x93c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ef      	beq.n	8004178 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10d      	bne.n	80041c4 <HAL_RCC_OscConfig+0x940>
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <HAL_RCC_OscConfig+0x934>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4a02      	ldr	r2, [pc, #8]	; (80041b8 <HAL_RCC_OscConfig+0x934>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6213      	str	r3, [r2, #32]
 80041b4:	e03c      	b.n	8004230 <HAL_RCC_OscConfig+0x9ac>
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000
 80041bc:	10908120 	.word	0x10908120
 80041c0:	40007000 	.word	0x40007000
 80041c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10c      	bne.n	80041ee <HAL_RCC_OscConfig+0x96a>
 80041d4:	4bc1      	ldr	r3, [pc, #772]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	4ac0      	ldr	r2, [pc, #768]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	6213      	str	r3, [r2, #32]
 80041e0:	4bbe      	ldr	r3, [pc, #760]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	4abd      	ldr	r2, [pc, #756]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 80041e6:	f023 0304 	bic.w	r3, r3, #4
 80041ea:	6213      	str	r3, [r2, #32]
 80041ec:	e020      	b.n	8004230 <HAL_RCC_OscConfig+0x9ac>
 80041ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b05      	cmp	r3, #5
 80041fc:	d10c      	bne.n	8004218 <HAL_RCC_OscConfig+0x994>
 80041fe:	4bb7      	ldr	r3, [pc, #732]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4ab6      	ldr	r2, [pc, #728]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 8004204:	f043 0304 	orr.w	r3, r3, #4
 8004208:	6213      	str	r3, [r2, #32]
 800420a:	4bb4      	ldr	r3, [pc, #720]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	4ab3      	ldr	r2, [pc, #716]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	6213      	str	r3, [r2, #32]
 8004216:	e00b      	b.n	8004230 <HAL_RCC_OscConfig+0x9ac>
 8004218:	4bb0      	ldr	r3, [pc, #704]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	4aaf      	ldr	r2, [pc, #700]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	6213      	str	r3, [r2, #32]
 8004224:	4bad      	ldr	r3, [pc, #692]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	4aac      	ldr	r2, [pc, #688]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 800422a:	f023 0304 	bic.w	r3, r3, #4
 800422e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004234:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8081 	beq.w	8004344 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004242:	f7fc fd65 	bl	8000d10 <HAL_GetTick>
 8004246:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424c:	f7fc fd60 	bl	8000d10 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e345      	b.n	80048f0 <HAL_RCC_OscConfig+0x106c>
 8004264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004268:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800426c:	2202      	movs	r2, #2
 800426e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004274:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	fa93 f2a3 	rbit	r2, r3
 800427e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004282:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004290:	2202      	movs	r2, #2
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004298:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	fa93 f2a3 	rbit	r2, r3
 80042a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042aa:	601a      	str	r2, [r3, #0]
  return result;
 80042ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f043 0302 	orr.w	r3, r3, #2
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d102      	bne.n	80042d0 <HAL_RCC_OscConfig+0xa4c>
 80042ca:	4b84      	ldr	r3, [pc, #528]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	e013      	b.n	80042f8 <HAL_RCC_OscConfig+0xa74>
 80042d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80042d8:	2202      	movs	r2, #2
 80042da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	fa93 f2a3 	rbit	r2, r3
 80042ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	4b79      	ldr	r3, [pc, #484]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004300:	2102      	movs	r1, #2
 8004302:	6011      	str	r1, [r2, #0]
 8004304:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004308:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	fa92 f1a2 	rbit	r1, r2
 8004312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004316:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800431a:	6011      	str	r1, [r2, #0]
  return result;
 800431c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004320:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	fab2 f282 	clz	r2, r2
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	f002 021f 	and.w	r2, r2, #31
 8004336:	2101      	movs	r1, #1
 8004338:	fa01 f202 	lsl.w	r2, r1, r2
 800433c:	4013      	ands	r3, r2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d084      	beq.n	800424c <HAL_RCC_OscConfig+0x9c8>
 8004342:	e07f      	b.n	8004444 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004344:	f7fc fce4 	bl	8000d10 <HAL_GetTick>
 8004348:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434c:	e00b      	b.n	8004366 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800434e:	f7fc fcdf 	bl	8000d10 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f241 3288 	movw	r2, #5000	; 0x1388
 800435e:	4293      	cmp	r3, r2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e2c4      	b.n	80048f0 <HAL_RCC_OscConfig+0x106c>
 8004366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800436e:	2202      	movs	r2, #2
 8004370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004376:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	fa93 f2a3 	rbit	r2, r3
 8004380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004384:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004392:	2202      	movs	r2, #2
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	fa93 f2a3 	rbit	r2, r3
 80043a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80043ac:	601a      	str	r2, [r3, #0]
  return result;
 80043ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80043b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b8:	fab3 f383 	clz	r3, r3
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f043 0302 	orr.w	r3, r3, #2
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d102      	bne.n	80043d2 <HAL_RCC_OscConfig+0xb4e>
 80043cc:	4b43      	ldr	r3, [pc, #268]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	e013      	b.n	80043fa <HAL_RCC_OscConfig+0xb76>
 80043d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80043da:	2202      	movs	r2, #2
 80043dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	fa93 f2a3 	rbit	r2, r3
 80043ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	4b39      	ldr	r3, [pc, #228]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004402:	2102      	movs	r1, #2
 8004404:	6011      	str	r1, [r2, #0]
 8004406:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800440a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	fa92 f1a2 	rbit	r1, r2
 8004414:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004418:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800441c:	6011      	str	r1, [r2, #0]
  return result;
 800441e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004422:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	fab2 f282 	clz	r2, r2
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	f002 021f 	and.w	r2, r2, #31
 8004438:	2101      	movs	r1, #1
 800443a:	fa01 f202 	lsl.w	r2, r1, r2
 800443e:	4013      	ands	r3, r2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d184      	bne.n	800434e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004444:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004448:	2b01      	cmp	r3, #1
 800444a:	d105      	bne.n	8004458 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444c:	4b23      	ldr	r3, [pc, #140]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	4a22      	ldr	r2, [pc, #136]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 8004452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004456:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8242 	beq.w	80048ee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800446a:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <HAL_RCC_OscConfig+0xc58>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b08      	cmp	r3, #8
 8004474:	f000 8213 	beq.w	800489e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	2b02      	cmp	r3, #2
 8004486:	f040 8162 	bne.w	800474e <HAL_RCC_OscConfig+0xeca>
 800448a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004492:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	fa93 f2a3 	rbit	r2, r3
 80044a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80044ae:	601a      	str	r2, [r3, #0]
  return result;
 80044b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80044b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	fab3 f383 	clz	r3, r3
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	461a      	mov	r2, r3
 80044cc:	2300      	movs	r3, #0
 80044ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fc fc1e 	bl	8000d10 <HAL_GetTick>
 80044d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d8:	e00c      	b.n	80044f4 <HAL_RCC_OscConfig+0xc70>
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fc fc16 	bl	8000d10 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e1fd      	b.n	80048f0 <HAL_RCC_OscConfig+0x106c>
 80044f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80044fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004506:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	fa93 f2a3 	rbit	r2, r3
 8004510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004514:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004518:	601a      	str	r2, [r3, #0]
  return result;
 800451a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800451e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004522:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004524:	fab3 f383 	clz	r3, r3
 8004528:	b2db      	uxtb	r3, r3
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d102      	bne.n	800453e <HAL_RCC_OscConfig+0xcba>
 8004538:	4bb0      	ldr	r3, [pc, #704]	; (80047fc <HAL_RCC_OscConfig+0xf78>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	e027      	b.n	800458e <HAL_RCC_OscConfig+0xd0a>
 800453e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004542:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800454a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004550:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	fa93 f2a3 	rbit	r2, r3
 800455a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800455e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004568:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800456c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004576:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	fa93 f2a3 	rbit	r2, r3
 8004580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004584:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	4b9c      	ldr	r3, [pc, #624]	; (80047fc <HAL_RCC_OscConfig+0xf78>)
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004592:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004596:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800459a:	6011      	str	r1, [r2, #0]
 800459c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045a0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	fa92 f1a2 	rbit	r1, r2
 80045aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80045b2:	6011      	str	r1, [r2, #0]
  return result;
 80045b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	fab2 f282 	clz	r2, r2
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	f042 0220 	orr.w	r2, r2, #32
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	f002 021f 	and.w	r2, r2, #31
 80045ce:	2101      	movs	r1, #1
 80045d0:	fa01 f202 	lsl.w	r2, r1, r2
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d182      	bne.n	80044e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045da:	4b88      	ldr	r3, [pc, #544]	; (80047fc <HAL_RCC_OscConfig+0xf78>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	430b      	orrs	r3, r1
 80045fc:	497f      	ldr	r1, [pc, #508]	; (80047fc <HAL_RCC_OscConfig+0xf78>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	604b      	str	r3, [r1, #4]
 8004602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004606:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800460a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800460e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004614:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	fa93 f2a3 	rbit	r2, r3
 800461e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004622:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004626:	601a      	str	r2, [r3, #0]
  return result;
 8004628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004630:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800463c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	461a      	mov	r2, r3
 8004644:	2301      	movs	r3, #1
 8004646:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fc fb62 	bl	8000d10 <HAL_GetTick>
 800464c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004650:	e009      	b.n	8004666 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004652:	f7fc fb5d 	bl	8000d10 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e144      	b.n	80048f0 <HAL_RCC_OscConfig+0x106c>
 8004666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800466e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004672:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004678:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	fa93 f2a3 	rbit	r2, r3
 8004682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004686:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800468a:	601a      	str	r2, [r3, #0]
  return result;
 800468c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004690:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004694:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	b2db      	uxtb	r3, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d102      	bne.n	80046b0 <HAL_RCC_OscConfig+0xe2c>
 80046aa:	4b54      	ldr	r3, [pc, #336]	; (80047fc <HAL_RCC_OscConfig+0xf78>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	e027      	b.n	8004700 <HAL_RCC_OscConfig+0xe7c>
 80046b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80046b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	fa93 f2a3 	rbit	r2, r3
 80046cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046da:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80046de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	fa93 f2a3 	rbit	r2, r3
 80046f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	4b3f      	ldr	r3, [pc, #252]	; (80047fc <HAL_RCC_OscConfig+0xf78>)
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004704:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004708:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800470c:	6011      	str	r1, [r2, #0]
 800470e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004712:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	fa92 f1a2 	rbit	r1, r2
 800471c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004720:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004724:	6011      	str	r1, [r2, #0]
  return result;
 8004726:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800472a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800472e:	6812      	ldr	r2, [r2, #0]
 8004730:	fab2 f282 	clz	r2, r2
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	f042 0220 	orr.w	r2, r2, #32
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	f002 021f 	and.w	r2, r2, #31
 8004740:	2101      	movs	r1, #1
 8004742:	fa01 f202 	lsl.w	r2, r1, r2
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d082      	beq.n	8004652 <HAL_RCC_OscConfig+0xdce>
 800474c:	e0cf      	b.n	80048ee <HAL_RCC_OscConfig+0x106a>
 800474e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004752:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004756:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800475a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004760:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	fa93 f2a3 	rbit	r2, r3
 800476a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004772:	601a      	str	r2, [r3, #0]
  return result;
 8004774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004778:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800477c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	461a      	mov	r2, r3
 8004790:	2300      	movs	r3, #0
 8004792:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fc fabc 	bl	8000d10 <HAL_GetTick>
 8004798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800479c:	e009      	b.n	80047b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479e:	f7fc fab7 	bl	8000d10 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e09e      	b.n	80048f0 <HAL_RCC_OscConfig+0x106c>
 80047b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80047ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	fa93 f2a3 	rbit	r2, r3
 80047ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80047d6:	601a      	str	r2, [r3, #0]
  return result;
 80047d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80047e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e2:	fab3 f383 	clz	r3, r3
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d104      	bne.n	8004800 <HAL_RCC_OscConfig+0xf7c>
 80047f6:	4b01      	ldr	r3, [pc, #4]	; (80047fc <HAL_RCC_OscConfig+0xf78>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	e029      	b.n	8004850 <HAL_RCC_OscConfig+0xfcc>
 80047fc:	40021000 	.word	0x40021000
 8004800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004804:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800480c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004812:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	fa93 f2a3 	rbit	r2, r3
 800481c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004820:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800482e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004838:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	fa93 f2a3 	rbit	r2, r3
 8004842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004846:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <HAL_RCC_OscConfig+0x1078>)
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004854:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004858:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800485c:	6011      	str	r1, [r2, #0]
 800485e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004862:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	fa92 f1a2 	rbit	r1, r2
 800486c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004870:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004874:	6011      	str	r1, [r2, #0]
  return result;
 8004876:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800487a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	fab2 f282 	clz	r2, r2
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	f042 0220 	orr.w	r2, r2, #32
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	f002 021f 	and.w	r2, r2, #31
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f202 	lsl.w	r2, r1, r2
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d180      	bne.n	800479e <HAL_RCC_OscConfig+0xf1a>
 800489c:	e027      	b.n	80048ee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800489e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e01e      	b.n	80048f0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <HAL_RCC_OscConfig+0x1078>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d10b      	bne.n	80048ea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80048d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d001      	beq.n	80048ee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000

08004900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b09e      	sub	sp, #120	; 0x78
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e162      	b.n	8004bde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004918:	4b90      	ldr	r3, [pc, #576]	; (8004b5c <HAL_RCC_ClockConfig+0x25c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d910      	bls.n	8004948 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b8d      	ldr	r3, [pc, #564]	; (8004b5c <HAL_RCC_ClockConfig+0x25c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 0207 	bic.w	r2, r3, #7
 800492e:	498b      	ldr	r1, [pc, #556]	; (8004b5c <HAL_RCC_ClockConfig+0x25c>)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b89      	ldr	r3, [pc, #548]	; (8004b5c <HAL_RCC_ClockConfig+0x25c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e14a      	b.n	8004bde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004954:	4b82      	ldr	r3, [pc, #520]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	497f      	ldr	r1, [pc, #508]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004962:	4313      	orrs	r3, r2
 8004964:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 80dc 	beq.w	8004b2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d13c      	bne.n	80049f6 <HAL_RCC_ClockConfig+0xf6>
 800497c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004980:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004984:	fa93 f3a3 	rbit	r3, r3
 8004988:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800498a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498c:	fab3 f383 	clz	r3, r3
 8004990:	b2db      	uxtb	r3, r3
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d102      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xa6>
 80049a0:	4b6f      	ldr	r3, [pc, #444]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	e00f      	b.n	80049c6 <HAL_RCC_ClockConfig+0xc6>
 80049a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049ae:	fa93 f3a3 	rbit	r3, r3
 80049b2:	667b      	str	r3, [r7, #100]	; 0x64
 80049b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049b8:	663b      	str	r3, [r7, #96]	; 0x60
 80049ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049bc:	fa93 f3a3 	rbit	r3, r3
 80049c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049c2:	4b67      	ldr	r3, [pc, #412]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80049cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049ce:	fa92 f2a2 	rbit	r2, r2
 80049d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80049d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049d6:	fab2 f282 	clz	r2, r2
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	f042 0220 	orr.w	r2, r2, #32
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	f002 021f 	and.w	r2, r2, #31
 80049e6:	2101      	movs	r1, #1
 80049e8:	fa01 f202 	lsl.w	r2, r1, r2
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d17b      	bne.n	8004aea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e0f3      	b.n	8004bde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d13c      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x178>
 80049fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a06:	fa93 f3a3 	rbit	r3, r3
 8004a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0e:	fab3 f383 	clz	r3, r3
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d102      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x128>
 8004a22:	4b4f      	ldr	r3, [pc, #316]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	e00f      	b.n	8004a48 <HAL_RCC_ClockConfig+0x148>
 8004a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a30:	fa93 f3a3 	rbit	r3, r3
 8004a34:	647b      	str	r3, [r7, #68]	; 0x44
 8004a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3e:	fa93 f3a3 	rbit	r3, r3
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a44:	4b46      	ldr	r3, [pc, #280]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a50:	fa92 f2a2 	rbit	r2, r2
 8004a54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a58:	fab2 f282 	clz	r2, r2
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	f042 0220 	orr.w	r2, r2, #32
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	f002 021f 	and.w	r2, r2, #31
 8004a68:	2101      	movs	r1, #1
 8004a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d13a      	bne.n	8004aea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0b2      	b.n	8004bde <HAL_RCC_ClockConfig+0x2de>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a86:	fab3 f383 	clz	r3, r3
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d102      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x1a0>
 8004a9a:	4b31      	ldr	r3, [pc, #196]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	e00d      	b.n	8004abc <HAL_RCC_ClockConfig+0x1bc>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	fa93 f3a3 	rbit	r3, r3
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004aac:	2302      	movs	r3, #2
 8004aae:	623b      	str	r3, [r7, #32]
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	fa93 f3a3 	rbit	r3, r3
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	4b29      	ldr	r3, [pc, #164]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	2202      	movs	r2, #2
 8004abe:	61ba      	str	r2, [r7, #24]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	fa92 f2a2 	rbit	r2, r2
 8004ac6:	617a      	str	r2, [r7, #20]
  return result;
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	fab2 f282 	clz	r2, r2
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	f042 0220 	orr.w	r2, r2, #32
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	f002 021f 	and.w	r2, r2, #31
 8004ada:	2101      	movs	r1, #1
 8004adc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e079      	b.n	8004bde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aea:	4b1d      	ldr	r3, [pc, #116]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f023 0203 	bic.w	r2, r3, #3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	491a      	ldr	r1, [pc, #104]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004afc:	f7fc f908 	bl	8000d10 <HAL_GetTick>
 8004b00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	e00a      	b.n	8004b1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b04:	f7fc f904 	bl	8000d10 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e061      	b.n	8004bde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1a:	4b11      	ldr	r3, [pc, #68]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f003 020c 	and.w	r2, r3, #12
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d1eb      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_RCC_ClockConfig+0x25c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d214      	bcs.n	8004b64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3a:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <HAL_RCC_ClockConfig+0x25c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 0207 	bic.w	r2, r3, #7
 8004b42:	4906      	ldr	r1, [pc, #24]	; (8004b5c <HAL_RCC_ClockConfig+0x25c>)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <HAL_RCC_ClockConfig+0x25c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d005      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e040      	b.n	8004bde <HAL_RCC_ClockConfig+0x2de>
 8004b5c:	40022000 	.word	0x40022000
 8004b60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b70:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <HAL_RCC_ClockConfig+0x2e8>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	491a      	ldr	r1, [pc, #104]	; (8004be8 <HAL_RCC_ClockConfig+0x2e8>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b8e:	4b16      	ldr	r3, [pc, #88]	; (8004be8 <HAL_RCC_ClockConfig+0x2e8>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4912      	ldr	r1, [pc, #72]	; (8004be8 <HAL_RCC_ClockConfig+0x2e8>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ba2:	f000 f829 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8004ba6:	4601      	mov	r1, r0
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <HAL_RCC_ClockConfig+0x2e8>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb0:	22f0      	movs	r2, #240	; 0xf0
 8004bb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	fa92 f2a2 	rbit	r2, r2
 8004bba:	60fa      	str	r2, [r7, #12]
  return result;
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	fab2 f282 	clz	r2, r2
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	40d3      	lsrs	r3, r2
 8004bc6:	4a09      	ldr	r2, [pc, #36]	; (8004bec <HAL_RCC_ClockConfig+0x2ec>)
 8004bc8:	5cd3      	ldrb	r3, [r2, r3]
 8004bca:	fa21 f303 	lsr.w	r3, r1, r3
 8004bce:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <HAL_RCC_ClockConfig+0x2f0>)
 8004bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <HAL_RCC_ClockConfig+0x2f4>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fc f856 	bl	8000c88 <HAL_InitTick>
  
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3778      	adds	r7, #120	; 0x78
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
 8004bec:	0800a7c0 	.word	0x0800a7c0
 8004bf0:	20000000 	.word	0x20000000
 8004bf4:	20000004 	.word	0x20000004

08004bf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b08b      	sub	sp, #44	; 0x2c
 8004bfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	2300      	movs	r3, #0
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	2300      	movs	r3, #0
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004c12:	4b29      	ldr	r3, [pc, #164]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d002      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x30>
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d003      	beq.n	8004c2e <HAL_RCC_GetSysClockFreq+0x36>
 8004c26:	e03c      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c28:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c2a:	623b      	str	r3, [r7, #32]
      break;
 8004c2c:	e03c      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004c34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004c38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	fa92 f2a2 	rbit	r2, r2
 8004c40:	607a      	str	r2, [r7, #4]
  return result;
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	fab2 f282 	clz	r2, r2
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	40d3      	lsrs	r3, r2
 8004c4c:	4a1c      	ldr	r2, [pc, #112]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c4e:	5cd3      	ldrb	r3, [r2, r3]
 8004c50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c52:	4b19      	ldr	r3, [pc, #100]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	220f      	movs	r2, #15
 8004c5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	fa92 f2a2 	rbit	r2, r2
 8004c64:	60fa      	str	r2, [r7, #12]
  return result;
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	fab2 f282 	clz	r2, r2
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	40d3      	lsrs	r3, r2
 8004c70:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c72:	5cd3      	ldrb	r3, [r2, r3]
 8004c74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c80:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c90:	e004      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4a0c      	ldr	r2, [pc, #48]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	623b      	str	r3, [r7, #32]
      break;
 8004ca0:	e002      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ca4:	623b      	str	r3, [r7, #32]
      break;
 8004ca6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	372c      	adds	r7, #44	; 0x2c
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	016e3600 	.word	0x016e3600
 8004cc0:	0800a7d0 	.word	0x0800a7d0
 8004cc4:	0800a7e0 	.word	0x0800a7e0
 8004cc8:	003d0900 	.word	0x003d0900
 8004ccc:	007a1200 	.word	0x007a1200

08004cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b092      	sub	sp, #72	; 0x48
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80d4 	beq.w	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf4:	4b4e      	ldr	r3, [pc, #312]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10e      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d00:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	4a4a      	ldr	r2, [pc, #296]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	61d3      	str	r3, [r2, #28]
 8004d0c:	4b48      	ldr	r3, [pc, #288]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1e:	4b45      	ldr	r3, [pc, #276]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d118      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2a:	4b42      	ldr	r3, [pc, #264]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a41      	ldr	r2, [pc, #260]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d36:	f7fb ffeb 	bl	8000d10 <HAL_GetTick>
 8004d3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3c:	e008      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3e:	f7fb ffe7 	bl	8000d10 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b64      	cmp	r3, #100	; 0x64
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e169      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	4b38      	ldr	r3, [pc, #224]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d5c:	4b34      	ldr	r3, [pc, #208]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 8084 	beq.w	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d07c      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d7c:	4b2c      	ldr	r3, [pc, #176]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	fa93 f3a3 	rbit	r3, r3
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d96:	fab3 f383 	clz	r3, r3
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	461a      	mov	r2, r3
 8004da6:	2301      	movs	r3, #1
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dce:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d04b      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dde:	f7fb ff97 	bl	8000d10 <HAL_GetTick>
 8004de2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de4:	e00a      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fb ff93 	bl	8000d10 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e113      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	fa93 f3a3 	rbit	r3, r3
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
 8004e08:	2302      	movs	r3, #2
 8004e0a:	623b      	str	r3, [r7, #32]
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	fa93 f3a3 	rbit	r3, r3
 8004e12:	61fb      	str	r3, [r7, #28]
  return result;
 8004e14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f043 0302 	orr.w	r3, r3, #2
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d108      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004e2a:	4b01      	ldr	r3, [pc, #4]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	e00d      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40007000 	.word	0x40007000
 8004e38:	10908100 	.word	0x10908100
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	fa93 f3a3 	rbit	r3, r3
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	4b78      	ldr	r3, [pc, #480]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	613a      	str	r2, [r7, #16]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	fa92 f2a2 	rbit	r2, r2
 8004e56:	60fa      	str	r2, [r7, #12]
  return result;
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	fab2 f282 	clz	r2, r2
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	f002 021f 	and.w	r2, r2, #31
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0b7      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e76:	4b6d      	ldr	r3, [pc, #436]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	496a      	ldr	r1, [pc, #424]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d105      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e90:	4b66      	ldr	r3, [pc, #408]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	4a65      	ldr	r2, [pc, #404]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ea8:	4b60      	ldr	r3, [pc, #384]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	f023 0203 	bic.w	r2, r3, #3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	495d      	ldr	r1, [pc, #372]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ec6:	4b59      	ldr	r3, [pc, #356]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	4956      	ldr	r1, [pc, #344]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ee4:	4b51      	ldr	r3, [pc, #324]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	494e      	ldr	r1, [pc, #312]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d008      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f02:	4b4a      	ldr	r3, [pc, #296]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	f023 0210 	bic.w	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	4947      	ldr	r1, [pc, #284]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004f20:	4b42      	ldr	r3, [pc, #264]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	493f      	ldr	r1, [pc, #252]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f3e:	4b3b      	ldr	r3, [pc, #236]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	f023 0220 	bic.w	r2, r3, #32
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	4938      	ldr	r1, [pc, #224]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f5c:	4b33      	ldr	r3, [pc, #204]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	4930      	ldr	r1, [pc, #192]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d008      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f7a:	4b2c      	ldr	r3, [pc, #176]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	4929      	ldr	r1, [pc, #164]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f98:	4b24      	ldr	r3, [pc, #144]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	4921      	ldr	r1, [pc, #132]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d008      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fb6:	4b1d      	ldr	r3, [pc, #116]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	491a      	ldr	r1, [pc, #104]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004fd4:	4b15      	ldr	r3, [pc, #84]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	4912      	ldr	r1, [pc, #72]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d008      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	490b      	ldr	r1, [pc, #44]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005000:	4313      	orrs	r3, r2
 8005002:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d008      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005010:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501c:	4903      	ldr	r1, [pc, #12]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800501e:	4313      	orrs	r3, r2
 8005020:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3748      	adds	r7, #72	; 0x48
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40021000 	.word	0x40021000

08005030 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005040:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005044:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800505e:	b480      	push	{r7}
 8005060:	b085      	sub	sp, #20
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005066:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800506a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	b29b      	uxth	r3, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	b29b      	uxth	r3, r3
 800507c:	4013      	ands	r3, r2
 800507e:	b29a      	uxth	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005094:	b084      	sub	sp, #16
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	f107 0014 	add.w	r0, r7, #20
 80050a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	b004      	add	sp, #16
 80050d4:	4770      	bx	lr
	...

080050d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050d8:	b480      	push	{r7}
 80050da:	b09d      	sub	sp, #116	; 0x74
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	78db      	ldrb	r3, [r3, #3]
 8005106:	2b03      	cmp	r3, #3
 8005108:	d81f      	bhi.n	800514a <USB_ActivateEndpoint+0x72>
 800510a:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <USB_ActivateEndpoint+0x38>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005121 	.word	0x08005121
 8005114:	0800513d 	.word	0x0800513d
 8005118:	08005153 	.word	0x08005153
 800511c:	0800512f 	.word	0x0800512f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005120:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005124:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005128:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800512c:	e012      	b.n	8005154 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800512e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005132:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005136:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800513a:	e00b      	b.n	8005154 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800513c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005140:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005144:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005148:	e004      	b.n	8005154 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005150:	e000      	b.n	8005154 <USB_ActivateEndpoint+0x7c>
      break;
 8005152:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005172:	b29b      	uxth	r3, r3
 8005174:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	b21b      	sxth	r3, r3
 8005186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518e:	b21a      	sxth	r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	b21b      	sxth	r3, r3
 8005196:	4313      	orrs	r3, r2
 8005198:	b21b      	sxth	r3, r3
 800519a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	441a      	add	r2, r3
 80051a8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80051ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051bc:	b29b      	uxth	r3, r3
 80051be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	7b1b      	ldrb	r3, [r3, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f040 8178 	bne.w	80054ba <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	785b      	ldrb	r3, [r3, #1]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8084 	beq.w	80052dc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051de:	b29b      	uxth	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	4413      	add	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	011a      	lsls	r2, r3, #4
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	88db      	ldrh	r3, [r3, #6]
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	b29b      	uxth	r3, r3
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	827b      	strh	r3, [r7, #18]
 8005216:	8a7b      	ldrh	r3, [r7, #18]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01b      	beq.n	8005258 <USB_ActivateEndpoint+0x180>
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	b29b      	uxth	r3, r3
 800522e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005236:	823b      	strh	r3, [r7, #16]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	8a3b      	ldrh	r3, [r7, #16]
 8005244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005250:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005254:	b29b      	uxth	r3, r3
 8005256:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	78db      	ldrb	r3, [r3, #3]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d020      	beq.n	80052a2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	b29b      	uxth	r3, r3
 800526e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005276:	81bb      	strh	r3, [r7, #12]
 8005278:	89bb      	ldrh	r3, [r7, #12]
 800527a:	f083 0320 	eor.w	r3, r3, #32
 800527e:	81bb      	strh	r3, [r7, #12]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	441a      	add	r2, r3
 800528a:	89bb      	ldrh	r3, [r7, #12]
 800528c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529c:	b29b      	uxth	r3, r3
 800529e:	8013      	strh	r3, [r2, #0]
 80052a0:	e2d5      	b.n	800584e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b8:	81fb      	strh	r3, [r7, #14]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	441a      	add	r2, r3
 80052c4:	89fb      	ldrh	r3, [r7, #14]
 80052c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	8013      	strh	r3, [r2, #0]
 80052da:	e2b8      	b.n	800584e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	633b      	str	r3, [r7, #48]	; 0x30
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	4413      	add	r3, r2
 80052ee:	633b      	str	r3, [r7, #48]	; 0x30
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	011a      	lsls	r2, r3, #4
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80052fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	88db      	ldrh	r3, [r3, #6]
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	b29b      	uxth	r3, r3
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	62bb      	str	r3, [r7, #40]	; 0x28
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531a:	b29b      	uxth	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	4413      	add	r3, r2
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	011a      	lsls	r2, r3, #4
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	4413      	add	r3, r2
 800532e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800533e:	b29a      	uxth	r2, r3
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	801a      	strh	r2, [r3, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	2b3e      	cmp	r3, #62	; 0x3e
 800534a:	d91d      	bls.n	8005388 <USB_ActivateEndpoint+0x2b0>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	66bb      	str	r3, [r7, #104]	; 0x68
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	2b00      	cmp	r3, #0
 800535e:	d102      	bne.n	8005366 <USB_ActivateEndpoint+0x28e>
 8005360:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005362:	3b01      	subs	r3, #1
 8005364:	66bb      	str	r3, [r7, #104]	; 0x68
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29a      	uxth	r2, r3
 800536c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800536e:	b29b      	uxth	r3, r3
 8005370:	029b      	lsls	r3, r3, #10
 8005372:	b29b      	uxth	r3, r3
 8005374:	4313      	orrs	r3, r2
 8005376:	b29b      	uxth	r3, r3
 8005378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005380:	b29a      	uxth	r2, r3
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	e026      	b.n	80053d6 <USB_ActivateEndpoint+0x2fe>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <USB_ActivateEndpoint+0x2ce>
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	e017      	b.n	80053d6 <USB_ActivateEndpoint+0x2fe>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <USB_ActivateEndpoint+0x2e8>
 80053ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053bc:	3301      	adds	r3, #1
 80053be:	66bb      	str	r3, [r7, #104]	; 0x68
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	029b      	lsls	r3, r3, #10
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	4313      	orrs	r3, r2
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80053e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01b      	beq.n	8005426 <USB_ActivateEndpoint+0x34e>
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005404:	843b      	strh	r3, [r7, #32]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	441a      	add	r2, r3
 8005410:	8c3b      	ldrh	r3, [r7, #32]
 8005412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800541e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005422:	b29b      	uxth	r3, r3
 8005424:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d124      	bne.n	8005478 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005444:	83bb      	strh	r3, [r7, #28]
 8005446:	8bbb      	ldrh	r3, [r7, #28]
 8005448:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800544c:	83bb      	strh	r3, [r7, #28]
 800544e:	8bbb      	ldrh	r3, [r7, #28]
 8005450:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005454:	83bb      	strh	r3, [r7, #28]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	441a      	add	r2, r3
 8005460:	8bbb      	ldrh	r3, [r7, #28]
 8005462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005472:	b29b      	uxth	r3, r3
 8005474:	8013      	strh	r3, [r2, #0]
 8005476:	e1ea      	b.n	800584e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	b29b      	uxth	r3, r3
 8005486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	83fb      	strh	r3, [r7, #30]
 8005490:	8bfb      	ldrh	r3, [r7, #30]
 8005492:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005496:	83fb      	strh	r3, [r7, #30]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	441a      	add	r2, r3
 80054a2:	8bfb      	ldrh	r3, [r7, #30]
 80054a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	8013      	strh	r3, [r2, #0]
 80054b8:	e1c9      	b.n	800584e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	78db      	ldrb	r3, [r3, #3]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d11e      	bne.n	8005500 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	441a      	add	r2, r3
 80054e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80054ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80054f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	8013      	strh	r3, [r2, #0]
 80054fe:	e01d      	b.n	800553c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005516:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	441a      	add	r2, r3
 8005524:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005538:	b29b      	uxth	r3, r3
 800553a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005546:	b29b      	uxth	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800554c:	4413      	add	r3, r2
 800554e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	011a      	lsls	r2, r3, #4
 8005556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005558:	4413      	add	r3, r2
 800555a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800555e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	891b      	ldrh	r3, [r3, #8]
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	b29b      	uxth	r3, r3
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800556e:	801a      	strh	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	657b      	str	r3, [r7, #84]	; 0x54
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557a:	b29b      	uxth	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005580:	4413      	add	r3, r2
 8005582:	657b      	str	r3, [r7, #84]	; 0x54
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	011a      	lsls	r2, r3, #4
 800558a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800558c:	4413      	add	r3, r2
 800558e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005592:	653b      	str	r3, [r7, #80]	; 0x50
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	895b      	ldrh	r3, [r3, #10]
 8005598:	085b      	lsrs	r3, r3, #1
 800559a:	b29b      	uxth	r3, r3
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f040 8093 	bne.w	80056d4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80055be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80055c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01b      	beq.n	8005602 <USB_ActivateEndpoint+0x52a>
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	441a      	add	r2, r3
 80055ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fe:	b29b      	uxth	r3, r3
 8005600:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005610:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d01b      	beq.n	8005652 <USB_ActivateEndpoint+0x57a>
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	b29b      	uxth	r3, r3
 8005628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005630:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	441a      	add	r2, r3
 800563c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800563e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800564a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800564e:	b29b      	uxth	r3, r3
 8005650:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	b29b      	uxth	r3, r3
 8005660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005668:	873b      	strh	r3, [r7, #56]	; 0x38
 800566a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800566c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005670:	873b      	strh	r3, [r7, #56]	; 0x38
 8005672:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005674:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005678:	873b      	strh	r3, [r7, #56]	; 0x38
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	441a      	add	r2, r3
 8005684:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	441a      	add	r2, r3
 80056bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	8013      	strh	r3, [r2, #0]
 80056d2:	e0bc      	b.n	800584e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80056e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01d      	beq.n	800572c <USB_ActivateEndpoint+0x654>
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	441a      	add	r2, r3
 8005714:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005728:	b29b      	uxth	r3, r3
 800572a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800573c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01d      	beq.n	8005784 <USB_ActivateEndpoint+0x6ac>
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	441a      	add	r2, r3
 800576c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800577c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005780:	b29b      	uxth	r3, r3
 8005782:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	78db      	ldrb	r3, [r3, #3]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d024      	beq.n	80057d6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80057a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80057aa:	f083 0320 	eor.w	r3, r3, #32
 80057ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	441a      	add	r2, r3
 80057bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80057c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	8013      	strh	r3, [r2, #0]
 80057d4:	e01d      	b.n	8005812 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	441a      	add	r2, r3
 80057fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80057fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800580a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580e:	b29b      	uxth	r3, r3
 8005810:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005828:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	441a      	add	r2, r3
 8005836:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800583a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800583e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584a:	b29b      	uxth	r3, r3
 800584c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800584e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005852:	4618      	mov	r0, r3
 8005854:	3774      	adds	r7, #116	; 0x74
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop

08005860 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005860:	b480      	push	{r7}
 8005862:	b08d      	sub	sp, #52	; 0x34
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	7b1b      	ldrb	r3, [r3, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f040 808e 	bne.w	8005990 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d044      	beq.n	8005906 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	81bb      	strh	r3, [r7, #12]
 800588a:	89bb      	ldrh	r3, [r7, #12]
 800588c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01b      	beq.n	80058cc <USB_DeactivateEndpoint+0x6c>
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058aa:	817b      	strh	r3, [r7, #10]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	441a      	add	r2, r3
 80058b6:	897b      	ldrh	r3, [r7, #10]
 80058b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e2:	813b      	strh	r3, [r7, #8]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	441a      	add	r2, r3
 80058ee:	893b      	ldrh	r3, [r7, #8]
 80058f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005900:	b29b      	uxth	r3, r3
 8005902:	8013      	strh	r3, [r2, #0]
 8005904:	e192      	b.n	8005c2c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	827b      	strh	r3, [r7, #18]
 8005914:	8a7b      	ldrh	r3, [r7, #18]
 8005916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d01b      	beq.n	8005956 <USB_DeactivateEndpoint+0xf6>
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005934:	823b      	strh	r3, [r7, #16]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	441a      	add	r2, r3
 8005940:	8a3b      	ldrh	r3, [r7, #16]
 8005942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800594e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005952:	b29b      	uxth	r3, r3
 8005954:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596c:	81fb      	strh	r3, [r7, #14]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	441a      	add	r2, r3
 8005978:	89fb      	ldrh	r3, [r7, #14]
 800597a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800597e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800598a:	b29b      	uxth	r3, r3
 800598c:	8013      	strh	r3, [r2, #0]
 800598e:	e14d      	b.n	8005c2c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f040 80a5 	bne.w	8005ae4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	843b      	strh	r3, [r7, #32]
 80059a8:	8c3b      	ldrh	r3, [r7, #32]
 80059aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d01b      	beq.n	80059ea <USB_DeactivateEndpoint+0x18a>
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c8:	83fb      	strh	r3, [r7, #30]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	441a      	add	r2, r3
 80059d4:	8bfb      	ldrh	r3, [r7, #30]
 80059d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	83bb      	strh	r3, [r7, #28]
 80059f8:	8bbb      	ldrh	r3, [r7, #28]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d01b      	beq.n	8005a3a <USB_DeactivateEndpoint+0x1da>
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a18:	837b      	strh	r3, [r7, #26]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	441a      	add	r2, r3
 8005a24:	8b7b      	ldrh	r3, [r7, #26]
 8005a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a50:	833b      	strh	r3, [r7, #24]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	441a      	add	r2, r3
 8005a5c:	8b3b      	ldrh	r3, [r7, #24]
 8005a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a88:	82fb      	strh	r3, [r7, #22]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	441a      	add	r2, r3
 8005a94:	8afb      	ldrh	r3, [r7, #22]
 8005a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac0:	82bb      	strh	r3, [r7, #20]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	441a      	add	r2, r3
 8005acc:	8abb      	ldrh	r3, [r7, #20]
 8005ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	8013      	strh	r3, [r2, #0]
 8005ae2:	e0a3      	b.n	8005c2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005af2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <USB_DeactivateEndpoint+0x2d4>
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005b42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01b      	beq.n	8005b84 <USB_DeactivateEndpoint+0x324>
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	853b      	strh	r3, [r7, #40]	; 0x28
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	441a      	add	r2, r3
 8005b6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	441a      	add	r2, r3
 8005ba6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	441a      	add	r2, r3
 8005bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3734      	adds	r7, #52	; 0x34
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b0c2      	sub	sp, #264	; 0x108
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c48:	6018      	str	r0, [r3, #0]
 8005c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c52:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	785b      	ldrb	r3, [r3, #1]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	f040 86b7 	bne.w	80069d4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d908      	bls.n	8005c94 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c92:	e007      	b.n	8005ca4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	7b1b      	ldrb	r3, [r3, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d13a      	bne.n	8005d2a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6959      	ldr	r1, [r3, #20]
 8005cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	88da      	ldrh	r2, [r3, #6]
 8005ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005cd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005cda:	6800      	ldr	r0, [r0, #0]
 8005cdc:	f001 fc8c 	bl	80075f8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	4413      	add	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	011a      	lsls	r2, r3, #4
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	4413      	add	r3, r2
 8005d16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	801a      	strh	r2, [r3, #0]
 8005d26:	f000 be1f 	b.w	8006968 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	78db      	ldrb	r3, [r3, #3]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	f040 8462 	bne.w	8006600 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6a1a      	ldr	r2, [r3, #32]
 8005d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	f240 83df 	bls.w	8006518 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d80:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	441a      	add	r2, r3
 8005d9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005daa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6a1a      	ldr	r2, [r3, #32]
 8005dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc6:	1ad2      	subs	r2, r2, r3
 8005dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 81c7 	beq.w	800618a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	633b      	str	r3, [r7, #48]	; 0x30
 8005e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d177      	bne.n	8005f08 <USB_EPStartXfer+0x2ce>
 8005e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	4413      	add	r3, r2
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	011a      	lsls	r2, r3, #4
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	801a      	strh	r2, [r3, #0]
 8005e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e68:	2b3e      	cmp	r3, #62	; 0x3e
 8005e6a:	d921      	bls.n	8005eb0 <USB_EPStartXfer+0x276>
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d104      	bne.n	8005e8c <USB_EPStartXfer+0x252>
 8005e82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e86:	3b01      	subs	r3, #1
 8005e88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	029b      	lsls	r3, r3, #10
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	e050      	b.n	8005f52 <USB_EPStartXfer+0x318>
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <USB_EPStartXfer+0x294>
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e041      	b.n	8005f52 <USB_EPStartXfer+0x318>
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d004      	beq.n	8005eee <USB_EPStartXfer+0x2b4>
 8005ee4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ee8:	3301      	adds	r3, #1
 8005eea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	029b      	lsls	r3, r3, #10
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	4313      	orrs	r3, r2
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	e024      	b.n	8005f52 <USB_EPStartXfer+0x318>
 8005f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d11c      	bne.n	8005f52 <USB_EPStartXfer+0x318>
 8005f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	4413      	add	r3, r2
 8005f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	011a      	lsls	r2, r3, #4
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	4413      	add	r3, r2
 8005f42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	895b      	ldrh	r3, [r3, #10]
 8005f5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6959      	ldr	r1, [r3, #20]
 8005f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f7c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f80:	6800      	ldr	r0, [r0, #0]
 8005f82:	f001 fb39 	bl	80075f8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695a      	ldr	r2, [r3, #20]
 8005f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f96:	441a      	add	r2, r3
 8005f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6a1a      	ldr	r2, [r3, #32]
 8005fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d90f      	bls.n	8005fe0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6a1a      	ldr	r2, [r3, #32]
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd0:	1ad2      	subs	r2, r2, r3
 8005fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	621a      	str	r2, [r3, #32]
 8005fde:	e00e      	b.n	8005ffe <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d177      	bne.n	80060fe <USB_EPStartXfer+0x4c4>
 800600e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006028:	b29b      	uxth	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	4413      	add	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	011a      	lsls	r2, r3, #4
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	4413      	add	r3, r2
 8006044:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	b29b      	uxth	r3, r3
 8006050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006054:	b29a      	uxth	r2, r3
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605e:	2b3e      	cmp	r3, #62	; 0x3e
 8006060:	d921      	bls.n	80060a6 <USB_EPStartXfer+0x46c>
 8006062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	2b00      	cmp	r3, #0
 8006076:	d104      	bne.n	8006082 <USB_EPStartXfer+0x448>
 8006078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800607c:	3b01      	subs	r3, #1
 800607e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29a      	uxth	r2, r3
 8006088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800608c:	b29b      	uxth	r3, r3
 800608e:	029b      	lsls	r3, r3, #10
 8006090:	b29b      	uxth	r3, r3
 8006092:	4313      	orrs	r3, r2
 8006094:	b29b      	uxth	r3, r3
 8006096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609e:	b29a      	uxth	r2, r3
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	801a      	strh	r2, [r3, #0]
 80060a4:	e056      	b.n	8006154 <USB_EPStartXfer+0x51a>
 80060a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <USB_EPStartXfer+0x48a>
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060bc:	b29a      	uxth	r2, r3
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	e047      	b.n	8006154 <USB_EPStartXfer+0x51a>
 80060c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <USB_EPStartXfer+0x4aa>
 80060da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060de:	3301      	adds	r3, #1
 80060e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	029b      	lsls	r3, r3, #10
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	4313      	orrs	r3, r2
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e02a      	b.n	8006154 <USB_EPStartXfer+0x51a>
 80060fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	785b      	ldrb	r3, [r3, #1]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d122      	bne.n	8006154 <USB_EPStartXfer+0x51a>
 800610e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006112:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	623b      	str	r3, [r7, #32]
 800611a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006128:	b29b      	uxth	r3, r3
 800612a:	461a      	mov	r2, r3
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	4413      	add	r3, r2
 8006130:	623b      	str	r3, [r7, #32]
 8006132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	011a      	lsls	r2, r3, #4
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	4413      	add	r3, r2
 8006144:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614e:	b29a      	uxth	r2, r3
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	891b      	ldrh	r3, [r3, #8]
 8006160:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6959      	ldr	r1, [r3, #20]
 8006170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006174:	b29b      	uxth	r3, r3
 8006176:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800617a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800617e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006182:	6800      	ldr	r0, [r0, #0]
 8006184:	f001 fa38 	bl	80075f8 <USB_WritePMA>
 8006188:	e3ee      	b.n	8006968 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800618a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d177      	bne.n	800628a <USB_EPStartXfer+0x650>
 800619a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80061a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ba:	4413      	add	r3, r2
 80061bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80061be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	011a      	lsls	r2, r3, #4
 80061cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ce:	4413      	add	r3, r2
 80061d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061d4:	647b      	str	r3, [r7, #68]	; 0x44
 80061d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e4:	801a      	strh	r2, [r3, #0]
 80061e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ea:	2b3e      	cmp	r3, #62	; 0x3e
 80061ec:	d921      	bls.n	8006232 <USB_EPStartXfer+0x5f8>
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fc:	f003 031f 	and.w	r3, r3, #31
 8006200:	2b00      	cmp	r3, #0
 8006202:	d104      	bne.n	800620e <USB_EPStartXfer+0x5d4>
 8006204:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006208:	3b01      	subs	r3, #1
 800620a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800620e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29a      	uxth	r2, r3
 8006214:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006218:	b29b      	uxth	r3, r3
 800621a:	029b      	lsls	r3, r3, #10
 800621c:	b29b      	uxth	r3, r3
 800621e:	4313      	orrs	r3, r2
 8006220:	b29b      	uxth	r3, r3
 8006222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622a:	b29a      	uxth	r2, r3
 800622c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	e056      	b.n	80062e0 <USB_EPStartXfer+0x6a6>
 8006232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <USB_EPStartXfer+0x616>
 800623a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006248:	b29a      	uxth	r2, r3
 800624a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	e047      	b.n	80062e0 <USB_EPStartXfer+0x6a6>
 8006250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006254:	085b      	lsrs	r3, r3, #1
 8006256:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800625a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <USB_EPStartXfer+0x636>
 8006266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800626a:	3301      	adds	r3, #1
 800626c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	b29a      	uxth	r2, r3
 8006276:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800627a:	b29b      	uxth	r3, r3
 800627c:	029b      	lsls	r3, r3, #10
 800627e:	b29b      	uxth	r3, r3
 8006280:	4313      	orrs	r3, r2
 8006282:	b29a      	uxth	r2, r3
 8006284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006286:	801a      	strh	r2, [r3, #0]
 8006288:	e02a      	b.n	80062e0 <USB_EPStartXfer+0x6a6>
 800628a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d122      	bne.n	80062e0 <USB_EPStartXfer+0x6a6>
 800629a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	653b      	str	r3, [r7, #80]	; 0x50
 80062a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ba:	4413      	add	r3, r2
 80062bc:	653b      	str	r3, [r7, #80]	; 0x50
 80062be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	011a      	lsls	r2, r3, #4
 80062cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ce:	4413      	add	r3, r2
 80062d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062da:	b29a      	uxth	r2, r3
 80062dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80062e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	891b      	ldrh	r3, [r3, #8]
 80062ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6959      	ldr	r1, [r3, #20]
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006300:	b29b      	uxth	r3, r3
 8006302:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006306:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800630a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800630e:	6800      	ldr	r0, [r0, #0]
 8006310:	f001 f972 	bl	80075f8 <USB_WritePMA>
            ep->xfer_buff += len;
 8006314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	695a      	ldr	r2, [r3, #20]
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006324:	441a      	add	r2, r3
 8006326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6a1a      	ldr	r2, [r3, #32]
 800633e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	429a      	cmp	r2, r3
 800634c:	d90f      	bls.n	800636e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800634e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6a1a      	ldr	r2, [r3, #32]
 800635a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635e:	1ad2      	subs	r2, r2, r3
 8006360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	621a      	str	r2, [r3, #32]
 800636c:	e00e      	b.n	800638c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800637e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2200      	movs	r2, #0
 800638a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800638c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006390:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	643b      	str	r3, [r7, #64]	; 0x40
 8006398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d177      	bne.n	8006498 <USB_EPStartXfer+0x85e>
 80063a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80063b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c8:	4413      	add	r3, r2
 80063ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	011a      	lsls	r2, r3, #4
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	4413      	add	r3, r2
 80063de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063e2:	637b      	str	r3, [r7, #52]	; 0x34
 80063e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f8:	2b3e      	cmp	r3, #62	; 0x3e
 80063fa:	d921      	bls.n	8006440 <USB_EPStartXfer+0x806>
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640a:	f003 031f 	and.w	r3, r3, #31
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <USB_EPStartXfer+0x7e2>
 8006412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006416:	3b01      	subs	r3, #1
 8006418:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800641c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29a      	uxth	r2, r3
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006426:	b29b      	uxth	r3, r3
 8006428:	029b      	lsls	r3, r3, #10
 800642a:	b29b      	uxth	r3, r3
 800642c:	4313      	orrs	r3, r2
 800642e:	b29b      	uxth	r3, r3
 8006430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006438:	b29a      	uxth	r2, r3
 800643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643c:	801a      	strh	r2, [r3, #0]
 800643e:	e050      	b.n	80064e2 <USB_EPStartXfer+0x8a8>
 8006440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <USB_EPStartXfer+0x824>
 8006448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006456:	b29a      	uxth	r2, r3
 8006458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	e041      	b.n	80064e2 <USB_EPStartXfer+0x8a8>
 800645e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006462:	085b      	lsrs	r3, r3, #1
 8006464:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d004      	beq.n	800647e <USB_EPStartXfer+0x844>
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	3301      	adds	r3, #1
 800647a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29a      	uxth	r2, r3
 8006484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006488:	b29b      	uxth	r3, r3
 800648a:	029b      	lsls	r3, r3, #10
 800648c:	b29b      	uxth	r3, r3
 800648e:	4313      	orrs	r3, r2
 8006490:	b29a      	uxth	r2, r3
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	e024      	b.n	80064e2 <USB_EPStartXfer+0x8a8>
 8006498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d11c      	bne.n	80064e2 <USB_EPStartXfer+0x8a8>
 80064a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064bc:	4413      	add	r3, r2
 80064be:	643b      	str	r3, [r7, #64]	; 0x40
 80064c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	011a      	lsls	r2, r3, #4
 80064ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d0:	4413      	add	r3, r2
 80064d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064dc:	b29a      	uxth	r2, r3
 80064de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	895b      	ldrh	r3, [r3, #10]
 80064ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6959      	ldr	r1, [r3, #20]
 80064fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006502:	b29b      	uxth	r3, r3
 8006504:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006508:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800650c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006510:	6800      	ldr	r0, [r0, #0]
 8006512:	f001 f871 	bl	80075f8 <USB_WritePMA>
 8006516:	e227      	b.n	8006968 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800654a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	441a      	add	r2, r3
 800656c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006580:	b29b      	uxth	r3, r3
 8006582:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659e:	b29b      	uxth	r3, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a4:	4413      	add	r3, r2
 80065a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	011a      	lsls	r2, r3, #4
 80065b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b8:	4413      	add	r3, r2
 80065ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065be:	65bb      	str	r3, [r7, #88]	; 0x58
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	891b      	ldrh	r3, [r3, #8]
 80065d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6959      	ldr	r1, [r3, #20]
 80065e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065f8:	6800      	ldr	r0, [r0, #0]
 80065fa:	f000 fffd 	bl	80075f8 <USB_WritePMA>
 80065fe:	e1b3      	b.n	8006968 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6a1a      	ldr	r2, [r3, #32]
 800660c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006610:	1ad2      	subs	r2, r2, r3
 8006612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800661e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 80c6 	beq.w	80067d2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	673b      	str	r3, [r7, #112]	; 0x70
 8006652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d177      	bne.n	8006752 <USB_EPStartXfer+0xb18>
 8006662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	66bb      	str	r3, [r7, #104]	; 0x68
 800666e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006672:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800667c:	b29b      	uxth	r3, r3
 800667e:	461a      	mov	r2, r3
 8006680:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006682:	4413      	add	r3, r2
 8006684:	66bb      	str	r3, [r7, #104]	; 0x68
 8006686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	011a      	lsls	r2, r3, #4
 8006694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006696:	4413      	add	r3, r2
 8006698:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800669c:	667b      	str	r3, [r7, #100]	; 0x64
 800669e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b2:	2b3e      	cmp	r3, #62	; 0x3e
 80066b4:	d921      	bls.n	80066fa <USB_EPStartXfer+0xac0>
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c4:	f003 031f 	and.w	r3, r3, #31
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d104      	bne.n	80066d6 <USB_EPStartXfer+0xa9c>
 80066cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066d0:	3b01      	subs	r3, #1
 80066d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29a      	uxth	r2, r3
 80066dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	029b      	lsls	r3, r3, #10
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	4313      	orrs	r3, r2
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066f6:	801a      	strh	r2, [r3, #0]
 80066f8:	e050      	b.n	800679c <USB_EPStartXfer+0xb62>
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10a      	bne.n	8006718 <USB_EPStartXfer+0xade>
 8006702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006710:	b29a      	uxth	r2, r3
 8006712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	e041      	b.n	800679c <USB_EPStartXfer+0xb62>
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <USB_EPStartXfer+0xafe>
 800672e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006732:	3301      	adds	r3, #1
 8006734:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29a      	uxth	r2, r3
 800673e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006742:	b29b      	uxth	r3, r3
 8006744:	029b      	lsls	r3, r3, #10
 8006746:	b29b      	uxth	r3, r3
 8006748:	4313      	orrs	r3, r2
 800674a:	b29a      	uxth	r2, r3
 800674c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800674e:	801a      	strh	r2, [r3, #0]
 8006750:	e024      	b.n	800679c <USB_EPStartXfer+0xb62>
 8006752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	785b      	ldrb	r3, [r3, #1]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d11c      	bne.n	800679c <USB_EPStartXfer+0xb62>
 8006762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006770:	b29b      	uxth	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006776:	4413      	add	r3, r2
 8006778:	673b      	str	r3, [r7, #112]	; 0x70
 800677a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	011a      	lsls	r2, r3, #4
 8006788:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800678a:	4413      	add	r3, r2
 800678c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006790:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006796:	b29a      	uxth	r2, r3
 8006798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800679c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	895b      	ldrh	r3, [r3, #10]
 80067a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6959      	ldr	r1, [r3, #20]
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067ca:	6800      	ldr	r0, [r0, #0]
 80067cc:	f000 ff14 	bl	80075f8 <USB_WritePMA>
 80067d0:	e0ca      	b.n	8006968 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d177      	bne.n	80068d2 <USB_EPStartXfer+0xc98>
 80067e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	461a      	mov	r2, r3
 8006800:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006802:	4413      	add	r3, r2
 8006804:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	011a      	lsls	r2, r3, #4
 8006814:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006816:	4413      	add	r3, r2
 8006818:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800681c:	67bb      	str	r3, [r7, #120]	; 0x78
 800681e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006828:	b29a      	uxth	r2, r3
 800682a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800682c:	801a      	strh	r2, [r3, #0]
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006832:	2b3e      	cmp	r3, #62	; 0x3e
 8006834:	d921      	bls.n	800687a <USB_EPStartXfer+0xc40>
 8006836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	2b00      	cmp	r3, #0
 800684a:	d104      	bne.n	8006856 <USB_EPStartXfer+0xc1c>
 800684c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006850:	3b01      	subs	r3, #1
 8006852:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29a      	uxth	r2, r3
 800685c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006860:	b29b      	uxth	r3, r3
 8006862:	029b      	lsls	r3, r3, #10
 8006864:	b29b      	uxth	r3, r3
 8006866:	4313      	orrs	r3, r2
 8006868:	b29b      	uxth	r3, r3
 800686a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006872:	b29a      	uxth	r2, r3
 8006874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	e05c      	b.n	8006934 <USB_EPStartXfer+0xcfa>
 800687a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <USB_EPStartXfer+0xc5e>
 8006882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29b      	uxth	r3, r3
 8006888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800688c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006890:	b29a      	uxth	r2, r3
 8006892:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006894:	801a      	strh	r2, [r3, #0]
 8006896:	e04d      	b.n	8006934 <USB_EPStartXfer+0xcfa>
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689c:	085b      	lsrs	r3, r3, #1
 800689e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <USB_EPStartXfer+0xc7e>
 80068ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068b2:	3301      	adds	r3, #1
 80068b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29a      	uxth	r2, r3
 80068be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	029b      	lsls	r3, r3, #10
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	4313      	orrs	r3, r2
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ce:	801a      	strh	r2, [r3, #0]
 80068d0:	e030      	b.n	8006934 <USB_EPStartXfer+0xcfa>
 80068d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d128      	bne.n	8006934 <USB_EPStartXfer+0xcfa>
 80068e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068fe:	b29b      	uxth	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006906:	4413      	add	r3, r2
 8006908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800690c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	011a      	lsls	r2, r3, #4
 800691a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800691e:	4413      	add	r3, r2
 8006920:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692c:	b29a      	uxth	r2, r3
 800692e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006932:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	891b      	ldrh	r3, [r3, #8]
 8006940:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6959      	ldr	r1, [r3, #20]
 8006950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006954:	b29b      	uxth	r3, r3
 8006956:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800695a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800695e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006962:	6800      	ldr	r0, [r0, #0]
 8006964:	f000 fe48 	bl	80075f8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	b29b      	uxth	r3, r3
 8006986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698e:	817b      	strh	r3, [r7, #10]
 8006990:	897b      	ldrh	r3, [r7, #10]
 8006992:	f083 0310 	eor.w	r3, r3, #16
 8006996:	817b      	strh	r3, [r7, #10]
 8006998:	897b      	ldrh	r3, [r7, #10]
 800699a:	f083 0320 	eor.w	r3, r3, #32
 800699e:	817b      	strh	r3, [r7, #10]
 80069a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	441a      	add	r2, r3
 80069ba:	897b      	ldrh	r3, [r7, #10]
 80069bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	8013      	strh	r3, [r2, #0]
 80069d0:	f000 bcde 	b.w	8007390 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80069d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	7b1b      	ldrb	r3, [r3, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f040 80bb 	bne.w	8006b5c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80069e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d917      	bls.n	8006a32 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a22:	1ad2      	subs	r2, r2, r3
 8006a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	619a      	str	r2, [r3, #24]
 8006a30:	e00e      	b.n	8006a50 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a74:	4413      	add	r3, r2
 8006a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	011a      	lsls	r2, r3, #4
 8006a88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aa8:	801a      	strh	r2, [r3, #0]
 8006aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aae:	2b3e      	cmp	r3, #62	; 0x3e
 8006ab0:	d924      	bls.n	8006afc <USB_EPStartXfer+0xec2>
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d104      	bne.n	8006ad2 <USB_EPStartXfer+0xe98>
 8006ac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006acc:	3b01      	subs	r3, #1
 8006ace:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	029b      	lsls	r3, r3, #10
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	f000 bc10 	b.w	800731c <USB_EPStartXfer+0x16e2>
 8006afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10c      	bne.n	8006b1e <USB_EPStartXfer+0xee4>
 8006b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	e3fe      	b.n	800731c <USB_EPStartXfer+0x16e2>
 8006b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b22:	085b      	lsrs	r3, r3, #1
 8006b24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d004      	beq.n	8006b3e <USB_EPStartXfer+0xf04>
 8006b34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b38:	3301      	adds	r3, #1
 8006b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	029b      	lsls	r3, r3, #10
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	4313      	orrs	r3, r2
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b58:	801a      	strh	r2, [r3, #0]
 8006b5a:	e3df      	b.n	800731c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	78db      	ldrb	r3, [r3, #3]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	f040 8218 	bne.w	8006f9e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	785b      	ldrb	r3, [r3, #1]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f040 809d 	bne.w	8006cba <USB_EPStartXfer+0x1080>
 8006b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	011a      	lsls	r2, r3, #4
 8006bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006bc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	2b3e      	cmp	r3, #62	; 0x3e
 8006be8:	d92b      	bls.n	8006c42 <USB_EPStartXfer+0x1008>
 8006bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	095b      	lsrs	r3, r3, #5
 8006bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	f003 031f 	and.w	r3, r3, #31
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <USB_EPStartXfer+0xfe0>
 8006c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c14:	3b01      	subs	r3, #1
 8006c16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	029b      	lsls	r3, r3, #10
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c3e:	801a      	strh	r2, [r3, #0]
 8006c40:	e070      	b.n	8006d24 <USB_EPStartXfer+0x10ea>
 8006c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10c      	bne.n	8006c6c <USB_EPStartXfer+0x1032>
 8006c52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	e05b      	b.n	8006d24 <USB_EPStartXfer+0x10ea>
 8006c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	085b      	lsrs	r3, r3, #1
 8006c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d004      	beq.n	8006c9c <USB_EPStartXfer+0x1062>
 8006c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c96:	3301      	adds	r3, #1
 8006c98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	029b      	lsls	r3, r3, #10
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	e034      	b.n	8006d24 <USB_EPStartXfer+0x10ea>
 8006cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d12c      	bne.n	8006d24 <USB_EPStartXfer+0x10ea>
 8006cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cee:	4413      	add	r3, r2
 8006cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	011a      	lsls	r2, r3, #4
 8006d02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d06:	4413      	add	r3, r2
 8006d08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f040 809d 	bne.w	8006e7e <USB_EPStartXfer+0x1244>
 8006d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	461a      	mov	r2, r3
 8006d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d68:	4413      	add	r3, r2
 8006d6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	011a      	lsls	r2, r3, #4
 8006d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d80:	4413      	add	r3, r2
 8006d82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b3e      	cmp	r3, #62	; 0x3e
 8006dac:	d92b      	bls.n	8006e06 <USB_EPStartXfer+0x11cc>
 8006dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <USB_EPStartXfer+0x11a4>
 8006dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006dde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	029b      	lsls	r3, r3, #10
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	4313      	orrs	r3, r2
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e02:	801a      	strh	r2, [r3, #0]
 8006e04:	e069      	b.n	8006eda <USB_EPStartXfer+0x12a0>
 8006e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10c      	bne.n	8006e30 <USB_EPStartXfer+0x11f6>
 8006e16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e2c:	801a      	strh	r2, [r3, #0]
 8006e2e:	e054      	b.n	8006eda <USB_EPStartXfer+0x12a0>
 8006e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	085b      	lsrs	r3, r3, #1
 8006e3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d004      	beq.n	8006e60 <USB_EPStartXfer+0x1226>
 8006e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	029b      	lsls	r3, r3, #10
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	4313      	orrs	r3, r2
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	e02d      	b.n	8006eda <USB_EPStartXfer+0x12a0>
 8006e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d125      	bne.n	8006eda <USB_EPStartXfer+0x12a0>
 8006e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	011a      	lsls	r2, r3, #4
 8006eb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ed8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 8218 	beq.w	800731c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f0c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <USB_EPStartXfer+0x12ea>
 8006f18:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10d      	bne.n	8006f40 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f24:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 81f5 	bne.w	800731c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f040 81ee 	bne.w	800731c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f66:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	441a      	add	r2, r3
 8006f84:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	8013      	strh	r3, [r2, #0]
 8006f9c:	e1be      	b.n	800731c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	78db      	ldrb	r3, [r3, #3]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	f040 81b4 	bne.w	8007318 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	699a      	ldr	r2, [r3, #24]
 8006fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d917      	bls.n	8006ffc <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	699a      	ldr	r2, [r3, #24]
 8006fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fec:	1ad2      	subs	r2, r2, r3
 8006fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	619a      	str	r2, [r3, #24]
 8006ffa:	e00e      	b.n	800701a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800700c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2200      	movs	r2, #0
 8007018:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800701a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b00      	cmp	r3, #0
 8007028:	f040 8085 	bne.w	8007136 <USB_EPStartXfer+0x14fc>
 800702c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800703a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007048:	b29b      	uxth	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007050:	4413      	add	r3, r2
 8007052:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	011a      	lsls	r2, r3, #4
 8007064:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007068:	4413      	add	r3, r2
 800706a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800706e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b29b      	uxth	r3, r3
 800707a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800707e:	b29a      	uxth	r2, r3
 8007080:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007084:	801a      	strh	r2, [r3, #0]
 8007086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708a:	2b3e      	cmp	r3, #62	; 0x3e
 800708c:	d923      	bls.n	80070d6 <USB_EPStartXfer+0x149c>
 800708e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <USB_EPStartXfer+0x1474>
 80070a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070a8:	3b01      	subs	r3, #1
 80070aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	029b      	lsls	r3, r3, #10
 80070be:	b29b      	uxth	r3, r3
 80070c0:	4313      	orrs	r3, r2
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070d2:	801a      	strh	r2, [r3, #0]
 80070d4:	e060      	b.n	8007198 <USB_EPStartXfer+0x155e>
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10c      	bne.n	80070f8 <USB_EPStartXfer+0x14be>
 80070de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070f4:	801a      	strh	r2, [r3, #0]
 80070f6:	e04f      	b.n	8007198 <USB_EPStartXfer+0x155e>
 80070f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fc:	085b      	lsrs	r3, r3, #1
 80070fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d004      	beq.n	8007118 <USB_EPStartXfer+0x14de>
 800710e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007112:	3301      	adds	r3, #1
 8007114:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007118:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	b29a      	uxth	r2, r3
 8007120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007124:	b29b      	uxth	r3, r3
 8007126:	029b      	lsls	r3, r3, #10
 8007128:	b29b      	uxth	r3, r3
 800712a:	4313      	orrs	r3, r2
 800712c:	b29a      	uxth	r2, r3
 800712e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007132:	801a      	strh	r2, [r3, #0]
 8007134:	e030      	b.n	8007198 <USB_EPStartXfer+0x155e>
 8007136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	785b      	ldrb	r3, [r3, #1]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d128      	bne.n	8007198 <USB_EPStartXfer+0x155e>
 8007146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007162:	b29b      	uxth	r3, r3
 8007164:	461a      	mov	r2, r3
 8007166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800716a:	4413      	add	r3, r2
 800716c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	011a      	lsls	r2, r3, #4
 800717e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007182:	4413      	add	r3, r2
 8007184:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800718c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007190:	b29a      	uxth	r2, r3
 8007192:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007196:	801a      	strh	r2, [r3, #0]
 8007198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	785b      	ldrb	r3, [r3, #1]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f040 8085 	bne.w	80072c2 <USB_EPStartXfer+0x1688>
 80071b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	461a      	mov	r2, r3
 80071d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80071dc:	4413      	add	r3, r2
 80071de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	011a      	lsls	r2, r3, #4
 80071f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80071f4:	4413      	add	r3, r2
 80071f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	b29b      	uxth	r3, r3
 8007206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800720a:	b29a      	uxth	r2, r3
 800720c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007210:	801a      	strh	r2, [r3, #0]
 8007212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007216:	2b3e      	cmp	r3, #62	; 0x3e
 8007218:	d923      	bls.n	8007262 <USB_EPStartXfer+0x1628>
 800721a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800721e:	095b      	lsrs	r3, r3, #5
 8007220:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007228:	f003 031f 	and.w	r3, r3, #31
 800722c:	2b00      	cmp	r3, #0
 800722e:	d104      	bne.n	800723a <USB_EPStartXfer+0x1600>
 8007230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007234:	3b01      	subs	r3, #1
 8007236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800723a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	b29a      	uxth	r2, r3
 8007242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007246:	b29b      	uxth	r3, r3
 8007248:	029b      	lsls	r3, r3, #10
 800724a:	b29b      	uxth	r3, r3
 800724c:	4313      	orrs	r3, r2
 800724e:	b29b      	uxth	r3, r3
 8007250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007258:	b29a      	uxth	r2, r3
 800725a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800725e:	801a      	strh	r2, [r3, #0]
 8007260:	e05c      	b.n	800731c <USB_EPStartXfer+0x16e2>
 8007262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10c      	bne.n	8007284 <USB_EPStartXfer+0x164a>
 800726a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29b      	uxth	r3, r3
 8007272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800727a:	b29a      	uxth	r2, r3
 800727c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007280:	801a      	strh	r2, [r3, #0]
 8007282:	e04b      	b.n	800731c <USB_EPStartXfer+0x16e2>
 8007284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007288:	085b      	lsrs	r3, r3, #1
 800728a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800728e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d004      	beq.n	80072a4 <USB_EPStartXfer+0x166a>
 800729a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800729e:	3301      	adds	r3, #1
 80072a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	029b      	lsls	r3, r3, #10
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	4313      	orrs	r3, r2
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	e02c      	b.n	800731c <USB_EPStartXfer+0x16e2>
 80072c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	785b      	ldrb	r3, [r3, #1]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d124      	bne.n	800731c <USB_EPStartXfer+0x16e2>
 80072d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	461a      	mov	r2, r3
 80072e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072e8:	4413      	add	r3, r2
 80072ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	011a      	lsls	r2, r3, #4
 80072fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007300:	4413      	add	r3, r2
 8007302:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007306:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800730a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800730e:	b29a      	uxth	r2, r3
 8007310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007314:	801a      	strh	r2, [r3, #0]
 8007316:	e001      	b.n	800731c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e03a      	b.n	8007392 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800731c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007320:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800733e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007342:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007346:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800734a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800734e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007352:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007356:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800735a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800735e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	441a      	add	r2, r3
 8007378:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800737c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738c:	b29b      	uxth	r3, r3
 800738e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	785b      	ldrb	r3, [r3, #1]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d020      	beq.n	80073f0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c4:	81bb      	strh	r3, [r7, #12]
 80073c6:	89bb      	ldrh	r3, [r7, #12]
 80073c8:	f083 0310 	eor.w	r3, r3, #16
 80073cc:	81bb      	strh	r3, [r7, #12]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	441a      	add	r2, r3
 80073d8:	89bb      	ldrh	r3, [r7, #12]
 80073da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	8013      	strh	r3, [r2, #0]
 80073ee:	e01f      	b.n	8007430 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007406:	81fb      	strh	r3, [r7, #14]
 8007408:	89fb      	ldrh	r3, [r7, #14]
 800740a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800740e:	81fb      	strh	r3, [r7, #14]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	441a      	add	r2, r3
 800741a:	89fb      	ldrh	r3, [r7, #14]
 800741c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742c:	b29b      	uxth	r3, r3
 800742e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800743e:	b480      	push	{r7}
 8007440:	b087      	sub	sp, #28
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	7b1b      	ldrb	r3, [r3, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f040 809d 	bne.w	800758c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d04c      	beq.n	80074f4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	823b      	strh	r3, [r7, #16]
 8007468:	8a3b      	ldrh	r3, [r7, #16]
 800746a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	d01b      	beq.n	80074aa <USB_EPClearStall+0x6c>
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007488:	81fb      	strh	r3, [r7, #14]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	441a      	add	r2, r3
 8007494:	89fb      	ldrh	r3, [r7, #14]
 8007496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800749a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	78db      	ldrb	r3, [r3, #3]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d06c      	beq.n	800758c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c8:	81bb      	strh	r3, [r7, #12]
 80074ca:	89bb      	ldrh	r3, [r7, #12]
 80074cc:	f083 0320 	eor.w	r3, r3, #32
 80074d0:	81bb      	strh	r3, [r7, #12]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	441a      	add	r2, r3
 80074dc:	89bb      	ldrh	r3, [r7, #12]
 80074de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	8013      	strh	r3, [r2, #0]
 80074f2:	e04b      	b.n	800758c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	82fb      	strh	r3, [r7, #22]
 8007502:	8afb      	ldrh	r3, [r7, #22]
 8007504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01b      	beq.n	8007544 <USB_EPClearStall+0x106>
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	82bb      	strh	r3, [r7, #20]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	441a      	add	r2, r3
 800752e:	8abb      	ldrh	r3, [r7, #20]
 8007530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800753c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007540:	b29b      	uxth	r3, r3
 8007542:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	b29b      	uxth	r3, r3
 8007552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755a:	827b      	strh	r3, [r7, #18]
 800755c:	8a7b      	ldrh	r3, [r7, #18]
 800755e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007562:	827b      	strh	r3, [r7, #18]
 8007564:	8a7b      	ldrh	r3, [r7, #18]
 8007566:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800756a:	827b      	strh	r3, [r7, #18]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	441a      	add	r2, r3
 8007576:	8a7b      	ldrh	r3, [r7, #18]
 8007578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007588:	b29b      	uxth	r3, r3
 800758a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	460b      	mov	r3, r1
 80075a4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2280      	movs	r2, #128	; 0x80
 80075b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80075ea:	68fb      	ldr	r3, [r7, #12]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b08b      	sub	sp, #44	; 0x2c
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	4611      	mov	r1, r2
 8007604:	461a      	mov	r2, r3
 8007606:	460b      	mov	r3, r1
 8007608:	80fb      	strh	r3, [r7, #6]
 800760a:	4613      	mov	r3, r2
 800760c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800760e:	88bb      	ldrh	r3, [r7, #4]
 8007610:	3301      	adds	r3, #1
 8007612:	085b      	lsrs	r3, r3, #1
 8007614:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	005a      	lsls	r2, r3, #1
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800762a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	627b      	str	r3, [r7, #36]	; 0x24
 8007630:	e01e      	b.n	8007670 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	3301      	adds	r3, #1
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	b21a      	sxth	r2, r3
 8007642:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007646:	4313      	orrs	r3, r2
 8007648:	b21b      	sxth	r3, r3
 800764a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	8a7a      	ldrh	r2, [r7, #18]
 8007650:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	3302      	adds	r3, #2
 8007656:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	3302      	adds	r3, #2
 800765c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	3301      	adds	r3, #1
 8007662:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	3301      	adds	r3, #1
 8007668:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	3b01      	subs	r3, #1
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1dd      	bne.n	8007632 <USB_WritePMA+0x3a>
  }
}
 8007676:	bf00      	nop
 8007678:	bf00      	nop
 800767a:	372c      	adds	r7, #44	; 0x2c
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007684:	b480      	push	{r7}
 8007686:	b08b      	sub	sp, #44	; 0x2c
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	4611      	mov	r1, r2
 8007690:	461a      	mov	r2, r3
 8007692:	460b      	mov	r3, r1
 8007694:	80fb      	strh	r3, [r7, #6]
 8007696:	4613      	mov	r3, r2
 8007698:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800769a:	88bb      	ldrh	r3, [r7, #4]
 800769c:	085b      	lsrs	r3, r3, #1
 800769e:	b29b      	uxth	r3, r3
 80076a0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	005a      	lsls	r2, r3, #1
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076b6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24
 80076bc:	e01b      	b.n	80076f6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	3302      	adds	r3, #2
 80076ca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	3301      	adds	r3, #1
 80076d8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	0a1b      	lsrs	r3, r3, #8
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	3301      	adds	r3, #1
 80076e8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	3302      	adds	r3, #2
 80076ee:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	3b01      	subs	r3, #1
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1e0      	bne.n	80076be <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80076fc:	88bb      	ldrh	r3, [r7, #4]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	b29b      	uxth	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d007      	beq.n	8007718 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	b29b      	uxth	r3, r3
 800770e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	b2da      	uxtb	r2, r3
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	701a      	strb	r2, [r3, #0]
  }
}
 8007718:	bf00      	nop
 800771a:	372c      	adds	r7, #44	; 0x2c
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7c1b      	ldrb	r3, [r3, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d115      	bne.n	8007768 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800773c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007740:	2202      	movs	r2, #2
 8007742:	2181      	movs	r1, #129	; 0x81
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f001 feb8 	bl	80094ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007754:	2202      	movs	r2, #2
 8007756:	2101      	movs	r1, #1
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 feae 	bl	80094ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007766:	e012      	b.n	800778e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007768:	2340      	movs	r3, #64	; 0x40
 800776a:	2202      	movs	r2, #2
 800776c:	2181      	movs	r1, #129	; 0x81
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 fea3 	bl	80094ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800777a:	2340      	movs	r3, #64	; 0x40
 800777c:	2202      	movs	r2, #2
 800777e:	2101      	movs	r1, #1
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fe9a 	bl	80094ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800778e:	2308      	movs	r3, #8
 8007790:	2203      	movs	r2, #3
 8007792:	2182      	movs	r1, #130	; 0x82
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 fe90 	bl	80094ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077a4:	f001 ffb2 	bl	800970c <USBD_static_malloc>
 80077a8:	4602      	mov	r2, r0
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80077ba:	2301      	movs	r3, #1
 80077bc:	73fb      	strb	r3, [r7, #15]
 80077be:	e026      	b.n	800780e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2200      	movs	r2, #0
 80077de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	7c1b      	ldrb	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f4:	2101      	movs	r1, #1
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f001 ff51 	bl	800969e <USBD_LL_PrepareReceive>
 80077fc:	e007      	b.n	800780e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007804:	2340      	movs	r3, #64	; 0x40
 8007806:	2101      	movs	r1, #1
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 ff48 	bl	800969e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007828:	2181      	movs	r1, #129	; 0x81
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 fe6b 	bl	8009506 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007836:	2101      	movs	r1, #1
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f001 fe64 	bl	8009506 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007846:	2182      	movs	r1, #130	; 0x82
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 fe5c 	bl	8009506 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00e      	beq.n	800787c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786e:	4618      	mov	r0, r3
 8007870:	f001 ff5a 	bl	8009728 <USBD_static_free>
    pdev->pClassData = NULL;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b086      	sub	sp, #24
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007896:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d039      	beq.n	8007924 <USBD_CDC_Setup+0x9e>
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	d17f      	bne.n	80079b4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	88db      	ldrh	r3, [r3, #6]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d029      	beq.n	8007910 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b25b      	sxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	da11      	bge.n	80078ea <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80078d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	88d2      	ldrh	r2, [r2, #6]
 80078d8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80078da:	6939      	ldr	r1, [r7, #16]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	88db      	ldrh	r3, [r3, #6]
 80078e0:	461a      	mov	r2, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 fa13 	bl	8008d0e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80078e8:	e06b      	b.n	80079c2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	785a      	ldrb	r2, [r3, #1]
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	88db      	ldrh	r3, [r3, #6]
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007900:	6939      	ldr	r1, [r7, #16]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	88db      	ldrh	r3, [r3, #6]
 8007906:	461a      	mov	r2, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 fa2e 	bl	8008d6a <USBD_CtlPrepareRx>
      break;
 800790e:	e058      	b.n	80079c2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	7850      	ldrb	r0, [r2, #1]
 800791c:	2200      	movs	r2, #0
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	4798      	blx	r3
      break;
 8007922:	e04e      	b.n	80079c2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	785b      	ldrb	r3, [r3, #1]
 8007928:	2b0b      	cmp	r3, #11
 800792a:	d02e      	beq.n	800798a <USBD_CDC_Setup+0x104>
 800792c:	2b0b      	cmp	r3, #11
 800792e:	dc38      	bgt.n	80079a2 <USBD_CDC_Setup+0x11c>
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <USBD_CDC_Setup+0xb4>
 8007934:	2b0a      	cmp	r3, #10
 8007936:	d014      	beq.n	8007962 <USBD_CDC_Setup+0xdc>
 8007938:	e033      	b.n	80079a2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007940:	2b03      	cmp	r3, #3
 8007942:	d107      	bne.n	8007954 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007944:	f107 030c 	add.w	r3, r7, #12
 8007948:	2202      	movs	r2, #2
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 f9de 	bl	8008d0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007952:	e02e      	b.n	80079b2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 f96e 	bl	8008c38 <USBD_CtlError>
            ret = USBD_FAIL;
 800795c:	2302      	movs	r3, #2
 800795e:	75fb      	strb	r3, [r7, #23]
          break;
 8007960:	e027      	b.n	80079b2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007968:	2b03      	cmp	r3, #3
 800796a:	d107      	bne.n	800797c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800796c:	f107 030f 	add.w	r3, r7, #15
 8007970:	2201      	movs	r2, #1
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 f9ca 	bl	8008d0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800797a:	e01a      	b.n	80079b2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 f95a 	bl	8008c38 <USBD_CtlError>
            ret = USBD_FAIL;
 8007984:	2302      	movs	r3, #2
 8007986:	75fb      	strb	r3, [r7, #23]
          break;
 8007988:	e013      	b.n	80079b2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007990:	2b03      	cmp	r3, #3
 8007992:	d00d      	beq.n	80079b0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 f94e 	bl	8008c38 <USBD_CtlError>
            ret = USBD_FAIL;
 800799c:	2302      	movs	r3, #2
 800799e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80079a0:	e006      	b.n	80079b0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 f947 	bl	8008c38 <USBD_CtlError>
          ret = USBD_FAIL;
 80079aa:	2302      	movs	r3, #2
 80079ac:	75fb      	strb	r3, [r7, #23]
          break;
 80079ae:	e000      	b.n	80079b2 <USBD_CDC_Setup+0x12c>
          break;
 80079b0:	bf00      	nop
      }
      break;
 80079b2:	e006      	b.n	80079c2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80079b4:	6839      	ldr	r1, [r7, #0]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 f93e 	bl	8008c38 <USBD_CtlError>
      ret = USBD_FAIL;
 80079bc:	2302      	movs	r3, #2
 80079be:	75fb      	strb	r3, [r7, #23]
      break;
 80079c0:	bf00      	nop
  }

  return ret;
 80079c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079de:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079e6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d03a      	beq.n	8007a68 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80079f2:	78fa      	ldrb	r2, [r7, #3]
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	331c      	adds	r3, #28
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d029      	beq.n	8007a5c <USBD_CDC_DataIn+0x90>
 8007a08:	78fa      	ldrb	r2, [r7, #3]
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	331c      	adds	r3, #28
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	78f9      	ldrb	r1, [r7, #3]
 8007a1c:	68b8      	ldr	r0, [r7, #8]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	440b      	add	r3, r1
 8007a24:	00db      	lsls	r3, r3, #3
 8007a26:	4403      	add	r3, r0
 8007a28:	3338      	adds	r3, #56	; 0x38
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a30:	fb01 f303 	mul.w	r3, r1, r3
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d110      	bne.n	8007a5c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007a3a:	78fa      	ldrb	r2, [r7, #3]
 8007a3c:	6879      	ldr	r1, [r7, #4]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	440b      	add	r3, r1
 8007a48:	331c      	adds	r3, #28
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a4e:	78f9      	ldrb	r1, [r7, #3]
 8007a50:	2300      	movs	r3, #0
 8007a52:	2200      	movs	r2, #0
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fdff 	bl	8009658 <USBD_LL_Transmit>
 8007a5a:	e003      	b.n	8007a64 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	e000      	b.n	8007a6a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007a68:	2302      	movs	r3, #2
  }
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 fe2a 	bl	80096e4 <USBD_LL_GetRxDataSize>
 8007a90:	4602      	mov	r2, r0
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00d      	beq.n	8007abe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4798      	blx	r3

    return USBD_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	e000      	b.n	8007ac0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007abe:	2302      	movs	r3, #2
  }
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d015      	beq.n	8007b0e <USBD_CDC_EP0_RxReady+0x46>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ae8:	2bff      	cmp	r3, #255	; 0xff
 8007aea:	d010      	beq.n	8007b0e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007afa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b02:	b292      	uxth	r2, r2
 8007b04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	22ff      	movs	r2, #255	; 0xff
 8007b0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2243      	movs	r2, #67	; 0x43
 8007b24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007b26:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	20000094 	.word	0x20000094

08007b38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2243      	movs	r2, #67	; 0x43
 8007b44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007b46:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	20000050 	.word	0x20000050

08007b58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2243      	movs	r2, #67	; 0x43
 8007b64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007b66:	4b03      	ldr	r3, [pc, #12]	; (8007b74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	200000d8 	.word	0x200000d8

08007b78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	220a      	movs	r2, #10
 8007b84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007b86:	4b03      	ldr	r3, [pc, #12]	; (8007b94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	2000000c 	.word	0x2000000c

08007b98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b087      	sub	sp, #28
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	60f8      	str	r0, [r7, #12]
 8007bce:	60b9      	str	r1, [r7, #8]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bda:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007be4:	88fa      	ldrh	r2, [r7, #6]
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	371c      	adds	r7, #28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c0a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01c      	beq.n	8007c76 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d115      	bne.n	8007c72 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2181      	movs	r1, #129	; 0x81
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 fcf5 	bl	8009658 <USBD_LL_Transmit>

      return USBD_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e002      	b.n	8007c78 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007c76:	2302      	movs	r3, #2
  }
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d017      	beq.n	8007cca <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	7c1b      	ldrb	r3, [r3, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d109      	bne.n	8007cb6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cac:	2101      	movs	r1, #1
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f001 fcf5 	bl	800969e <USBD_LL_PrepareReceive>
 8007cb4:	e007      	b.n	8007cc6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cbc:	2340      	movs	r3, #64	; 0x40
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 fcec 	bl	800969e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e000      	b.n	8007ccc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007cca:	2302      	movs	r3, #2
  }
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e01a      	b.n	8007d22 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	79fa      	ldrb	r2, [r7, #7]
 8007d18:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f001 fb58 	bl	80093d0 <USBD_LL_Init>

  return USBD_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b085      	sub	sp, #20
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d006      	beq.n	8007d4c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]
 8007d4a:	e001      	b.n	8007d50 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 fb8c 	bl	8009484 <USBD_LL_Start>

  return USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007d98:	2302      	movs	r3, #2
 8007d9a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00c      	beq.n	8007dc0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	78fa      	ldrb	r2, [r7, #3]
 8007db0:	4611      	mov	r1, r2
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b082      	sub	sp, #8
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	78fa      	ldrb	r2, [r7, #3]
 8007de0:	4611      	mov	r1, r2
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	4798      	blx	r3

  return USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fedb 	bl	8008bbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e16:	461a      	mov	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e24:	f003 031f 	and.w	r3, r3, #31
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d016      	beq.n	8007e5a <USBD_LL_SetupStage+0x6a>
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d81c      	bhi.n	8007e6a <USBD_LL_SetupStage+0x7a>
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <USBD_LL_SetupStage+0x4a>
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d008      	beq.n	8007e4a <USBD_LL_SetupStage+0x5a>
 8007e38:	e017      	b.n	8007e6a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f9ce 	bl	80081e4 <USBD_StdDevReq>
      break;
 8007e48:	e01a      	b.n	8007e80 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fa30 	bl	80082b8 <USBD_StdItfReq>
      break;
 8007e58:	e012      	b.n	8007e80 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fa70 	bl	8008348 <USBD_StdEPReq>
      break;
 8007e68:	e00a      	b.n	8007e80 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fb63 	bl	8009544 <USBD_LL_StallEP>
      break;
 8007e7e:	bf00      	nop
  }

  return USBD_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b086      	sub	sp, #24
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	460b      	mov	r3, r1
 8007e94:	607a      	str	r2, [r7, #4]
 8007e96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e98:	7afb      	ldrb	r3, [r7, #11]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d14b      	bne.n	8007f36 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ea4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d134      	bne.n	8007f1a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d919      	bls.n	8007ef0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	1ad2      	subs	r2, r2, r3
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d203      	bcs.n	8007ede <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	e002      	b.n	8007ee4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	6879      	ldr	r1, [r7, #4]
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 ff5c 	bl	8008da6 <USBD_CtlContinueRx>
 8007eee:	e038      	b.n	8007f62 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00a      	beq.n	8007f12 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d105      	bne.n	8007f12 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 ff59 	bl	8008dca <USBD_CtlSendStatus>
 8007f18:	e023      	b.n	8007f62 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f20:	2b05      	cmp	r3, #5
 8007f22:	d11e      	bne.n	8007f62 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f001 fb08 	bl	8009544 <USBD_LL_StallEP>
 8007f34:	e015      	b.n	8007f62 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00d      	beq.n	8007f5e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d108      	bne.n	8007f5e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	7afa      	ldrb	r2, [r7, #11]
 8007f56:	4611      	mov	r1, r2
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	4798      	blx	r3
 8007f5c:	e001      	b.n	8007f62 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e000      	b.n	8007f64 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	460b      	mov	r3, r1
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007f7a:	7afb      	ldrb	r3, [r7, #11]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d17f      	bne.n	8008080 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	3314      	adds	r3, #20
 8007f84:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d15c      	bne.n	800804a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d915      	bls.n	8007fc8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	1ad2      	subs	r2, r2, r3
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fec6 	bl	8008d46 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fba:	2300      	movs	r3, #0
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f001 fb6c 	bl	800969e <USBD_LL_PrepareReceive>
 8007fc6:	e04e      	b.n	8008066 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	6912      	ldr	r2, [r2, #16]
 8007fd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fd4:	fb01 f202 	mul.w	r2, r1, r2
 8007fd8:	1a9b      	subs	r3, r3, r2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d11c      	bne.n	8008018 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d316      	bcc.n	8008018 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	689a      	ldr	r2, [r3, #8]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d20f      	bcs.n	8008018 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 fea2 	bl	8008d46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800800a:	2300      	movs	r3, #0
 800800c:	2200      	movs	r2, #0
 800800e:	2100      	movs	r1, #0
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f001 fb44 	bl	800969e <USBD_LL_PrepareReceive>
 8008016:	e026      	b.n	8008066 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800802a:	2b03      	cmp	r3, #3
 800802c:	d105      	bne.n	800803a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800803a:	2180      	movs	r1, #128	; 0x80
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f001 fa81 	bl	8009544 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 fed4 	bl	8008df0 <USBD_CtlReceiveStatus>
 8008048:	e00d      	b.n	8008066 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008050:	2b04      	cmp	r3, #4
 8008052:	d004      	beq.n	800805e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800805a:	2b00      	cmp	r3, #0
 800805c:	d103      	bne.n	8008066 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800805e:	2180      	movs	r1, #128	; 0x80
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f001 fa6f 	bl	8009544 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800806c:	2b01      	cmp	r3, #1
 800806e:	d11d      	bne.n	80080ac <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff fe80 	bl	8007d76 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800807e:	e015      	b.n	80080ac <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00d      	beq.n	80080a8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008092:	2b03      	cmp	r3, #3
 8008094:	d108      	bne.n	80080a8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	7afa      	ldrb	r2, [r7, #11]
 80080a0:	4611      	mov	r1, r2
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	4798      	blx	r3
 80080a6:	e001      	b.n	80080ac <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080a8:	2302      	movs	r3, #2
 80080aa:	e000      	b.n	80080ae <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080be:	2340      	movs	r3, #64	; 0x40
 80080c0:	2200      	movs	r2, #0
 80080c2:	2100      	movs	r1, #0
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 f9f8 	bl	80094ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2240      	movs	r2, #64	; 0x40
 80080d6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080da:	2340      	movs	r3, #64	; 0x40
 80080dc:	2200      	movs	r2, #0
 80080de:	2180      	movs	r1, #128	; 0x80
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f001 f9ea 	bl	80094ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2240      	movs	r2, #64	; 0x40
 80080f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	6852      	ldr	r2, [r2, #4]
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	4611      	mov	r1, r2
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
  }

  return USBD_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2204      	movs	r2, #4
 8008170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008190:	2b04      	cmp	r3, #4
 8008192:	d105      	bne.n	80081a0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d10b      	bne.n	80081d8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d005      	beq.n	80081d8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081fa:	2b40      	cmp	r3, #64	; 0x40
 80081fc:	d005      	beq.n	800820a <USBD_StdDevReq+0x26>
 80081fe:	2b40      	cmp	r3, #64	; 0x40
 8008200:	d84f      	bhi.n	80082a2 <USBD_StdDevReq+0xbe>
 8008202:	2b00      	cmp	r3, #0
 8008204:	d009      	beq.n	800821a <USBD_StdDevReq+0x36>
 8008206:	2b20      	cmp	r3, #32
 8008208:	d14b      	bne.n	80082a2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	4798      	blx	r3
      break;
 8008218:	e048      	b.n	80082ac <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	2b09      	cmp	r3, #9
 8008220:	d839      	bhi.n	8008296 <USBD_StdDevReq+0xb2>
 8008222:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <USBD_StdDevReq+0x44>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	08008279 	.word	0x08008279
 800822c:	0800828d 	.word	0x0800828d
 8008230:	08008297 	.word	0x08008297
 8008234:	08008283 	.word	0x08008283
 8008238:	08008297 	.word	0x08008297
 800823c:	0800825b 	.word	0x0800825b
 8008240:	08008251 	.word	0x08008251
 8008244:	08008297 	.word	0x08008297
 8008248:	0800826f 	.word	0x0800826f
 800824c:	08008265 	.word	0x08008265
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f9dc 	bl	8008610 <USBD_GetDescriptor>
          break;
 8008258:	e022      	b.n	80082a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fb3f 	bl	80088e0 <USBD_SetAddress>
          break;
 8008262:	e01d      	b.n	80082a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fb7e 	bl	8008968 <USBD_SetConfig>
          break;
 800826c:	e018      	b.n	80082a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fc07 	bl	8008a84 <USBD_GetConfig>
          break;
 8008276:	e013      	b.n	80082a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fc37 	bl	8008aee <USBD_GetStatus>
          break;
 8008280:	e00e      	b.n	80082a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fc65 	bl	8008b54 <USBD_SetFeature>
          break;
 800828a:	e009      	b.n	80082a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fc74 	bl	8008b7c <USBD_ClrFeature>
          break;
 8008294:	e004      	b.n	80082a0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fccd 	bl	8008c38 <USBD_CtlError>
          break;
 800829e:	bf00      	nop
      }
      break;
 80082a0:	e004      	b.n	80082ac <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fcc7 	bl	8008c38 <USBD_CtlError>
      break;
 80082aa:	bf00      	nop
  }

  return ret;
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop

080082b8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082ce:	2b40      	cmp	r3, #64	; 0x40
 80082d0:	d005      	beq.n	80082de <USBD_StdItfReq+0x26>
 80082d2:	2b40      	cmp	r3, #64	; 0x40
 80082d4:	d82e      	bhi.n	8008334 <USBD_StdItfReq+0x7c>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <USBD_StdItfReq+0x26>
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d12a      	bne.n	8008334 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e4:	3b01      	subs	r3, #1
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d81d      	bhi.n	8008326 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	889b      	ldrh	r3, [r3, #4]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d813      	bhi.n	800831c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	4798      	blx	r3
 8008302:	4603      	mov	r3, r0
 8008304:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	88db      	ldrh	r3, [r3, #6]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d110      	bne.n	8008330 <USBD_StdItfReq+0x78>
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10d      	bne.n	8008330 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fd58 	bl	8008dca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800831a:	e009      	b.n	8008330 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fc8a 	bl	8008c38 <USBD_CtlError>
          break;
 8008324:	e004      	b.n	8008330 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fc85 	bl	8008c38 <USBD_CtlError>
          break;
 800832e:	e000      	b.n	8008332 <USBD_StdItfReq+0x7a>
          break;
 8008330:	bf00      	nop
      }
      break;
 8008332:	e004      	b.n	800833e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fc7e 	bl	8008c38 <USBD_CtlError>
      break;
 800833c:	bf00      	nop
  }

  return USBD_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	889b      	ldrh	r3, [r3, #4]
 800835a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008364:	2b40      	cmp	r3, #64	; 0x40
 8008366:	d007      	beq.n	8008378 <USBD_StdEPReq+0x30>
 8008368:	2b40      	cmp	r3, #64	; 0x40
 800836a:	f200 8146 	bhi.w	80085fa <USBD_StdEPReq+0x2b2>
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <USBD_StdEPReq+0x40>
 8008372:	2b20      	cmp	r3, #32
 8008374:	f040 8141 	bne.w	80085fa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	4798      	blx	r3
      break;
 8008386:	e13d      	b.n	8008604 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008390:	2b20      	cmp	r3, #32
 8008392:	d10a      	bne.n	80083aa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	4798      	blx	r3
 80083a2:	4603      	mov	r3, r0
 80083a4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	e12d      	b.n	8008606 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	785b      	ldrb	r3, [r3, #1]
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d007      	beq.n	80083c2 <USBD_StdEPReq+0x7a>
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	f300 811b 	bgt.w	80085ee <USBD_StdEPReq+0x2a6>
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d072      	beq.n	80084a2 <USBD_StdEPReq+0x15a>
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d03a      	beq.n	8008436 <USBD_StdEPReq+0xee>
 80083c0:	e115      	b.n	80085ee <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d002      	beq.n	80083d2 <USBD_StdEPReq+0x8a>
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d015      	beq.n	80083fc <USBD_StdEPReq+0xb4>
 80083d0:	e02b      	b.n	800842a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083d2:	7bbb      	ldrb	r3, [r7, #14]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00c      	beq.n	80083f2 <USBD_StdEPReq+0xaa>
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	2b80      	cmp	r3, #128	; 0x80
 80083dc:	d009      	beq.n	80083f2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f001 f8ae 	bl	8009544 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80083e8:	2180      	movs	r1, #128	; 0x80
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f001 f8aa 	bl	8009544 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083f0:	e020      	b.n	8008434 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fc1f 	bl	8008c38 <USBD_CtlError>
              break;
 80083fa:	e01b      	b.n	8008434 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	885b      	ldrh	r3, [r3, #2]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10e      	bne.n	8008422 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00b      	beq.n	8008422 <USBD_StdEPReq+0xda>
 800840a:	7bbb      	ldrb	r3, [r7, #14]
 800840c:	2b80      	cmp	r3, #128	; 0x80
 800840e:	d008      	beq.n	8008422 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	88db      	ldrh	r3, [r3, #6]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d104      	bne.n	8008422 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f001 f891 	bl	8009544 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fcd1 	bl	8008dca <USBD_CtlSendStatus>

              break;
 8008428:	e004      	b.n	8008434 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fc03 	bl	8008c38 <USBD_CtlError>
              break;
 8008432:	bf00      	nop
          }
          break;
 8008434:	e0e0      	b.n	80085f8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800843c:	2b02      	cmp	r3, #2
 800843e:	d002      	beq.n	8008446 <USBD_StdEPReq+0xfe>
 8008440:	2b03      	cmp	r3, #3
 8008442:	d015      	beq.n	8008470 <USBD_StdEPReq+0x128>
 8008444:	e026      	b.n	8008494 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00c      	beq.n	8008466 <USBD_StdEPReq+0x11e>
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	2b80      	cmp	r3, #128	; 0x80
 8008450:	d009      	beq.n	8008466 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 f874 	bl	8009544 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800845c:	2180      	movs	r1, #128	; 0x80
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 f870 	bl	8009544 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008464:	e01c      	b.n	80084a0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fbe5 	bl	8008c38 <USBD_CtlError>
              break;
 800846e:	e017      	b.n	80084a0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	885b      	ldrh	r3, [r3, #2]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d112      	bne.n	800849e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008478:	7bbb      	ldrb	r3, [r7, #14]
 800847a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800847e:	2b00      	cmp	r3, #0
 8008480:	d004      	beq.n	800848c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f001 f87b 	bl	8009582 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fc9c 	bl	8008dca <USBD_CtlSendStatus>
              }
              break;
 8008492:	e004      	b.n	800849e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fbce 	bl	8008c38 <USBD_CtlError>
              break;
 800849c:	e000      	b.n	80084a0 <USBD_StdEPReq+0x158>
              break;
 800849e:	bf00      	nop
          }
          break;
 80084a0:	e0aa      	b.n	80085f8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d002      	beq.n	80084b2 <USBD_StdEPReq+0x16a>
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d032      	beq.n	8008516 <USBD_StdEPReq+0x1ce>
 80084b0:	e097      	b.n	80085e2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d007      	beq.n	80084c8 <USBD_StdEPReq+0x180>
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
 80084ba:	2b80      	cmp	r3, #128	; 0x80
 80084bc:	d004      	beq.n	80084c8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fbb9 	bl	8008c38 <USBD_CtlError>
                break;
 80084c6:	e091      	b.n	80085ec <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	da0b      	bge.n	80084e8 <USBD_StdEPReq+0x1a0>
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	3310      	adds	r3, #16
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	3304      	adds	r3, #4
 80084e6:	e00b      	b.n	8008500 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	4413      	add	r3, r2
 80084fe:	3304      	adds	r3, #4
 8008500:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2200      	movs	r2, #0
 8008506:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	2202      	movs	r2, #2
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fbfd 	bl	8008d0e <USBD_CtlSendData>
              break;
 8008514:	e06a      	b.n	80085ec <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800851a:	2b00      	cmp	r3, #0
 800851c:	da11      	bge.n	8008542 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800851e:	7bbb      	ldrb	r3, [r7, #14]
 8008520:	f003 020f 	and.w	r2, r3, #15
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	4613      	mov	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	440b      	add	r3, r1
 8008530:	3318      	adds	r3, #24
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d117      	bne.n	8008568 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fb7c 	bl	8008c38 <USBD_CtlError>
                  break;
 8008540:	e054      	b.n	80085ec <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008542:	7bbb      	ldrb	r3, [r7, #14]
 8008544:	f003 020f 	and.w	r2, r3, #15
 8008548:	6879      	ldr	r1, [r7, #4]
 800854a:	4613      	mov	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4413      	add	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	440b      	add	r3, r1
 8008554:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d104      	bne.n	8008568 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fb69 	bl	8008c38 <USBD_CtlError>
                  break;
 8008566:	e041      	b.n	80085ec <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800856c:	2b00      	cmp	r3, #0
 800856e:	da0b      	bge.n	8008588 <USBD_StdEPReq+0x240>
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	3310      	adds	r3, #16
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	4413      	add	r3, r2
 8008584:	3304      	adds	r3, #4
 8008586:	e00b      	b.n	80085a0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	3304      	adds	r3, #4
 80085a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <USBD_StdEPReq+0x266>
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	2b80      	cmp	r3, #128	; 0x80
 80085ac:	d103      	bne.n	80085b6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	e00e      	b.n	80085d4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 f800 	bl	80095c0 <USBD_LL_IsStallEP>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2201      	movs	r2, #1
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	e002      	b.n	80085d4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2202      	movs	r2, #2
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fb97 	bl	8008d0e <USBD_CtlSendData>
              break;
 80085e0:	e004      	b.n	80085ec <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fb27 	bl	8008c38 <USBD_CtlError>
              break;
 80085ea:	bf00      	nop
          }
          break;
 80085ec:	e004      	b.n	80085f8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fb21 	bl	8008c38 <USBD_CtlError>
          break;
 80085f6:	bf00      	nop
      }
      break;
 80085f8:	e004      	b.n	8008604 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fb1b 	bl	8008c38 <USBD_CtlError>
      break;
 8008602:	bf00      	nop
  }

  return ret;
 8008604:	7bfb      	ldrb	r3, [r7, #15]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008622:	2300      	movs	r3, #0
 8008624:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	885b      	ldrh	r3, [r3, #2]
 800862a:	0a1b      	lsrs	r3, r3, #8
 800862c:	b29b      	uxth	r3, r3
 800862e:	3b01      	subs	r3, #1
 8008630:	2b06      	cmp	r3, #6
 8008632:	f200 8128 	bhi.w	8008886 <USBD_GetDescriptor+0x276>
 8008636:	a201      	add	r2, pc, #4	; (adr r2, 800863c <USBD_GetDescriptor+0x2c>)
 8008638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863c:	08008659 	.word	0x08008659
 8008640:	08008671 	.word	0x08008671
 8008644:	080086b1 	.word	0x080086b1
 8008648:	08008887 	.word	0x08008887
 800864c:	08008887 	.word	0x08008887
 8008650:	08008827 	.word	0x08008827
 8008654:	08008853 	.word	0x08008853
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	7c12      	ldrb	r2, [r2, #16]
 8008664:	f107 0108 	add.w	r1, r7, #8
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
 800866c:	60f8      	str	r0, [r7, #12]
      break;
 800866e:	e112      	b.n	8008896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	7c1b      	ldrb	r3, [r3, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10d      	bne.n	8008694 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800867e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008680:	f107 0208 	add.w	r2, r7, #8
 8008684:	4610      	mov	r0, r2
 8008686:	4798      	blx	r3
 8008688:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3301      	adds	r3, #1
 800868e:	2202      	movs	r2, #2
 8008690:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008692:	e100      	b.n	8008896 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	f107 0208 	add.w	r2, r7, #8
 80086a0:	4610      	mov	r0, r2
 80086a2:	4798      	blx	r3
 80086a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3301      	adds	r3, #1
 80086aa:	2202      	movs	r2, #2
 80086ac:	701a      	strb	r2, [r3, #0]
      break;
 80086ae:	e0f2      	b.n	8008896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	885b      	ldrh	r3, [r3, #2]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b05      	cmp	r3, #5
 80086b8:	f200 80ac 	bhi.w	8008814 <USBD_GetDescriptor+0x204>
 80086bc:	a201      	add	r2, pc, #4	; (adr r2, 80086c4 <USBD_GetDescriptor+0xb4>)
 80086be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c2:	bf00      	nop
 80086c4:	080086dd 	.word	0x080086dd
 80086c8:	08008711 	.word	0x08008711
 80086cc:	08008745 	.word	0x08008745
 80086d0:	08008779 	.word	0x08008779
 80086d4:	080087ad 	.word	0x080087ad
 80086d8:	080087e1 	.word	0x080087e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00b      	beq.n	8008700 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	7c12      	ldrb	r2, [r2, #16]
 80086f4:	f107 0108 	add.w	r1, r7, #8
 80086f8:	4610      	mov	r0, r2
 80086fa:	4798      	blx	r3
 80086fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086fe:	e091      	b.n	8008824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fa98 	bl	8008c38 <USBD_CtlError>
            err++;
 8008708:	7afb      	ldrb	r3, [r7, #11]
 800870a:	3301      	adds	r3, #1
 800870c:	72fb      	strb	r3, [r7, #11]
          break;
 800870e:	e089      	b.n	8008824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00b      	beq.n	8008734 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	7c12      	ldrb	r2, [r2, #16]
 8008728:	f107 0108 	add.w	r1, r7, #8
 800872c:	4610      	mov	r0, r2
 800872e:	4798      	blx	r3
 8008730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008732:	e077      	b.n	8008824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fa7e 	bl	8008c38 <USBD_CtlError>
            err++;
 800873c:	7afb      	ldrb	r3, [r7, #11]
 800873e:	3301      	adds	r3, #1
 8008740:	72fb      	strb	r3, [r7, #11]
          break;
 8008742:	e06f      	b.n	8008824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00b      	beq.n	8008768 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	7c12      	ldrb	r2, [r2, #16]
 800875c:	f107 0108 	add.w	r1, r7, #8
 8008760:	4610      	mov	r0, r2
 8008762:	4798      	blx	r3
 8008764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008766:	e05d      	b.n	8008824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fa64 	bl	8008c38 <USBD_CtlError>
            err++;
 8008770:	7afb      	ldrb	r3, [r7, #11]
 8008772:	3301      	adds	r3, #1
 8008774:	72fb      	strb	r3, [r7, #11]
          break;
 8008776:	e055      	b.n	8008824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	7c12      	ldrb	r2, [r2, #16]
 8008790:	f107 0108 	add.w	r1, r7, #8
 8008794:	4610      	mov	r0, r2
 8008796:	4798      	blx	r3
 8008798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800879a:	e043      	b.n	8008824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fa4a 	bl	8008c38 <USBD_CtlError>
            err++;
 80087a4:	7afb      	ldrb	r3, [r7, #11]
 80087a6:	3301      	adds	r3, #1
 80087a8:	72fb      	strb	r3, [r7, #11]
          break;
 80087aa:	e03b      	b.n	8008824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00b      	beq.n	80087d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	7c12      	ldrb	r2, [r2, #16]
 80087c4:	f107 0108 	add.w	r1, r7, #8
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
 80087cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ce:	e029      	b.n	8008824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fa30 	bl	8008c38 <USBD_CtlError>
            err++;
 80087d8:	7afb      	ldrb	r3, [r7, #11]
 80087da:	3301      	adds	r3, #1
 80087dc:	72fb      	strb	r3, [r7, #11]
          break;
 80087de:	e021      	b.n	8008824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00b      	beq.n	8008804 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	7c12      	ldrb	r2, [r2, #16]
 80087f8:	f107 0108 	add.w	r1, r7, #8
 80087fc:	4610      	mov	r0, r2
 80087fe:	4798      	blx	r3
 8008800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008802:	e00f      	b.n	8008824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa16 	bl	8008c38 <USBD_CtlError>
            err++;
 800880c:	7afb      	ldrb	r3, [r7, #11]
 800880e:	3301      	adds	r3, #1
 8008810:	72fb      	strb	r3, [r7, #11]
          break;
 8008812:	e007      	b.n	8008824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa0e 	bl	8008c38 <USBD_CtlError>
          err++;
 800881c:	7afb      	ldrb	r3, [r7, #11]
 800881e:	3301      	adds	r3, #1
 8008820:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008822:	e038      	b.n	8008896 <USBD_GetDescriptor+0x286>
 8008824:	e037      	b.n	8008896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	7c1b      	ldrb	r3, [r3, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008836:	f107 0208 	add.w	r2, r7, #8
 800883a:	4610      	mov	r0, r2
 800883c:	4798      	blx	r3
 800883e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008840:	e029      	b.n	8008896 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f9f7 	bl	8008c38 <USBD_CtlError>
        err++;
 800884a:	7afb      	ldrb	r3, [r7, #11]
 800884c:	3301      	adds	r3, #1
 800884e:	72fb      	strb	r3, [r7, #11]
      break;
 8008850:	e021      	b.n	8008896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	7c1b      	ldrb	r3, [r3, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10d      	bne.n	8008876 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008862:	f107 0208 	add.w	r2, r7, #8
 8008866:	4610      	mov	r0, r2
 8008868:	4798      	blx	r3
 800886a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3301      	adds	r3, #1
 8008870:	2207      	movs	r2, #7
 8008872:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008874:	e00f      	b.n	8008896 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f9dd 	bl	8008c38 <USBD_CtlError>
        err++;
 800887e:	7afb      	ldrb	r3, [r7, #11]
 8008880:	3301      	adds	r3, #1
 8008882:	72fb      	strb	r3, [r7, #11]
      break;
 8008884:	e007      	b.n	8008896 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f9d5 	bl	8008c38 <USBD_CtlError>
      err++;
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	3301      	adds	r3, #1
 8008892:	72fb      	strb	r3, [r7, #11]
      break;
 8008894:	bf00      	nop
  }

  if (err != 0U)
 8008896:	7afb      	ldrb	r3, [r7, #11]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d11c      	bne.n	80088d6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800889c:	893b      	ldrh	r3, [r7, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d011      	beq.n	80088c6 <USBD_GetDescriptor+0x2b6>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	88db      	ldrh	r3, [r3, #6]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00d      	beq.n	80088c6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	88da      	ldrh	r2, [r3, #6]
 80088ae:	893b      	ldrh	r3, [r7, #8]
 80088b0:	4293      	cmp	r3, r2
 80088b2:	bf28      	it	cs
 80088b4:	4613      	movcs	r3, r2
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088ba:	893b      	ldrh	r3, [r7, #8]
 80088bc:	461a      	mov	r2, r3
 80088be:	68f9      	ldr	r1, [r7, #12]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fa24 	bl	8008d0e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	88db      	ldrh	r3, [r3, #6]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fa7b 	bl	8008dca <USBD_CtlSendStatus>
 80088d4:	e000      	b.n	80088d8 <USBD_GetDescriptor+0x2c8>
    return;
 80088d6:	bf00      	nop
    }
  }
}
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop

080088e0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	889b      	ldrh	r3, [r3, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d130      	bne.n	8008954 <USBD_SetAddress+0x74>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	88db      	ldrh	r3, [r3, #6]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d12c      	bne.n	8008954 <USBD_SetAddress+0x74>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	885b      	ldrh	r3, [r3, #2]
 80088fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008900:	d828      	bhi.n	8008954 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	885b      	ldrh	r3, [r3, #2]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800890c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008914:	2b03      	cmp	r3, #3
 8008916:	d104      	bne.n	8008922 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f98c 	bl	8008c38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008920:	e01d      	b.n	800895e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	7bfa      	ldrb	r2, [r7, #15]
 8008926:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	4619      	mov	r1, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fe73 	bl	800961a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fa48 	bl	8008dca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800893a:	7bfb      	ldrb	r3, [r7, #15]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d004      	beq.n	800894a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2202      	movs	r2, #2
 8008944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008948:	e009      	b.n	800895e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008952:	e004      	b.n	800895e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f96e 	bl	8008c38 <USBD_CtlError>
  }
}
 800895c:	bf00      	nop
 800895e:	bf00      	nop
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	885b      	ldrh	r3, [r3, #2]
 8008976:	b2da      	uxtb	r2, r3
 8008978:	4b41      	ldr	r3, [pc, #260]	; (8008a80 <USBD_SetConfig+0x118>)
 800897a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800897c:	4b40      	ldr	r3, [pc, #256]	; (8008a80 <USBD_SetConfig+0x118>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d904      	bls.n	800898e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f956 	bl	8008c38 <USBD_CtlError>
 800898c:	e075      	b.n	8008a7a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008994:	2b02      	cmp	r3, #2
 8008996:	d002      	beq.n	800899e <USBD_SetConfig+0x36>
 8008998:	2b03      	cmp	r3, #3
 800899a:	d023      	beq.n	80089e4 <USBD_SetConfig+0x7c>
 800899c:	e062      	b.n	8008a64 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800899e:	4b38      	ldr	r3, [pc, #224]	; (8008a80 <USBD_SetConfig+0x118>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d01a      	beq.n	80089dc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80089a6:	4b36      	ldr	r3, [pc, #216]	; (8008a80 <USBD_SetConfig+0x118>)
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2203      	movs	r2, #3
 80089b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80089b8:	4b31      	ldr	r3, [pc, #196]	; (8008a80 <USBD_SetConfig+0x118>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7ff f9e4 	bl	8007d8c <USBD_SetClassConfig>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d104      	bne.n	80089d4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f933 	bl	8008c38 <USBD_CtlError>
            return;
 80089d2:	e052      	b.n	8008a7a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f9f8 	bl	8008dca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80089da:	e04e      	b.n	8008a7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f9f4 	bl	8008dca <USBD_CtlSendStatus>
        break;
 80089e2:	e04a      	b.n	8008a7a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80089e4:	4b26      	ldr	r3, [pc, #152]	; (8008a80 <USBD_SetConfig+0x118>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d112      	bne.n	8008a12 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2202      	movs	r2, #2
 80089f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80089f4:	4b22      	ldr	r3, [pc, #136]	; (8008a80 <USBD_SetConfig+0x118>)
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	461a      	mov	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80089fe:	4b20      	ldr	r3, [pc, #128]	; (8008a80 <USBD_SetConfig+0x118>)
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff f9e0 	bl	8007dca <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f9dd 	bl	8008dca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a10:	e033      	b.n	8008a7a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008a12:	4b1b      	ldr	r3, [pc, #108]	; (8008a80 <USBD_SetConfig+0x118>)
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d01d      	beq.n	8008a5c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff f9ce 	bl	8007dca <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008a2e:	4b14      	ldr	r3, [pc, #80]	; (8008a80 <USBD_SetConfig+0x118>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	461a      	mov	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a38:	4b11      	ldr	r3, [pc, #68]	; (8008a80 <USBD_SetConfig+0x118>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7ff f9a4 	bl	8007d8c <USBD_SetClassConfig>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d104      	bne.n	8008a54 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f8f3 	bl	8008c38 <USBD_CtlError>
            return;
 8008a52:	e012      	b.n	8008a7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f9b8 	bl	8008dca <USBD_CtlSendStatus>
        break;
 8008a5a:	e00e      	b.n	8008a7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f9b4 	bl	8008dca <USBD_CtlSendStatus>
        break;
 8008a62:	e00a      	b.n	8008a7a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f8e6 	bl	8008c38 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008a6c:	4b04      	ldr	r3, [pc, #16]	; (8008a80 <USBD_SetConfig+0x118>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7ff f9a9 	bl	8007dca <USBD_ClrClassConfig>
        break;
 8008a78:	bf00      	nop
    }
  }
}
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	20000258 	.word	0x20000258

08008a84 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	88db      	ldrh	r3, [r3, #6]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d004      	beq.n	8008aa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f8cd 	bl	8008c38 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a9e:	e022      	b.n	8008ae6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	dc02      	bgt.n	8008ab0 <USBD_GetConfig+0x2c>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dc03      	bgt.n	8008ab6 <USBD_GetConfig+0x32>
 8008aae:	e015      	b.n	8008adc <USBD_GetConfig+0x58>
 8008ab0:	2b03      	cmp	r3, #3
 8008ab2:	d00b      	beq.n	8008acc <USBD_GetConfig+0x48>
 8008ab4:	e012      	b.n	8008adc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f922 	bl	8008d0e <USBD_CtlSendData>
        break;
 8008aca:	e00c      	b.n	8008ae6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3304      	adds	r3, #4
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f91a 	bl	8008d0e <USBD_CtlSendData>
        break;
 8008ada:	e004      	b.n	8008ae6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f8aa 	bl	8008c38 <USBD_CtlError>
        break;
 8008ae4:	bf00      	nop
}
 8008ae6:	bf00      	nop
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008afe:	3b01      	subs	r3, #1
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d81e      	bhi.n	8008b42 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	88db      	ldrh	r3, [r3, #6]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d004      	beq.n	8008b16 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f892 	bl	8008c38 <USBD_CtlError>
        break;
 8008b14:	e01a      	b.n	8008b4c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d005      	beq.n	8008b32 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f043 0202 	orr.w	r2, r3, #2
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	330c      	adds	r3, #12
 8008b36:	2202      	movs	r2, #2
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f8e7 	bl	8008d0e <USBD_CtlSendData>
      break;
 8008b40:	e004      	b.n	8008b4c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f877 	bl	8008c38 <USBD_CtlError>
      break;
 8008b4a:	bf00      	nop
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	885b      	ldrh	r3, [r3, #2]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d106      	bne.n	8008b74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f92b 	bl	8008dca <USBD_CtlSendStatus>
  }
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d80b      	bhi.n	8008baa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	885b      	ldrh	r3, [r3, #2]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d10c      	bne.n	8008bb4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f911 	bl	8008dca <USBD_CtlSendStatus>
      }
      break;
 8008ba8:	e004      	b.n	8008bb4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f843 	bl	8008c38 <USBD_CtlError>
      break;
 8008bb2:	e000      	b.n	8008bb6 <USBD_ClrFeature+0x3a>
      break;
 8008bb4:	bf00      	nop
  }
}
 8008bb6:	bf00      	nop
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781a      	ldrb	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	785a      	ldrb	r2, [r3, #1]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	3302      	adds	r3, #2
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	3303      	adds	r3, #3
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	021b      	lsls	r3, r3, #8
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	4413      	add	r3, r2
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	3305      	adds	r3, #5
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	021b      	lsls	r3, r3, #8
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	4413      	add	r3, r2
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	3306      	adds	r3, #6
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	3307      	adds	r3, #7
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	021b      	lsls	r3, r3, #8
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	4413      	add	r3, r2
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	80da      	strh	r2, [r3, #6]

}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008c42:	2180      	movs	r1, #128	; 0x80
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fc7d 	bl	8009544 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fc79 	bl	8009544 <USBD_LL_StallEP>
}
 8008c52:	bf00      	nop
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b086      	sub	sp, #24
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d032      	beq.n	8008cd6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 f834 	bl	8008cde <USBD_GetLen>
 8008c76:	4603      	mov	r3, r0
 8008c78:	3301      	adds	r3, #1
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	75fa      	strb	r2, [r7, #23]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4413      	add	r3, r2
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	7812      	ldrb	r2, [r2, #0]
 8008c94:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	75fa      	strb	r2, [r7, #23]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	2203      	movs	r2, #3
 8008ca4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008ca6:	e012      	b.n	8008cce <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	60fa      	str	r2, [r7, #12]
 8008cae:	7dfa      	ldrb	r2, [r7, #23]
 8008cb0:	1c51      	adds	r1, r2, #1
 8008cb2:	75f9      	strb	r1, [r7, #23]
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	440a      	add	r2, r1
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	75fa      	strb	r2, [r7, #23]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	4413      	add	r3, r2
 8008cca:	2200      	movs	r2, #0
 8008ccc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e8      	bne.n	8008ca8 <USBD_GetString+0x4e>
    }
  }
}
 8008cd6:	bf00      	nop
 8008cd8:	3718      	adds	r7, #24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b085      	sub	sp, #20
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008cea:	e005      	b.n	8008cf8 <USBD_GetLen+0x1a>
  {
    len++;
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1f5      	bne.n	8008cec <USBD_GetLen+0xe>
  }

  return len;
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d24:	88fa      	ldrh	r2, [r7, #6]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008d2a:	88fa      	ldrh	r2, [r7, #6]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d30:	88fb      	ldrh	r3, [r7, #6]
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	2100      	movs	r1, #0
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 fc8e 	bl	8009658 <USBD_LL_Transmit>

  return USBD_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	4613      	mov	r3, r2
 8008d52:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d54:	88fb      	ldrh	r3, [r7, #6]
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	2100      	movs	r1, #0
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 fc7c 	bl	8009658 <USBD_LL_Transmit>

  return USBD_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	4613      	mov	r3, r2
 8008d76:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2203      	movs	r2, #3
 8008d7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d80:	88fa      	ldrh	r2, [r7, #6]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008d88:	88fa      	ldrh	r2, [r7, #6]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d90:	88fb      	ldrh	r3, [r7, #6]
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	2100      	movs	r1, #0
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f000 fc81 	bl	800969e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	4613      	mov	r3, r2
 8008db2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008db4:	88fb      	ldrh	r3, [r7, #6]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	2100      	movs	r1, #0
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f000 fc6f 	bl	800969e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2204      	movs	r2, #4
 8008dd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008dda:	2300      	movs	r3, #0
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2100      	movs	r1, #0
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fc39 	bl	8009658 <USBD_LL_Transmit>

  return USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2205      	movs	r2, #5
 8008dfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e00:	2300      	movs	r3, #0
 8008e02:	2200      	movs	r2, #0
 8008e04:	2100      	movs	r1, #0
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fc49 	bl	800969e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
	...

08008e18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4912      	ldr	r1, [pc, #72]	; (8008e68 <MX_USB_DEVICE_Init+0x50>)
 8008e20:	4812      	ldr	r0, [pc, #72]	; (8008e6c <MX_USB_DEVICE_Init+0x54>)
 8008e22:	f7fe ff57 	bl	8007cd4 <USBD_Init>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e2c:	f7f7 fdb0 	bl	8000990 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e30:	490f      	ldr	r1, [pc, #60]	; (8008e70 <MX_USB_DEVICE_Init+0x58>)
 8008e32:	480e      	ldr	r0, [pc, #56]	; (8008e6c <MX_USB_DEVICE_Init+0x54>)
 8008e34:	f7fe ff79 	bl	8007d2a <USBD_RegisterClass>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e3e:	f7f7 fda7 	bl	8000990 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e42:	490c      	ldr	r1, [pc, #48]	; (8008e74 <MX_USB_DEVICE_Init+0x5c>)
 8008e44:	4809      	ldr	r0, [pc, #36]	; (8008e6c <MX_USB_DEVICE_Init+0x54>)
 8008e46:	f7fe fea7 	bl	8007b98 <USBD_CDC_RegisterInterface>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e50:	f7f7 fd9e 	bl	8000990 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e54:	4805      	ldr	r0, [pc, #20]	; (8008e6c <MX_USB_DEVICE_Init+0x54>)
 8008e56:	f7fe ff82 	bl	8007d5e <USBD_Start>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e60:	f7f7 fd96 	bl	8000990 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e64:	bf00      	nop
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	2000012c 	.word	0x2000012c
 8008e6c:	2000025c 	.word	0x2000025c
 8008e70:	20000018 	.word	0x20000018
 8008e74:	2000011c 	.word	0x2000011c

08008e78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4905      	ldr	r1, [pc, #20]	; (8008e94 <CDC_Init_FS+0x1c>)
 8008e80:	4805      	ldr	r0, [pc, #20]	; (8008e98 <CDC_Init_FS+0x20>)
 8008e82:	f7fe fea0 	bl	8007bc6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e86:	4905      	ldr	r1, [pc, #20]	; (8008e9c <CDC_Init_FS+0x24>)
 8008e88:	4803      	ldr	r0, [pc, #12]	; (8008e98 <CDC_Init_FS+0x20>)
 8008e8a:	f7fe feb6 	bl	8007bfa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	20000920 	.word	0x20000920
 8008e98:	2000025c 	.word	0x2000025c
 8008e9c:	20000520 	.word	0x20000520

08008ea0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ea4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	6039      	str	r1, [r7, #0]
 8008eba:	71fb      	strb	r3, [r7, #7]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	2b23      	cmp	r3, #35	; 0x23
 8008ec4:	d84a      	bhi.n	8008f5c <CDC_Control_FS+0xac>
 8008ec6:	a201      	add	r2, pc, #4	; (adr r2, 8008ecc <CDC_Control_FS+0x1c>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008f5d 	.word	0x08008f5d
 8008ed0:	08008f5d 	.word	0x08008f5d
 8008ed4:	08008f5d 	.word	0x08008f5d
 8008ed8:	08008f5d 	.word	0x08008f5d
 8008edc:	08008f5d 	.word	0x08008f5d
 8008ee0:	08008f5d 	.word	0x08008f5d
 8008ee4:	08008f5d 	.word	0x08008f5d
 8008ee8:	08008f5d 	.word	0x08008f5d
 8008eec:	08008f5d 	.word	0x08008f5d
 8008ef0:	08008f5d 	.word	0x08008f5d
 8008ef4:	08008f5d 	.word	0x08008f5d
 8008ef8:	08008f5d 	.word	0x08008f5d
 8008efc:	08008f5d 	.word	0x08008f5d
 8008f00:	08008f5d 	.word	0x08008f5d
 8008f04:	08008f5d 	.word	0x08008f5d
 8008f08:	08008f5d 	.word	0x08008f5d
 8008f0c:	08008f5d 	.word	0x08008f5d
 8008f10:	08008f5d 	.word	0x08008f5d
 8008f14:	08008f5d 	.word	0x08008f5d
 8008f18:	08008f5d 	.word	0x08008f5d
 8008f1c:	08008f5d 	.word	0x08008f5d
 8008f20:	08008f5d 	.word	0x08008f5d
 8008f24:	08008f5d 	.word	0x08008f5d
 8008f28:	08008f5d 	.word	0x08008f5d
 8008f2c:	08008f5d 	.word	0x08008f5d
 8008f30:	08008f5d 	.word	0x08008f5d
 8008f34:	08008f5d 	.word	0x08008f5d
 8008f38:	08008f5d 	.word	0x08008f5d
 8008f3c:	08008f5d 	.word	0x08008f5d
 8008f40:	08008f5d 	.word	0x08008f5d
 8008f44:	08008f5d 	.word	0x08008f5d
 8008f48:	08008f5d 	.word	0x08008f5d
 8008f4c:	08008f5d 	.word	0x08008f5d
 8008f50:	08008f5d 	.word	0x08008f5d
 8008f54:	08008f5d 	.word	0x08008f5d
 8008f58:	08008f5d 	.word	0x08008f5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f5c:	bf00      	nop
  }

  return (USBD_OK);
 8008f5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	4805      	ldr	r0, [pc, #20]	; (8008f90 <CDC_Receive_FS+0x24>)
 8008f7a:	f7fe fe3e 	bl	8007bfa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f7e:	4804      	ldr	r0, [pc, #16]	; (8008f90 <CDC_Receive_FS+0x24>)
 8008f80:	f7fe fe7e 	bl	8007c80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008f84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	2000025c 	.word	0x2000025c

08008f94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008fa4:	4b0d      	ldr	r3, [pc, #52]	; (8008fdc <CDC_Transmit_FS+0x48>)
 8008fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008faa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e00b      	b.n	8008fd2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008fba:	887b      	ldrh	r3, [r7, #2]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	4806      	ldr	r0, [pc, #24]	; (8008fdc <CDC_Transmit_FS+0x48>)
 8008fc2:	f7fe fe00 	bl	8007bc6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008fc6:	4805      	ldr	r0, [pc, #20]	; (8008fdc <CDC_Transmit_FS+0x48>)
 8008fc8:	f7fe fe2b 	bl	8007c22 <USBD_CDC_TransmitPacket>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	2000025c 	.word	0x2000025c

08008fe0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	6039      	str	r1, [r7, #0]
 8008fea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2212      	movs	r2, #18
 8008ff0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ff2:	4b03      	ldr	r3, [pc, #12]	; (8009000 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	20000148 	.word	0x20000148

08009004 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	4603      	mov	r3, r0
 800900c:	6039      	str	r1, [r7, #0]
 800900e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	2204      	movs	r2, #4
 8009014:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009016:	4b03      	ldr	r3, [pc, #12]	; (8009024 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	2000015c 	.word	0x2000015c

08009028 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	4603      	mov	r3, r0
 8009030:	6039      	str	r1, [r7, #0]
 8009032:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d105      	bne.n	8009046 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	4907      	ldr	r1, [pc, #28]	; (800905c <USBD_FS_ProductStrDescriptor+0x34>)
 800903e:	4808      	ldr	r0, [pc, #32]	; (8009060 <USBD_FS_ProductStrDescriptor+0x38>)
 8009040:	f7ff fe0b 	bl	8008c5a <USBD_GetString>
 8009044:	e004      	b.n	8009050 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	4904      	ldr	r1, [pc, #16]	; (800905c <USBD_FS_ProductStrDescriptor+0x34>)
 800904a:	4805      	ldr	r0, [pc, #20]	; (8009060 <USBD_FS_ProductStrDescriptor+0x38>)
 800904c:	f7ff fe05 	bl	8008c5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009050:	4b02      	ldr	r3, [pc, #8]	; (800905c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20000d20 	.word	0x20000d20
 8009060:	0800a778 	.word	0x0800a778

08009064 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	6039      	str	r1, [r7, #0]
 800906e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	4904      	ldr	r1, [pc, #16]	; (8009084 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009074:	4804      	ldr	r0, [pc, #16]	; (8009088 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009076:	f7ff fdf0 	bl	8008c5a <USBD_GetString>
  return USBD_StrDesc;
 800907a:	4b02      	ldr	r3, [pc, #8]	; (8009084 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	20000d20 	.word	0x20000d20
 8009088:	0800a790 	.word	0x0800a790

0800908c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	4603      	mov	r3, r0
 8009094:	6039      	str	r1, [r7, #0]
 8009096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	221a      	movs	r2, #26
 800909c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800909e:	f000 f843 	bl	8009128 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090a2:	4b02      	ldr	r3, [pc, #8]	; (80090ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	20000160 	.word	0x20000160

080090b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	4603      	mov	r3, r0
 80090b8:	6039      	str	r1, [r7, #0]
 80090ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d105      	bne.n	80090ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	4907      	ldr	r1, [pc, #28]	; (80090e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090c6:	4808      	ldr	r0, [pc, #32]	; (80090e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090c8:	f7ff fdc7 	bl	8008c5a <USBD_GetString>
 80090cc:	e004      	b.n	80090d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	4904      	ldr	r1, [pc, #16]	; (80090e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090d2:	4805      	ldr	r0, [pc, #20]	; (80090e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090d4:	f7ff fdc1 	bl	8008c5a <USBD_GetString>
  }
  return USBD_StrDesc;
 80090d8:	4b02      	ldr	r3, [pc, #8]	; (80090e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000d20 	.word	0x20000d20
 80090e8:	0800a7a4 	.word	0x0800a7a4

080090ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	4603      	mov	r3, r0
 80090f4:	6039      	str	r1, [r7, #0]
 80090f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d105      	bne.n	800910a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	4907      	ldr	r1, [pc, #28]	; (8009120 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009102:	4808      	ldr	r0, [pc, #32]	; (8009124 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009104:	f7ff fda9 	bl	8008c5a <USBD_GetString>
 8009108:	e004      	b.n	8009114 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	4904      	ldr	r1, [pc, #16]	; (8009120 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800910e:	4805      	ldr	r0, [pc, #20]	; (8009124 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009110:	f7ff fda3 	bl	8008c5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009114:	4b02      	ldr	r3, [pc, #8]	; (8009120 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000d20 	.word	0x20000d20
 8009124:	0800a7b0 	.word	0x0800a7b0

08009128 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800912e:	4b0f      	ldr	r3, [pc, #60]	; (800916c <Get_SerialNum+0x44>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009134:	4b0e      	ldr	r3, [pc, #56]	; (8009170 <Get_SerialNum+0x48>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800913a:	4b0e      	ldr	r3, [pc, #56]	; (8009174 <Get_SerialNum+0x4c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4413      	add	r3, r2
 8009146:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d009      	beq.n	8009162 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800914e:	2208      	movs	r2, #8
 8009150:	4909      	ldr	r1, [pc, #36]	; (8009178 <Get_SerialNum+0x50>)
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 f814 	bl	8009180 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009158:	2204      	movs	r2, #4
 800915a:	4908      	ldr	r1, [pc, #32]	; (800917c <Get_SerialNum+0x54>)
 800915c:	68b8      	ldr	r0, [r7, #8]
 800915e:	f000 f80f 	bl	8009180 <IntToUnicode>
  }
}
 8009162:	bf00      	nop
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	1ffff7ac 	.word	0x1ffff7ac
 8009170:	1ffff7b0 	.word	0x1ffff7b0
 8009174:	1ffff7b4 	.word	0x1ffff7b4
 8009178:	20000162 	.word	0x20000162
 800917c:	20000172 	.word	0x20000172

08009180 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	4613      	mov	r3, r2
 800918c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009192:	2300      	movs	r3, #0
 8009194:	75fb      	strb	r3, [r7, #23]
 8009196:	e027      	b.n	80091e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	0f1b      	lsrs	r3, r3, #28
 800919c:	2b09      	cmp	r3, #9
 800919e:	d80b      	bhi.n	80091b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	0f1b      	lsrs	r3, r3, #28
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	4619      	mov	r1, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	440b      	add	r3, r1
 80091b0:	3230      	adds	r2, #48	; 0x30
 80091b2:	b2d2      	uxtb	r2, r2
 80091b4:	701a      	strb	r2, [r3, #0]
 80091b6:	e00a      	b.n	80091ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	0f1b      	lsrs	r3, r3, #28
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	7dfb      	ldrb	r3, [r7, #23]
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	4619      	mov	r1, r3
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	440b      	add	r3, r1
 80091c8:	3237      	adds	r2, #55	; 0x37
 80091ca:	b2d2      	uxtb	r2, r2
 80091cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	011b      	lsls	r3, r3, #4
 80091d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	3301      	adds	r3, #1
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	4413      	add	r3, r2
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
 80091e4:	3301      	adds	r3, #1
 80091e6:	75fb      	strb	r3, [r7, #23]
 80091e8:	7dfa      	ldrb	r2, [r7, #23]
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d3d3      	bcc.n	8009198 <IntToUnicode+0x18>
  }
}
 80091f0:	bf00      	nop
 80091f2:	bf00      	nop
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
	...

08009200 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b08a      	sub	sp, #40	; 0x28
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009208:	f107 0314 	add.w	r3, r7, #20
 800920c:	2200      	movs	r2, #0
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	605a      	str	r2, [r3, #4]
 8009212:	609a      	str	r2, [r3, #8]
 8009214:	60da      	str	r2, [r3, #12]
 8009216:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a1c      	ldr	r2, [pc, #112]	; (8009290 <HAL_PCD_MspInit+0x90>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d131      	bne.n	8009286 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009222:	4b1c      	ldr	r3, [pc, #112]	; (8009294 <HAL_PCD_MspInit+0x94>)
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	4a1b      	ldr	r2, [pc, #108]	; (8009294 <HAL_PCD_MspInit+0x94>)
 8009228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800922c:	6153      	str	r3, [r2, #20]
 800922e:	4b19      	ldr	r3, [pc, #100]	; (8009294 <HAL_PCD_MspInit+0x94>)
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009236:	613b      	str	r3, [r7, #16]
 8009238:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800923a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800923e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009240:	2302      	movs	r3, #2
 8009242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009244:	2300      	movs	r3, #0
 8009246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009248:	2303      	movs	r3, #3
 800924a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800924c:	230e      	movs	r3, #14
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009250:	f107 0314 	add.w	r3, r7, #20
 8009254:	4619      	mov	r1, r3
 8009256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800925a:	f7f7 fe9b 	bl	8000f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800925e:	4b0d      	ldr	r3, [pc, #52]	; (8009294 <HAL_PCD_MspInit+0x94>)
 8009260:	69db      	ldr	r3, [r3, #28]
 8009262:	4a0c      	ldr	r2, [pc, #48]	; (8009294 <HAL_PCD_MspInit+0x94>)
 8009264:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009268:	61d3      	str	r3, [r2, #28]
 800926a:	4b0a      	ldr	r3, [pc, #40]	; (8009294 <HAL_PCD_MspInit+0x94>)
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009276:	2200      	movs	r2, #0
 8009278:	2100      	movs	r1, #0
 800927a:	2014      	movs	r0, #20
 800927c:	f7f7 fe53 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009280:	2014      	movs	r0, #20
 8009282:	f7f7 fe6c 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009286:	bf00      	nop
 8009288:	3728      	adds	r7, #40	; 0x28
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	40005c00 	.word	0x40005c00
 8009294:	40021000 	.word	0x40021000

08009298 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80092ac:	4619      	mov	r1, r3
 80092ae:	4610      	mov	r0, r2
 80092b0:	f7fe fd9e 	bl	8007df0 <USBD_LL_SetupStage>
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80092ce:	78fa      	ldrb	r2, [r7, #3]
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	4613      	mov	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	440b      	add	r3, r1
 80092dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	78fb      	ldrb	r3, [r7, #3]
 80092e4:	4619      	mov	r1, r3
 80092e6:	f7fe fdd0 	bl	8007e8a <USBD_LL_DataOutStage>
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b082      	sub	sp, #8
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	460b      	mov	r3, r1
 80092fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009304:	78fa      	ldrb	r2, [r7, #3]
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	4613      	mov	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	440b      	add	r3, r1
 8009312:	333c      	adds	r3, #60	; 0x3c
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	78fb      	ldrb	r3, [r7, #3]
 8009318:	4619      	mov	r1, r3
 800931a:	f7fe fe27 	bl	8007f6c <USBD_LL_DataInStage>
}
 800931e:	bf00      	nop
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b082      	sub	sp, #8
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe ff3a 	bl	80081ae <USBD_LL_SOF>
}
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800934a:	2301      	movs	r3, #1
 800934c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	2b02      	cmp	r3, #2
 8009354:	d001      	beq.n	800935a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009356:	f7f7 fb1b 	bl	8000990 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009360:	7bfa      	ldrb	r2, [r7, #15]
 8009362:	4611      	mov	r1, r2
 8009364:	4618      	mov	r0, r3
 8009366:	f7fe fee7 	bl	8008138 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009370:	4618      	mov	r0, r3
 8009372:	f7fe fea0 	bl	80080b6 <USBD_LL_Reset>
}
 8009376:	bf00      	nop
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe fee2 	bl	8008158 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800939c:	4b04      	ldr	r3, [pc, #16]	; (80093b0 <HAL_PCD_SuspendCallback+0x30>)
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	4a03      	ldr	r2, [pc, #12]	; (80093b0 <HAL_PCD_SuspendCallback+0x30>)
 80093a2:	f043 0306 	orr.w	r3, r3, #6
 80093a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	e000ed00 	.word	0xe000ed00

080093b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe fedd 	bl	8008182 <USBD_LL_Resume>
}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80093d8:	4a28      	ldr	r2, [pc, #160]	; (800947c <USBD_LL_Init+0xac>)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a26      	ldr	r2, [pc, #152]	; (800947c <USBD_LL_Init+0xac>)
 80093e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80093e8:	4b24      	ldr	r3, [pc, #144]	; (800947c <USBD_LL_Init+0xac>)
 80093ea:	4a25      	ldr	r2, [pc, #148]	; (8009480 <USBD_LL_Init+0xb0>)
 80093ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80093ee:	4b23      	ldr	r3, [pc, #140]	; (800947c <USBD_LL_Init+0xac>)
 80093f0:	2208      	movs	r2, #8
 80093f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80093f4:	4b21      	ldr	r3, [pc, #132]	; (800947c <USBD_LL_Init+0xac>)
 80093f6:	2202      	movs	r2, #2
 80093f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093fa:	4b20      	ldr	r3, [pc, #128]	; (800947c <USBD_LL_Init+0xac>)
 80093fc:	2202      	movs	r2, #2
 80093fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009400:	4b1e      	ldr	r3, [pc, #120]	; (800947c <USBD_LL_Init+0xac>)
 8009402:	2200      	movs	r2, #0
 8009404:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009406:	4b1d      	ldr	r3, [pc, #116]	; (800947c <USBD_LL_Init+0xac>)
 8009408:	2200      	movs	r2, #0
 800940a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800940c:	481b      	ldr	r0, [pc, #108]	; (800947c <USBD_LL_Init+0xac>)
 800940e:	f7f8 fd60 	bl	8001ed2 <HAL_PCD_Init>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009418:	f7f7 faba 	bl	8000990 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009422:	2318      	movs	r3, #24
 8009424:	2200      	movs	r2, #0
 8009426:	2100      	movs	r1, #0
 8009428:	f7fa f9e9 	bl	80037fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009432:	2358      	movs	r3, #88	; 0x58
 8009434:	2200      	movs	r2, #0
 8009436:	2180      	movs	r1, #128	; 0x80
 8009438:	f7fa f9e1 	bl	80037fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009442:	23c0      	movs	r3, #192	; 0xc0
 8009444:	2200      	movs	r2, #0
 8009446:	2181      	movs	r1, #129	; 0x81
 8009448:	f7fa f9d9 	bl	80037fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009452:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009456:	2200      	movs	r2, #0
 8009458:	2101      	movs	r1, #1
 800945a:	f7fa f9d0 	bl	80037fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009468:	2200      	movs	r2, #0
 800946a:	2182      	movs	r1, #130	; 0x82
 800946c:	f7fa f9c7 	bl	80037fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000f20 	.word	0x20000f20
 8009480:	40005c00 	.word	0x40005c00

08009484 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800949a:	4618      	mov	r0, r3
 800949c:	f7f8 fdeb 	bl	8002076 <HAL_PCD_Start>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 f954 	bl	8009754 <USBD_Get_USB_Status>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	4608      	mov	r0, r1
 80094c4:	4611      	mov	r1, r2
 80094c6:	461a      	mov	r2, r3
 80094c8:	4603      	mov	r3, r0
 80094ca:	70fb      	strb	r3, [r7, #3]
 80094cc:	460b      	mov	r3, r1
 80094ce:	70bb      	strb	r3, [r7, #2]
 80094d0:	4613      	mov	r3, r2
 80094d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094e2:	78bb      	ldrb	r3, [r7, #2]
 80094e4:	883a      	ldrh	r2, [r7, #0]
 80094e6:	78f9      	ldrb	r1, [r7, #3]
 80094e8:	f7f8 fee4 	bl	80022b4 <HAL_PCD_EP_Open>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 f92e 	bl	8009754 <USBD_Get_USB_Status>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	460b      	mov	r3, r1
 8009510:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009520:	78fa      	ldrb	r2, [r7, #3]
 8009522:	4611      	mov	r1, r2
 8009524:	4618      	mov	r0, r3
 8009526:	f7f8 ff22 	bl	800236e <HAL_PCD_EP_Close>
 800952a:	4603      	mov	r3, r0
 800952c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	4618      	mov	r0, r3
 8009532:	f000 f90f 	bl	8009754 <USBD_Get_USB_Status>
 8009536:	4603      	mov	r3, r0
 8009538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800953a:	7bbb      	ldrb	r3, [r7, #14]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800955e:	78fa      	ldrb	r2, [r7, #3]
 8009560:	4611      	mov	r1, r2
 8009562:	4618      	mov	r0, r3
 8009564:	f7f8 ffcb 	bl	80024fe <HAL_PCD_EP_SetStall>
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 f8f0 	bl	8009754 <USBD_Get_USB_Status>
 8009574:	4603      	mov	r3, r0
 8009576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009578:	7bbb      	ldrb	r3, [r7, #14]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	460b      	mov	r3, r1
 800958c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800959c:	78fa      	ldrb	r2, [r7, #3]
 800959e:	4611      	mov	r1, r2
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7f8 fffe 	bl	80025a2 <HAL_PCD_EP_ClrStall>
 80095a6:	4603      	mov	r3, r0
 80095a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 f8d1 	bl	8009754 <USBD_Get_USB_Status>
 80095b2:	4603      	mov	r3, r0
 80095b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	da0c      	bge.n	80095f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095e2:	68f9      	ldr	r1, [r7, #12]
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	440b      	add	r3, r1
 80095f0:	3302      	adds	r3, #2
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	e00b      	b.n	800960e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095f6:	78fb      	ldrb	r3, [r7, #3]
 80095f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095fc:	68f9      	ldr	r1, [r7, #12]
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	440b      	add	r3, r1
 8009608:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800960c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800960e:	4618      	mov	r0, r3
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	460b      	mov	r3, r1
 8009624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009634:	78fa      	ldrb	r2, [r7, #3]
 8009636:	4611      	mov	r1, r2
 8009638:	4618      	mov	r0, r3
 800963a:	f7f8 fe16 	bl	800226a <HAL_PCD_SetAddress>
 800963e:	4603      	mov	r3, r0
 8009640:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	4618      	mov	r0, r3
 8009646:	f000 f885 	bl	8009754 <USBD_Get_USB_Status>
 800964a:	4603      	mov	r3, r0
 800964c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800964e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	607a      	str	r2, [r7, #4]
 8009662:	461a      	mov	r2, r3
 8009664:	460b      	mov	r3, r1
 8009666:	72fb      	strb	r3, [r7, #11]
 8009668:	4613      	mov	r3, r2
 800966a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800967a:	893b      	ldrh	r3, [r7, #8]
 800967c:	7af9      	ldrb	r1, [r7, #11]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	f7f8 ff06 	bl	8002490 <HAL_PCD_EP_Transmit>
 8009684:	4603      	mov	r3, r0
 8009686:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009688:	7dfb      	ldrb	r3, [r7, #23]
 800968a:	4618      	mov	r0, r3
 800968c:	f000 f862 	bl	8009754 <USBD_Get_USB_Status>
 8009690:	4603      	mov	r3, r0
 8009692:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009694:	7dbb      	ldrb	r3, [r7, #22]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b086      	sub	sp, #24
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	60f8      	str	r0, [r7, #12]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	461a      	mov	r2, r3
 80096aa:	460b      	mov	r3, r1
 80096ac:	72fb      	strb	r3, [r7, #11]
 80096ae:	4613      	mov	r3, r2
 80096b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096c0:	893b      	ldrh	r3, [r7, #8]
 80096c2:	7af9      	ldrb	r1, [r7, #11]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	f7f8 fe9a 	bl	80023fe <HAL_PCD_EP_Receive>
 80096ca:	4603      	mov	r3, r0
 80096cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ce:	7dfb      	ldrb	r3, [r7, #23]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 f83f 	bl	8009754 <USBD_Get_USB_Status>
 80096d6:	4603      	mov	r3, r0
 80096d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096da:	7dbb      	ldrb	r3, [r7, #22]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096f6:	78fa      	ldrb	r2, [r7, #3]
 80096f8:	4611      	mov	r1, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7f8 feb0 	bl	8002460 <HAL_PCD_EP_GetRxCount>
 8009700:	4603      	mov	r3, r0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
	...

0800970c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009714:	4b03      	ldr	r3, [pc, #12]	; (8009724 <USBD_static_malloc+0x18>)
}
 8009716:	4618      	mov	r0, r3
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	2000120c 	.word	0x2000120c

08009728 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]

}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009762:	79fb      	ldrb	r3, [r7, #7]
 8009764:	2b03      	cmp	r3, #3
 8009766:	d817      	bhi.n	8009798 <USBD_Get_USB_Status+0x44>
 8009768:	a201      	add	r2, pc, #4	; (adr r2, 8009770 <USBD_Get_USB_Status+0x1c>)
 800976a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976e:	bf00      	nop
 8009770:	08009781 	.word	0x08009781
 8009774:	08009787 	.word	0x08009787
 8009778:	0800978d 	.word	0x0800978d
 800977c:	08009793 	.word	0x08009793
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
    break;
 8009784:	e00b      	b.n	800979e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009786:	2302      	movs	r3, #2
 8009788:	73fb      	strb	r3, [r7, #15]
    break;
 800978a:	e008      	b.n	800979e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800978c:	2301      	movs	r3, #1
 800978e:	73fb      	strb	r3, [r7, #15]
    break;
 8009790:	e005      	b.n	800979e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009792:	2302      	movs	r3, #2
 8009794:	73fb      	strb	r3, [r7, #15]
    break;
 8009796:	e002      	b.n	800979e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009798:	2302      	movs	r3, #2
 800979a:	73fb      	strb	r3, [r7, #15]
    break;
 800979c:	bf00      	nop
  }
  return usb_status;
 800979e:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <__errno>:
 80097ac:	4b01      	ldr	r3, [pc, #4]	; (80097b4 <__errno+0x8>)
 80097ae:	6818      	ldr	r0, [r3, #0]
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	2000017c 	.word	0x2000017c

080097b8 <__libc_init_array>:
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	4d0d      	ldr	r5, [pc, #52]	; (80097f0 <__libc_init_array+0x38>)
 80097bc:	4c0d      	ldr	r4, [pc, #52]	; (80097f4 <__libc_init_array+0x3c>)
 80097be:	1b64      	subs	r4, r4, r5
 80097c0:	10a4      	asrs	r4, r4, #2
 80097c2:	2600      	movs	r6, #0
 80097c4:	42a6      	cmp	r6, r4
 80097c6:	d109      	bne.n	80097dc <__libc_init_array+0x24>
 80097c8:	4d0b      	ldr	r5, [pc, #44]	; (80097f8 <__libc_init_array+0x40>)
 80097ca:	4c0c      	ldr	r4, [pc, #48]	; (80097fc <__libc_init_array+0x44>)
 80097cc:	f000 ffae 	bl	800a72c <_init>
 80097d0:	1b64      	subs	r4, r4, r5
 80097d2:	10a4      	asrs	r4, r4, #2
 80097d4:	2600      	movs	r6, #0
 80097d6:	42a6      	cmp	r6, r4
 80097d8:	d105      	bne.n	80097e6 <__libc_init_array+0x2e>
 80097da:	bd70      	pop	{r4, r5, r6, pc}
 80097dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e0:	4798      	blx	r3
 80097e2:	3601      	adds	r6, #1
 80097e4:	e7ee      	b.n	80097c4 <__libc_init_array+0xc>
 80097e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ea:	4798      	blx	r3
 80097ec:	3601      	adds	r6, #1
 80097ee:	e7f2      	b.n	80097d6 <__libc_init_array+0x1e>
 80097f0:	0800a888 	.word	0x0800a888
 80097f4:	0800a888 	.word	0x0800a888
 80097f8:	0800a888 	.word	0x0800a888
 80097fc:	0800a88c 	.word	0x0800a88c

08009800 <memset>:
 8009800:	4402      	add	r2, r0
 8009802:	4603      	mov	r3, r0
 8009804:	4293      	cmp	r3, r2
 8009806:	d100      	bne.n	800980a <memset+0xa>
 8009808:	4770      	bx	lr
 800980a:	f803 1b01 	strb.w	r1, [r3], #1
 800980e:	e7f9      	b.n	8009804 <memset+0x4>

08009810 <iprintf>:
 8009810:	b40f      	push	{r0, r1, r2, r3}
 8009812:	4b0a      	ldr	r3, [pc, #40]	; (800983c <iprintf+0x2c>)
 8009814:	b513      	push	{r0, r1, r4, lr}
 8009816:	681c      	ldr	r4, [r3, #0]
 8009818:	b124      	cbz	r4, 8009824 <iprintf+0x14>
 800981a:	69a3      	ldr	r3, [r4, #24]
 800981c:	b913      	cbnz	r3, 8009824 <iprintf+0x14>
 800981e:	4620      	mov	r0, r4
 8009820:	f000 f866 	bl	80098f0 <__sinit>
 8009824:	ab05      	add	r3, sp, #20
 8009826:	9a04      	ldr	r2, [sp, #16]
 8009828:	68a1      	ldr	r1, [r4, #8]
 800982a:	9301      	str	r3, [sp, #4]
 800982c:	4620      	mov	r0, r4
 800982e:	f000 f9bd 	bl	8009bac <_vfiprintf_r>
 8009832:	b002      	add	sp, #8
 8009834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009838:	b004      	add	sp, #16
 800983a:	4770      	bx	lr
 800983c:	2000017c 	.word	0x2000017c

08009840 <std>:
 8009840:	2300      	movs	r3, #0
 8009842:	b510      	push	{r4, lr}
 8009844:	4604      	mov	r4, r0
 8009846:	e9c0 3300 	strd	r3, r3, [r0]
 800984a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800984e:	6083      	str	r3, [r0, #8]
 8009850:	8181      	strh	r1, [r0, #12]
 8009852:	6643      	str	r3, [r0, #100]	; 0x64
 8009854:	81c2      	strh	r2, [r0, #14]
 8009856:	6183      	str	r3, [r0, #24]
 8009858:	4619      	mov	r1, r3
 800985a:	2208      	movs	r2, #8
 800985c:	305c      	adds	r0, #92	; 0x5c
 800985e:	f7ff ffcf 	bl	8009800 <memset>
 8009862:	4b05      	ldr	r3, [pc, #20]	; (8009878 <std+0x38>)
 8009864:	6263      	str	r3, [r4, #36]	; 0x24
 8009866:	4b05      	ldr	r3, [pc, #20]	; (800987c <std+0x3c>)
 8009868:	62a3      	str	r3, [r4, #40]	; 0x28
 800986a:	4b05      	ldr	r3, [pc, #20]	; (8009880 <std+0x40>)
 800986c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800986e:	4b05      	ldr	r3, [pc, #20]	; (8009884 <std+0x44>)
 8009870:	6224      	str	r4, [r4, #32]
 8009872:	6323      	str	r3, [r4, #48]	; 0x30
 8009874:	bd10      	pop	{r4, pc}
 8009876:	bf00      	nop
 8009878:	0800a155 	.word	0x0800a155
 800987c:	0800a177 	.word	0x0800a177
 8009880:	0800a1af 	.word	0x0800a1af
 8009884:	0800a1d3 	.word	0x0800a1d3

08009888 <_cleanup_r>:
 8009888:	4901      	ldr	r1, [pc, #4]	; (8009890 <_cleanup_r+0x8>)
 800988a:	f000 b8af 	b.w	80099ec <_fwalk_reent>
 800988e:	bf00      	nop
 8009890:	0800a4ad 	.word	0x0800a4ad

08009894 <__sfmoreglue>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	2268      	movs	r2, #104	; 0x68
 8009898:	1e4d      	subs	r5, r1, #1
 800989a:	4355      	muls	r5, r2
 800989c:	460e      	mov	r6, r1
 800989e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098a2:	f000 f8e5 	bl	8009a70 <_malloc_r>
 80098a6:	4604      	mov	r4, r0
 80098a8:	b140      	cbz	r0, 80098bc <__sfmoreglue+0x28>
 80098aa:	2100      	movs	r1, #0
 80098ac:	e9c0 1600 	strd	r1, r6, [r0]
 80098b0:	300c      	adds	r0, #12
 80098b2:	60a0      	str	r0, [r4, #8]
 80098b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098b8:	f7ff ffa2 	bl	8009800 <memset>
 80098bc:	4620      	mov	r0, r4
 80098be:	bd70      	pop	{r4, r5, r6, pc}

080098c0 <__sfp_lock_acquire>:
 80098c0:	4801      	ldr	r0, [pc, #4]	; (80098c8 <__sfp_lock_acquire+0x8>)
 80098c2:	f000 b8b3 	b.w	8009a2c <__retarget_lock_acquire_recursive>
 80098c6:	bf00      	nop
 80098c8:	2000142d 	.word	0x2000142d

080098cc <__sfp_lock_release>:
 80098cc:	4801      	ldr	r0, [pc, #4]	; (80098d4 <__sfp_lock_release+0x8>)
 80098ce:	f000 b8ae 	b.w	8009a2e <__retarget_lock_release_recursive>
 80098d2:	bf00      	nop
 80098d4:	2000142d 	.word	0x2000142d

080098d8 <__sinit_lock_acquire>:
 80098d8:	4801      	ldr	r0, [pc, #4]	; (80098e0 <__sinit_lock_acquire+0x8>)
 80098da:	f000 b8a7 	b.w	8009a2c <__retarget_lock_acquire_recursive>
 80098de:	bf00      	nop
 80098e0:	2000142e 	.word	0x2000142e

080098e4 <__sinit_lock_release>:
 80098e4:	4801      	ldr	r0, [pc, #4]	; (80098ec <__sinit_lock_release+0x8>)
 80098e6:	f000 b8a2 	b.w	8009a2e <__retarget_lock_release_recursive>
 80098ea:	bf00      	nop
 80098ec:	2000142e 	.word	0x2000142e

080098f0 <__sinit>:
 80098f0:	b510      	push	{r4, lr}
 80098f2:	4604      	mov	r4, r0
 80098f4:	f7ff fff0 	bl	80098d8 <__sinit_lock_acquire>
 80098f8:	69a3      	ldr	r3, [r4, #24]
 80098fa:	b11b      	cbz	r3, 8009904 <__sinit+0x14>
 80098fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009900:	f7ff bff0 	b.w	80098e4 <__sinit_lock_release>
 8009904:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009908:	6523      	str	r3, [r4, #80]	; 0x50
 800990a:	4b13      	ldr	r3, [pc, #76]	; (8009958 <__sinit+0x68>)
 800990c:	4a13      	ldr	r2, [pc, #76]	; (800995c <__sinit+0x6c>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	62a2      	str	r2, [r4, #40]	; 0x28
 8009912:	42a3      	cmp	r3, r4
 8009914:	bf04      	itt	eq
 8009916:	2301      	moveq	r3, #1
 8009918:	61a3      	streq	r3, [r4, #24]
 800991a:	4620      	mov	r0, r4
 800991c:	f000 f820 	bl	8009960 <__sfp>
 8009920:	6060      	str	r0, [r4, #4]
 8009922:	4620      	mov	r0, r4
 8009924:	f000 f81c 	bl	8009960 <__sfp>
 8009928:	60a0      	str	r0, [r4, #8]
 800992a:	4620      	mov	r0, r4
 800992c:	f000 f818 	bl	8009960 <__sfp>
 8009930:	2200      	movs	r2, #0
 8009932:	60e0      	str	r0, [r4, #12]
 8009934:	2104      	movs	r1, #4
 8009936:	6860      	ldr	r0, [r4, #4]
 8009938:	f7ff ff82 	bl	8009840 <std>
 800993c:	68a0      	ldr	r0, [r4, #8]
 800993e:	2201      	movs	r2, #1
 8009940:	2109      	movs	r1, #9
 8009942:	f7ff ff7d 	bl	8009840 <std>
 8009946:	68e0      	ldr	r0, [r4, #12]
 8009948:	2202      	movs	r2, #2
 800994a:	2112      	movs	r1, #18
 800994c:	f7ff ff78 	bl	8009840 <std>
 8009950:	2301      	movs	r3, #1
 8009952:	61a3      	str	r3, [r4, #24]
 8009954:	e7d2      	b.n	80098fc <__sinit+0xc>
 8009956:	bf00      	nop
 8009958:	0800a7f0 	.word	0x0800a7f0
 800995c:	08009889 	.word	0x08009889

08009960 <__sfp>:
 8009960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009962:	4607      	mov	r7, r0
 8009964:	f7ff ffac 	bl	80098c0 <__sfp_lock_acquire>
 8009968:	4b1e      	ldr	r3, [pc, #120]	; (80099e4 <__sfp+0x84>)
 800996a:	681e      	ldr	r6, [r3, #0]
 800996c:	69b3      	ldr	r3, [r6, #24]
 800996e:	b913      	cbnz	r3, 8009976 <__sfp+0x16>
 8009970:	4630      	mov	r0, r6
 8009972:	f7ff ffbd 	bl	80098f0 <__sinit>
 8009976:	3648      	adds	r6, #72	; 0x48
 8009978:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800997c:	3b01      	subs	r3, #1
 800997e:	d503      	bpl.n	8009988 <__sfp+0x28>
 8009980:	6833      	ldr	r3, [r6, #0]
 8009982:	b30b      	cbz	r3, 80099c8 <__sfp+0x68>
 8009984:	6836      	ldr	r6, [r6, #0]
 8009986:	e7f7      	b.n	8009978 <__sfp+0x18>
 8009988:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800998c:	b9d5      	cbnz	r5, 80099c4 <__sfp+0x64>
 800998e:	4b16      	ldr	r3, [pc, #88]	; (80099e8 <__sfp+0x88>)
 8009990:	60e3      	str	r3, [r4, #12]
 8009992:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009996:	6665      	str	r5, [r4, #100]	; 0x64
 8009998:	f000 f847 	bl	8009a2a <__retarget_lock_init_recursive>
 800999c:	f7ff ff96 	bl	80098cc <__sfp_lock_release>
 80099a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80099a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80099a8:	6025      	str	r5, [r4, #0]
 80099aa:	61a5      	str	r5, [r4, #24]
 80099ac:	2208      	movs	r2, #8
 80099ae:	4629      	mov	r1, r5
 80099b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099b4:	f7ff ff24 	bl	8009800 <memset>
 80099b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099c0:	4620      	mov	r0, r4
 80099c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099c4:	3468      	adds	r4, #104	; 0x68
 80099c6:	e7d9      	b.n	800997c <__sfp+0x1c>
 80099c8:	2104      	movs	r1, #4
 80099ca:	4638      	mov	r0, r7
 80099cc:	f7ff ff62 	bl	8009894 <__sfmoreglue>
 80099d0:	4604      	mov	r4, r0
 80099d2:	6030      	str	r0, [r6, #0]
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d1d5      	bne.n	8009984 <__sfp+0x24>
 80099d8:	f7ff ff78 	bl	80098cc <__sfp_lock_release>
 80099dc:	230c      	movs	r3, #12
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	e7ee      	b.n	80099c0 <__sfp+0x60>
 80099e2:	bf00      	nop
 80099e4:	0800a7f0 	.word	0x0800a7f0
 80099e8:	ffff0001 	.word	0xffff0001

080099ec <_fwalk_reent>:
 80099ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f0:	4606      	mov	r6, r0
 80099f2:	4688      	mov	r8, r1
 80099f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099f8:	2700      	movs	r7, #0
 80099fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099fe:	f1b9 0901 	subs.w	r9, r9, #1
 8009a02:	d505      	bpl.n	8009a10 <_fwalk_reent+0x24>
 8009a04:	6824      	ldr	r4, [r4, #0]
 8009a06:	2c00      	cmp	r4, #0
 8009a08:	d1f7      	bne.n	80099fa <_fwalk_reent+0xe>
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a10:	89ab      	ldrh	r3, [r5, #12]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d907      	bls.n	8009a26 <_fwalk_reent+0x3a>
 8009a16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	d003      	beq.n	8009a26 <_fwalk_reent+0x3a>
 8009a1e:	4629      	mov	r1, r5
 8009a20:	4630      	mov	r0, r6
 8009a22:	47c0      	blx	r8
 8009a24:	4307      	orrs	r7, r0
 8009a26:	3568      	adds	r5, #104	; 0x68
 8009a28:	e7e9      	b.n	80099fe <_fwalk_reent+0x12>

08009a2a <__retarget_lock_init_recursive>:
 8009a2a:	4770      	bx	lr

08009a2c <__retarget_lock_acquire_recursive>:
 8009a2c:	4770      	bx	lr

08009a2e <__retarget_lock_release_recursive>:
 8009a2e:	4770      	bx	lr

08009a30 <sbrk_aligned>:
 8009a30:	b570      	push	{r4, r5, r6, lr}
 8009a32:	4e0e      	ldr	r6, [pc, #56]	; (8009a6c <sbrk_aligned+0x3c>)
 8009a34:	460c      	mov	r4, r1
 8009a36:	6831      	ldr	r1, [r6, #0]
 8009a38:	4605      	mov	r5, r0
 8009a3a:	b911      	cbnz	r1, 8009a42 <sbrk_aligned+0x12>
 8009a3c:	f000 fb7a 	bl	800a134 <_sbrk_r>
 8009a40:	6030      	str	r0, [r6, #0]
 8009a42:	4621      	mov	r1, r4
 8009a44:	4628      	mov	r0, r5
 8009a46:	f000 fb75 	bl	800a134 <_sbrk_r>
 8009a4a:	1c43      	adds	r3, r0, #1
 8009a4c:	d00a      	beq.n	8009a64 <sbrk_aligned+0x34>
 8009a4e:	1cc4      	adds	r4, r0, #3
 8009a50:	f024 0403 	bic.w	r4, r4, #3
 8009a54:	42a0      	cmp	r0, r4
 8009a56:	d007      	beq.n	8009a68 <sbrk_aligned+0x38>
 8009a58:	1a21      	subs	r1, r4, r0
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f000 fb6a 	bl	800a134 <_sbrk_r>
 8009a60:	3001      	adds	r0, #1
 8009a62:	d101      	bne.n	8009a68 <sbrk_aligned+0x38>
 8009a64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009a68:	4620      	mov	r0, r4
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}
 8009a6c:	20001434 	.word	0x20001434

08009a70 <_malloc_r>:
 8009a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a74:	1ccd      	adds	r5, r1, #3
 8009a76:	f025 0503 	bic.w	r5, r5, #3
 8009a7a:	3508      	adds	r5, #8
 8009a7c:	2d0c      	cmp	r5, #12
 8009a7e:	bf38      	it	cc
 8009a80:	250c      	movcc	r5, #12
 8009a82:	2d00      	cmp	r5, #0
 8009a84:	4607      	mov	r7, r0
 8009a86:	db01      	blt.n	8009a8c <_malloc_r+0x1c>
 8009a88:	42a9      	cmp	r1, r5
 8009a8a:	d905      	bls.n	8009a98 <_malloc_r+0x28>
 8009a8c:	230c      	movs	r3, #12
 8009a8e:	603b      	str	r3, [r7, #0]
 8009a90:	2600      	movs	r6, #0
 8009a92:	4630      	mov	r0, r6
 8009a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a98:	4e2e      	ldr	r6, [pc, #184]	; (8009b54 <_malloc_r+0xe4>)
 8009a9a:	f000 fdbb 	bl	800a614 <__malloc_lock>
 8009a9e:	6833      	ldr	r3, [r6, #0]
 8009aa0:	461c      	mov	r4, r3
 8009aa2:	bb34      	cbnz	r4, 8009af2 <_malloc_r+0x82>
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	f7ff ffc2 	bl	8009a30 <sbrk_aligned>
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	4604      	mov	r4, r0
 8009ab0:	d14d      	bne.n	8009b4e <_malloc_r+0xde>
 8009ab2:	6834      	ldr	r4, [r6, #0]
 8009ab4:	4626      	mov	r6, r4
 8009ab6:	2e00      	cmp	r6, #0
 8009ab8:	d140      	bne.n	8009b3c <_malloc_r+0xcc>
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	4631      	mov	r1, r6
 8009abe:	4638      	mov	r0, r7
 8009ac0:	eb04 0803 	add.w	r8, r4, r3
 8009ac4:	f000 fb36 	bl	800a134 <_sbrk_r>
 8009ac8:	4580      	cmp	r8, r0
 8009aca:	d13a      	bne.n	8009b42 <_malloc_r+0xd2>
 8009acc:	6821      	ldr	r1, [r4, #0]
 8009ace:	3503      	adds	r5, #3
 8009ad0:	1a6d      	subs	r5, r5, r1
 8009ad2:	f025 0503 	bic.w	r5, r5, #3
 8009ad6:	3508      	adds	r5, #8
 8009ad8:	2d0c      	cmp	r5, #12
 8009ada:	bf38      	it	cc
 8009adc:	250c      	movcc	r5, #12
 8009ade:	4629      	mov	r1, r5
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	f7ff ffa5 	bl	8009a30 <sbrk_aligned>
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	d02b      	beq.n	8009b42 <_malloc_r+0xd2>
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	442b      	add	r3, r5
 8009aee:	6023      	str	r3, [r4, #0]
 8009af0:	e00e      	b.n	8009b10 <_malloc_r+0xa0>
 8009af2:	6822      	ldr	r2, [r4, #0]
 8009af4:	1b52      	subs	r2, r2, r5
 8009af6:	d41e      	bmi.n	8009b36 <_malloc_r+0xc6>
 8009af8:	2a0b      	cmp	r2, #11
 8009afa:	d916      	bls.n	8009b2a <_malloc_r+0xba>
 8009afc:	1961      	adds	r1, r4, r5
 8009afe:	42a3      	cmp	r3, r4
 8009b00:	6025      	str	r5, [r4, #0]
 8009b02:	bf18      	it	ne
 8009b04:	6059      	strne	r1, [r3, #4]
 8009b06:	6863      	ldr	r3, [r4, #4]
 8009b08:	bf08      	it	eq
 8009b0a:	6031      	streq	r1, [r6, #0]
 8009b0c:	5162      	str	r2, [r4, r5]
 8009b0e:	604b      	str	r3, [r1, #4]
 8009b10:	4638      	mov	r0, r7
 8009b12:	f104 060b 	add.w	r6, r4, #11
 8009b16:	f000 fd83 	bl	800a620 <__malloc_unlock>
 8009b1a:	f026 0607 	bic.w	r6, r6, #7
 8009b1e:	1d23      	adds	r3, r4, #4
 8009b20:	1af2      	subs	r2, r6, r3
 8009b22:	d0b6      	beq.n	8009a92 <_malloc_r+0x22>
 8009b24:	1b9b      	subs	r3, r3, r6
 8009b26:	50a3      	str	r3, [r4, r2]
 8009b28:	e7b3      	b.n	8009a92 <_malloc_r+0x22>
 8009b2a:	6862      	ldr	r2, [r4, #4]
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	bf0c      	ite	eq
 8009b30:	6032      	streq	r2, [r6, #0]
 8009b32:	605a      	strne	r2, [r3, #4]
 8009b34:	e7ec      	b.n	8009b10 <_malloc_r+0xa0>
 8009b36:	4623      	mov	r3, r4
 8009b38:	6864      	ldr	r4, [r4, #4]
 8009b3a:	e7b2      	b.n	8009aa2 <_malloc_r+0x32>
 8009b3c:	4634      	mov	r4, r6
 8009b3e:	6876      	ldr	r6, [r6, #4]
 8009b40:	e7b9      	b.n	8009ab6 <_malloc_r+0x46>
 8009b42:	230c      	movs	r3, #12
 8009b44:	603b      	str	r3, [r7, #0]
 8009b46:	4638      	mov	r0, r7
 8009b48:	f000 fd6a 	bl	800a620 <__malloc_unlock>
 8009b4c:	e7a1      	b.n	8009a92 <_malloc_r+0x22>
 8009b4e:	6025      	str	r5, [r4, #0]
 8009b50:	e7de      	b.n	8009b10 <_malloc_r+0xa0>
 8009b52:	bf00      	nop
 8009b54:	20001430 	.word	0x20001430

08009b58 <__sfputc_r>:
 8009b58:	6893      	ldr	r3, [r2, #8]
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	b410      	push	{r4}
 8009b60:	6093      	str	r3, [r2, #8]
 8009b62:	da08      	bge.n	8009b76 <__sfputc_r+0x1e>
 8009b64:	6994      	ldr	r4, [r2, #24]
 8009b66:	42a3      	cmp	r3, r4
 8009b68:	db01      	blt.n	8009b6e <__sfputc_r+0x16>
 8009b6a:	290a      	cmp	r1, #10
 8009b6c:	d103      	bne.n	8009b76 <__sfputc_r+0x1e>
 8009b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b72:	f000 bb33 	b.w	800a1dc <__swbuf_r>
 8009b76:	6813      	ldr	r3, [r2, #0]
 8009b78:	1c58      	adds	r0, r3, #1
 8009b7a:	6010      	str	r0, [r2, #0]
 8009b7c:	7019      	strb	r1, [r3, #0]
 8009b7e:	4608      	mov	r0, r1
 8009b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <__sfputs_r>:
 8009b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b88:	4606      	mov	r6, r0
 8009b8a:	460f      	mov	r7, r1
 8009b8c:	4614      	mov	r4, r2
 8009b8e:	18d5      	adds	r5, r2, r3
 8009b90:	42ac      	cmp	r4, r5
 8009b92:	d101      	bne.n	8009b98 <__sfputs_r+0x12>
 8009b94:	2000      	movs	r0, #0
 8009b96:	e007      	b.n	8009ba8 <__sfputs_r+0x22>
 8009b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9c:	463a      	mov	r2, r7
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f7ff ffda 	bl	8009b58 <__sfputc_r>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d1f3      	bne.n	8009b90 <__sfputs_r+0xa>
 8009ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bac <_vfiprintf_r>:
 8009bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb0:	460d      	mov	r5, r1
 8009bb2:	b09d      	sub	sp, #116	; 0x74
 8009bb4:	4614      	mov	r4, r2
 8009bb6:	4698      	mov	r8, r3
 8009bb8:	4606      	mov	r6, r0
 8009bba:	b118      	cbz	r0, 8009bc4 <_vfiprintf_r+0x18>
 8009bbc:	6983      	ldr	r3, [r0, #24]
 8009bbe:	b90b      	cbnz	r3, 8009bc4 <_vfiprintf_r+0x18>
 8009bc0:	f7ff fe96 	bl	80098f0 <__sinit>
 8009bc4:	4b89      	ldr	r3, [pc, #548]	; (8009dec <_vfiprintf_r+0x240>)
 8009bc6:	429d      	cmp	r5, r3
 8009bc8:	d11b      	bne.n	8009c02 <_vfiprintf_r+0x56>
 8009bca:	6875      	ldr	r5, [r6, #4]
 8009bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bce:	07d9      	lsls	r1, r3, #31
 8009bd0:	d405      	bmi.n	8009bde <_vfiprintf_r+0x32>
 8009bd2:	89ab      	ldrh	r3, [r5, #12]
 8009bd4:	059a      	lsls	r2, r3, #22
 8009bd6:	d402      	bmi.n	8009bde <_vfiprintf_r+0x32>
 8009bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bda:	f7ff ff27 	bl	8009a2c <__retarget_lock_acquire_recursive>
 8009bde:	89ab      	ldrh	r3, [r5, #12]
 8009be0:	071b      	lsls	r3, r3, #28
 8009be2:	d501      	bpl.n	8009be8 <_vfiprintf_r+0x3c>
 8009be4:	692b      	ldr	r3, [r5, #16]
 8009be6:	b9eb      	cbnz	r3, 8009c24 <_vfiprintf_r+0x78>
 8009be8:	4629      	mov	r1, r5
 8009bea:	4630      	mov	r0, r6
 8009bec:	f000 fb5a 	bl	800a2a4 <__swsetup_r>
 8009bf0:	b1c0      	cbz	r0, 8009c24 <_vfiprintf_r+0x78>
 8009bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bf4:	07dc      	lsls	r4, r3, #31
 8009bf6:	d50e      	bpl.n	8009c16 <_vfiprintf_r+0x6a>
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bfc:	b01d      	add	sp, #116	; 0x74
 8009bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c02:	4b7b      	ldr	r3, [pc, #492]	; (8009df0 <_vfiprintf_r+0x244>)
 8009c04:	429d      	cmp	r5, r3
 8009c06:	d101      	bne.n	8009c0c <_vfiprintf_r+0x60>
 8009c08:	68b5      	ldr	r5, [r6, #8]
 8009c0a:	e7df      	b.n	8009bcc <_vfiprintf_r+0x20>
 8009c0c:	4b79      	ldr	r3, [pc, #484]	; (8009df4 <_vfiprintf_r+0x248>)
 8009c0e:	429d      	cmp	r5, r3
 8009c10:	bf08      	it	eq
 8009c12:	68f5      	ldreq	r5, [r6, #12]
 8009c14:	e7da      	b.n	8009bcc <_vfiprintf_r+0x20>
 8009c16:	89ab      	ldrh	r3, [r5, #12]
 8009c18:	0598      	lsls	r0, r3, #22
 8009c1a:	d4ed      	bmi.n	8009bf8 <_vfiprintf_r+0x4c>
 8009c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c1e:	f7ff ff06 	bl	8009a2e <__retarget_lock_release_recursive>
 8009c22:	e7e9      	b.n	8009bf8 <_vfiprintf_r+0x4c>
 8009c24:	2300      	movs	r3, #0
 8009c26:	9309      	str	r3, [sp, #36]	; 0x24
 8009c28:	2320      	movs	r3, #32
 8009c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c32:	2330      	movs	r3, #48	; 0x30
 8009c34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009df8 <_vfiprintf_r+0x24c>
 8009c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c3c:	f04f 0901 	mov.w	r9, #1
 8009c40:	4623      	mov	r3, r4
 8009c42:	469a      	mov	sl, r3
 8009c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c48:	b10a      	cbz	r2, 8009c4e <_vfiprintf_r+0xa2>
 8009c4a:	2a25      	cmp	r2, #37	; 0x25
 8009c4c:	d1f9      	bne.n	8009c42 <_vfiprintf_r+0x96>
 8009c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c52:	d00b      	beq.n	8009c6c <_vfiprintf_r+0xc0>
 8009c54:	465b      	mov	r3, fp
 8009c56:	4622      	mov	r2, r4
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f7ff ff93 	bl	8009b86 <__sfputs_r>
 8009c60:	3001      	adds	r0, #1
 8009c62:	f000 80aa 	beq.w	8009dba <_vfiprintf_r+0x20e>
 8009c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c68:	445a      	add	r2, fp
 8009c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 80a2 	beq.w	8009dba <_vfiprintf_r+0x20e>
 8009c76:	2300      	movs	r3, #0
 8009c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c80:	f10a 0a01 	add.w	sl, sl, #1
 8009c84:	9304      	str	r3, [sp, #16]
 8009c86:	9307      	str	r3, [sp, #28]
 8009c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8009c8e:	4654      	mov	r4, sl
 8009c90:	2205      	movs	r2, #5
 8009c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c96:	4858      	ldr	r0, [pc, #352]	; (8009df8 <_vfiprintf_r+0x24c>)
 8009c98:	f7f6 fa9a 	bl	80001d0 <memchr>
 8009c9c:	9a04      	ldr	r2, [sp, #16]
 8009c9e:	b9d8      	cbnz	r0, 8009cd8 <_vfiprintf_r+0x12c>
 8009ca0:	06d1      	lsls	r1, r2, #27
 8009ca2:	bf44      	itt	mi
 8009ca4:	2320      	movmi	r3, #32
 8009ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009caa:	0713      	lsls	r3, r2, #28
 8009cac:	bf44      	itt	mi
 8009cae:	232b      	movmi	r3, #43	; 0x2b
 8009cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cba:	d015      	beq.n	8009ce8 <_vfiprintf_r+0x13c>
 8009cbc:	9a07      	ldr	r2, [sp, #28]
 8009cbe:	4654      	mov	r4, sl
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	f04f 0c0a 	mov.w	ip, #10
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ccc:	3b30      	subs	r3, #48	; 0x30
 8009cce:	2b09      	cmp	r3, #9
 8009cd0:	d94e      	bls.n	8009d70 <_vfiprintf_r+0x1c4>
 8009cd2:	b1b0      	cbz	r0, 8009d02 <_vfiprintf_r+0x156>
 8009cd4:	9207      	str	r2, [sp, #28]
 8009cd6:	e014      	b.n	8009d02 <_vfiprintf_r+0x156>
 8009cd8:	eba0 0308 	sub.w	r3, r0, r8
 8009cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	9304      	str	r3, [sp, #16]
 8009ce4:	46a2      	mov	sl, r4
 8009ce6:	e7d2      	b.n	8009c8e <_vfiprintf_r+0xe2>
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	1d19      	adds	r1, r3, #4
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	9103      	str	r1, [sp, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	bfbb      	ittet	lt
 8009cf4:	425b      	neglt	r3, r3
 8009cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8009cfa:	9307      	strge	r3, [sp, #28]
 8009cfc:	9307      	strlt	r3, [sp, #28]
 8009cfe:	bfb8      	it	lt
 8009d00:	9204      	strlt	r2, [sp, #16]
 8009d02:	7823      	ldrb	r3, [r4, #0]
 8009d04:	2b2e      	cmp	r3, #46	; 0x2e
 8009d06:	d10c      	bne.n	8009d22 <_vfiprintf_r+0x176>
 8009d08:	7863      	ldrb	r3, [r4, #1]
 8009d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d0c:	d135      	bne.n	8009d7a <_vfiprintf_r+0x1ce>
 8009d0e:	9b03      	ldr	r3, [sp, #12]
 8009d10:	1d1a      	adds	r2, r3, #4
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	9203      	str	r2, [sp, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	bfb8      	it	lt
 8009d1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d1e:	3402      	adds	r4, #2
 8009d20:	9305      	str	r3, [sp, #20]
 8009d22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e08 <_vfiprintf_r+0x25c>
 8009d26:	7821      	ldrb	r1, [r4, #0]
 8009d28:	2203      	movs	r2, #3
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	f7f6 fa50 	bl	80001d0 <memchr>
 8009d30:	b140      	cbz	r0, 8009d44 <_vfiprintf_r+0x198>
 8009d32:	2340      	movs	r3, #64	; 0x40
 8009d34:	eba0 000a 	sub.w	r0, r0, sl
 8009d38:	fa03 f000 	lsl.w	r0, r3, r0
 8009d3c:	9b04      	ldr	r3, [sp, #16]
 8009d3e:	4303      	orrs	r3, r0
 8009d40:	3401      	adds	r4, #1
 8009d42:	9304      	str	r3, [sp, #16]
 8009d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d48:	482c      	ldr	r0, [pc, #176]	; (8009dfc <_vfiprintf_r+0x250>)
 8009d4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d4e:	2206      	movs	r2, #6
 8009d50:	f7f6 fa3e 	bl	80001d0 <memchr>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d03f      	beq.n	8009dd8 <_vfiprintf_r+0x22c>
 8009d58:	4b29      	ldr	r3, [pc, #164]	; (8009e00 <_vfiprintf_r+0x254>)
 8009d5a:	bb1b      	cbnz	r3, 8009da4 <_vfiprintf_r+0x1f8>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	3307      	adds	r3, #7
 8009d60:	f023 0307 	bic.w	r3, r3, #7
 8009d64:	3308      	adds	r3, #8
 8009d66:	9303      	str	r3, [sp, #12]
 8009d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6a:	443b      	add	r3, r7
 8009d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6e:	e767      	b.n	8009c40 <_vfiprintf_r+0x94>
 8009d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d74:	460c      	mov	r4, r1
 8009d76:	2001      	movs	r0, #1
 8009d78:	e7a5      	b.n	8009cc6 <_vfiprintf_r+0x11a>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	3401      	adds	r4, #1
 8009d7e:	9305      	str	r3, [sp, #20]
 8009d80:	4619      	mov	r1, r3
 8009d82:	f04f 0c0a 	mov.w	ip, #10
 8009d86:	4620      	mov	r0, r4
 8009d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d8c:	3a30      	subs	r2, #48	; 0x30
 8009d8e:	2a09      	cmp	r2, #9
 8009d90:	d903      	bls.n	8009d9a <_vfiprintf_r+0x1ee>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0c5      	beq.n	8009d22 <_vfiprintf_r+0x176>
 8009d96:	9105      	str	r1, [sp, #20]
 8009d98:	e7c3      	b.n	8009d22 <_vfiprintf_r+0x176>
 8009d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d9e:	4604      	mov	r4, r0
 8009da0:	2301      	movs	r3, #1
 8009da2:	e7f0      	b.n	8009d86 <_vfiprintf_r+0x1da>
 8009da4:	ab03      	add	r3, sp, #12
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	462a      	mov	r2, r5
 8009daa:	4b16      	ldr	r3, [pc, #88]	; (8009e04 <_vfiprintf_r+0x258>)
 8009dac:	a904      	add	r1, sp, #16
 8009dae:	4630      	mov	r0, r6
 8009db0:	f3af 8000 	nop.w
 8009db4:	4607      	mov	r7, r0
 8009db6:	1c78      	adds	r0, r7, #1
 8009db8:	d1d6      	bne.n	8009d68 <_vfiprintf_r+0x1bc>
 8009dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dbc:	07d9      	lsls	r1, r3, #31
 8009dbe:	d405      	bmi.n	8009dcc <_vfiprintf_r+0x220>
 8009dc0:	89ab      	ldrh	r3, [r5, #12]
 8009dc2:	059a      	lsls	r2, r3, #22
 8009dc4:	d402      	bmi.n	8009dcc <_vfiprintf_r+0x220>
 8009dc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dc8:	f7ff fe31 	bl	8009a2e <__retarget_lock_release_recursive>
 8009dcc:	89ab      	ldrh	r3, [r5, #12]
 8009dce:	065b      	lsls	r3, r3, #25
 8009dd0:	f53f af12 	bmi.w	8009bf8 <_vfiprintf_r+0x4c>
 8009dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dd6:	e711      	b.n	8009bfc <_vfiprintf_r+0x50>
 8009dd8:	ab03      	add	r3, sp, #12
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	462a      	mov	r2, r5
 8009dde:	4b09      	ldr	r3, [pc, #36]	; (8009e04 <_vfiprintf_r+0x258>)
 8009de0:	a904      	add	r1, sp, #16
 8009de2:	4630      	mov	r0, r6
 8009de4:	f000 f880 	bl	8009ee8 <_printf_i>
 8009de8:	e7e4      	b.n	8009db4 <_vfiprintf_r+0x208>
 8009dea:	bf00      	nop
 8009dec:	0800a814 	.word	0x0800a814
 8009df0:	0800a834 	.word	0x0800a834
 8009df4:	0800a7f4 	.word	0x0800a7f4
 8009df8:	0800a854 	.word	0x0800a854
 8009dfc:	0800a85e 	.word	0x0800a85e
 8009e00:	00000000 	.word	0x00000000
 8009e04:	08009b87 	.word	0x08009b87
 8009e08:	0800a85a 	.word	0x0800a85a

08009e0c <_printf_common>:
 8009e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e10:	4616      	mov	r6, r2
 8009e12:	4699      	mov	r9, r3
 8009e14:	688a      	ldr	r2, [r1, #8]
 8009e16:	690b      	ldr	r3, [r1, #16]
 8009e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	bfb8      	it	lt
 8009e20:	4613      	movlt	r3, r2
 8009e22:	6033      	str	r3, [r6, #0]
 8009e24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e28:	4607      	mov	r7, r0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	b10a      	cbz	r2, 8009e32 <_printf_common+0x26>
 8009e2e:	3301      	adds	r3, #1
 8009e30:	6033      	str	r3, [r6, #0]
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	0699      	lsls	r1, r3, #26
 8009e36:	bf42      	ittt	mi
 8009e38:	6833      	ldrmi	r3, [r6, #0]
 8009e3a:	3302      	addmi	r3, #2
 8009e3c:	6033      	strmi	r3, [r6, #0]
 8009e3e:	6825      	ldr	r5, [r4, #0]
 8009e40:	f015 0506 	ands.w	r5, r5, #6
 8009e44:	d106      	bne.n	8009e54 <_printf_common+0x48>
 8009e46:	f104 0a19 	add.w	sl, r4, #25
 8009e4a:	68e3      	ldr	r3, [r4, #12]
 8009e4c:	6832      	ldr	r2, [r6, #0]
 8009e4e:	1a9b      	subs	r3, r3, r2
 8009e50:	42ab      	cmp	r3, r5
 8009e52:	dc26      	bgt.n	8009ea2 <_printf_common+0x96>
 8009e54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e58:	1e13      	subs	r3, r2, #0
 8009e5a:	6822      	ldr	r2, [r4, #0]
 8009e5c:	bf18      	it	ne
 8009e5e:	2301      	movne	r3, #1
 8009e60:	0692      	lsls	r2, r2, #26
 8009e62:	d42b      	bmi.n	8009ebc <_printf_common+0xb0>
 8009e64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e68:	4649      	mov	r1, r9
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	47c0      	blx	r8
 8009e6e:	3001      	adds	r0, #1
 8009e70:	d01e      	beq.n	8009eb0 <_printf_common+0xa4>
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	68e5      	ldr	r5, [r4, #12]
 8009e76:	6832      	ldr	r2, [r6, #0]
 8009e78:	f003 0306 	and.w	r3, r3, #6
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	bf08      	it	eq
 8009e80:	1aad      	subeq	r5, r5, r2
 8009e82:	68a3      	ldr	r3, [r4, #8]
 8009e84:	6922      	ldr	r2, [r4, #16]
 8009e86:	bf0c      	ite	eq
 8009e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e8c:	2500      	movne	r5, #0
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	bfc4      	itt	gt
 8009e92:	1a9b      	subgt	r3, r3, r2
 8009e94:	18ed      	addgt	r5, r5, r3
 8009e96:	2600      	movs	r6, #0
 8009e98:	341a      	adds	r4, #26
 8009e9a:	42b5      	cmp	r5, r6
 8009e9c:	d11a      	bne.n	8009ed4 <_printf_common+0xc8>
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	e008      	b.n	8009eb4 <_printf_common+0xa8>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	4652      	mov	r2, sl
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	47c0      	blx	r8
 8009eac:	3001      	adds	r0, #1
 8009eae:	d103      	bne.n	8009eb8 <_printf_common+0xac>
 8009eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb8:	3501      	adds	r5, #1
 8009eba:	e7c6      	b.n	8009e4a <_printf_common+0x3e>
 8009ebc:	18e1      	adds	r1, r4, r3
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	2030      	movs	r0, #48	; 0x30
 8009ec2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ec6:	4422      	add	r2, r4
 8009ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ecc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ed0:	3302      	adds	r3, #2
 8009ed2:	e7c7      	b.n	8009e64 <_printf_common+0x58>
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	4622      	mov	r2, r4
 8009ed8:	4649      	mov	r1, r9
 8009eda:	4638      	mov	r0, r7
 8009edc:	47c0      	blx	r8
 8009ede:	3001      	adds	r0, #1
 8009ee0:	d0e6      	beq.n	8009eb0 <_printf_common+0xa4>
 8009ee2:	3601      	adds	r6, #1
 8009ee4:	e7d9      	b.n	8009e9a <_printf_common+0x8e>
	...

08009ee8 <_printf_i>:
 8009ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eec:	7e0f      	ldrb	r7, [r1, #24]
 8009eee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ef0:	2f78      	cmp	r7, #120	; 0x78
 8009ef2:	4691      	mov	r9, r2
 8009ef4:	4680      	mov	r8, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	469a      	mov	sl, r3
 8009efa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009efe:	d807      	bhi.n	8009f10 <_printf_i+0x28>
 8009f00:	2f62      	cmp	r7, #98	; 0x62
 8009f02:	d80a      	bhi.n	8009f1a <_printf_i+0x32>
 8009f04:	2f00      	cmp	r7, #0
 8009f06:	f000 80d8 	beq.w	800a0ba <_printf_i+0x1d2>
 8009f0a:	2f58      	cmp	r7, #88	; 0x58
 8009f0c:	f000 80a3 	beq.w	800a056 <_printf_i+0x16e>
 8009f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f18:	e03a      	b.n	8009f90 <_printf_i+0xa8>
 8009f1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f1e:	2b15      	cmp	r3, #21
 8009f20:	d8f6      	bhi.n	8009f10 <_printf_i+0x28>
 8009f22:	a101      	add	r1, pc, #4	; (adr r1, 8009f28 <_printf_i+0x40>)
 8009f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f28:	08009f81 	.word	0x08009f81
 8009f2c:	08009f95 	.word	0x08009f95
 8009f30:	08009f11 	.word	0x08009f11
 8009f34:	08009f11 	.word	0x08009f11
 8009f38:	08009f11 	.word	0x08009f11
 8009f3c:	08009f11 	.word	0x08009f11
 8009f40:	08009f95 	.word	0x08009f95
 8009f44:	08009f11 	.word	0x08009f11
 8009f48:	08009f11 	.word	0x08009f11
 8009f4c:	08009f11 	.word	0x08009f11
 8009f50:	08009f11 	.word	0x08009f11
 8009f54:	0800a0a1 	.word	0x0800a0a1
 8009f58:	08009fc5 	.word	0x08009fc5
 8009f5c:	0800a083 	.word	0x0800a083
 8009f60:	08009f11 	.word	0x08009f11
 8009f64:	08009f11 	.word	0x08009f11
 8009f68:	0800a0c3 	.word	0x0800a0c3
 8009f6c:	08009f11 	.word	0x08009f11
 8009f70:	08009fc5 	.word	0x08009fc5
 8009f74:	08009f11 	.word	0x08009f11
 8009f78:	08009f11 	.word	0x08009f11
 8009f7c:	0800a08b 	.word	0x0800a08b
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	1d1a      	adds	r2, r3, #4
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	602a      	str	r2, [r5, #0]
 8009f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f90:	2301      	movs	r3, #1
 8009f92:	e0a3      	b.n	800a0dc <_printf_i+0x1f4>
 8009f94:	6820      	ldr	r0, [r4, #0]
 8009f96:	6829      	ldr	r1, [r5, #0]
 8009f98:	0606      	lsls	r6, r0, #24
 8009f9a:	f101 0304 	add.w	r3, r1, #4
 8009f9e:	d50a      	bpl.n	8009fb6 <_printf_i+0xce>
 8009fa0:	680e      	ldr	r6, [r1, #0]
 8009fa2:	602b      	str	r3, [r5, #0]
 8009fa4:	2e00      	cmp	r6, #0
 8009fa6:	da03      	bge.n	8009fb0 <_printf_i+0xc8>
 8009fa8:	232d      	movs	r3, #45	; 0x2d
 8009faa:	4276      	negs	r6, r6
 8009fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fb0:	485e      	ldr	r0, [pc, #376]	; (800a12c <_printf_i+0x244>)
 8009fb2:	230a      	movs	r3, #10
 8009fb4:	e019      	b.n	8009fea <_printf_i+0x102>
 8009fb6:	680e      	ldr	r6, [r1, #0]
 8009fb8:	602b      	str	r3, [r5, #0]
 8009fba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009fbe:	bf18      	it	ne
 8009fc0:	b236      	sxthne	r6, r6
 8009fc2:	e7ef      	b.n	8009fa4 <_printf_i+0xbc>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	6820      	ldr	r0, [r4, #0]
 8009fc8:	1d19      	adds	r1, r3, #4
 8009fca:	6029      	str	r1, [r5, #0]
 8009fcc:	0601      	lsls	r1, r0, #24
 8009fce:	d501      	bpl.n	8009fd4 <_printf_i+0xec>
 8009fd0:	681e      	ldr	r6, [r3, #0]
 8009fd2:	e002      	b.n	8009fda <_printf_i+0xf2>
 8009fd4:	0646      	lsls	r6, r0, #25
 8009fd6:	d5fb      	bpl.n	8009fd0 <_printf_i+0xe8>
 8009fd8:	881e      	ldrh	r6, [r3, #0]
 8009fda:	4854      	ldr	r0, [pc, #336]	; (800a12c <_printf_i+0x244>)
 8009fdc:	2f6f      	cmp	r7, #111	; 0x6f
 8009fde:	bf0c      	ite	eq
 8009fe0:	2308      	moveq	r3, #8
 8009fe2:	230a      	movne	r3, #10
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fea:	6865      	ldr	r5, [r4, #4]
 8009fec:	60a5      	str	r5, [r4, #8]
 8009fee:	2d00      	cmp	r5, #0
 8009ff0:	bfa2      	ittt	ge
 8009ff2:	6821      	ldrge	r1, [r4, #0]
 8009ff4:	f021 0104 	bicge.w	r1, r1, #4
 8009ff8:	6021      	strge	r1, [r4, #0]
 8009ffa:	b90e      	cbnz	r6, 800a000 <_printf_i+0x118>
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	d04d      	beq.n	800a09c <_printf_i+0x1b4>
 800a000:	4615      	mov	r5, r2
 800a002:	fbb6 f1f3 	udiv	r1, r6, r3
 800a006:	fb03 6711 	mls	r7, r3, r1, r6
 800a00a:	5dc7      	ldrb	r7, [r0, r7]
 800a00c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a010:	4637      	mov	r7, r6
 800a012:	42bb      	cmp	r3, r7
 800a014:	460e      	mov	r6, r1
 800a016:	d9f4      	bls.n	800a002 <_printf_i+0x11a>
 800a018:	2b08      	cmp	r3, #8
 800a01a:	d10b      	bne.n	800a034 <_printf_i+0x14c>
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	07de      	lsls	r6, r3, #31
 800a020:	d508      	bpl.n	800a034 <_printf_i+0x14c>
 800a022:	6923      	ldr	r3, [r4, #16]
 800a024:	6861      	ldr	r1, [r4, #4]
 800a026:	4299      	cmp	r1, r3
 800a028:	bfde      	ittt	le
 800a02a:	2330      	movle	r3, #48	; 0x30
 800a02c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a030:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a034:	1b52      	subs	r2, r2, r5
 800a036:	6122      	str	r2, [r4, #16]
 800a038:	f8cd a000 	str.w	sl, [sp]
 800a03c:	464b      	mov	r3, r9
 800a03e:	aa03      	add	r2, sp, #12
 800a040:	4621      	mov	r1, r4
 800a042:	4640      	mov	r0, r8
 800a044:	f7ff fee2 	bl	8009e0c <_printf_common>
 800a048:	3001      	adds	r0, #1
 800a04a:	d14c      	bne.n	800a0e6 <_printf_i+0x1fe>
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a050:	b004      	add	sp, #16
 800a052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a056:	4835      	ldr	r0, [pc, #212]	; (800a12c <_printf_i+0x244>)
 800a058:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a05c:	6829      	ldr	r1, [r5, #0]
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	f851 6b04 	ldr.w	r6, [r1], #4
 800a064:	6029      	str	r1, [r5, #0]
 800a066:	061d      	lsls	r5, r3, #24
 800a068:	d514      	bpl.n	800a094 <_printf_i+0x1ac>
 800a06a:	07df      	lsls	r7, r3, #31
 800a06c:	bf44      	itt	mi
 800a06e:	f043 0320 	orrmi.w	r3, r3, #32
 800a072:	6023      	strmi	r3, [r4, #0]
 800a074:	b91e      	cbnz	r6, 800a07e <_printf_i+0x196>
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	f023 0320 	bic.w	r3, r3, #32
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	2310      	movs	r3, #16
 800a080:	e7b0      	b.n	8009fe4 <_printf_i+0xfc>
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	f043 0320 	orr.w	r3, r3, #32
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	2378      	movs	r3, #120	; 0x78
 800a08c:	4828      	ldr	r0, [pc, #160]	; (800a130 <_printf_i+0x248>)
 800a08e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a092:	e7e3      	b.n	800a05c <_printf_i+0x174>
 800a094:	0659      	lsls	r1, r3, #25
 800a096:	bf48      	it	mi
 800a098:	b2b6      	uxthmi	r6, r6
 800a09a:	e7e6      	b.n	800a06a <_printf_i+0x182>
 800a09c:	4615      	mov	r5, r2
 800a09e:	e7bb      	b.n	800a018 <_printf_i+0x130>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	6826      	ldr	r6, [r4, #0]
 800a0a4:	6961      	ldr	r1, [r4, #20]
 800a0a6:	1d18      	adds	r0, r3, #4
 800a0a8:	6028      	str	r0, [r5, #0]
 800a0aa:	0635      	lsls	r5, r6, #24
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	d501      	bpl.n	800a0b4 <_printf_i+0x1cc>
 800a0b0:	6019      	str	r1, [r3, #0]
 800a0b2:	e002      	b.n	800a0ba <_printf_i+0x1d2>
 800a0b4:	0670      	lsls	r0, r6, #25
 800a0b6:	d5fb      	bpl.n	800a0b0 <_printf_i+0x1c8>
 800a0b8:	8019      	strh	r1, [r3, #0]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	6123      	str	r3, [r4, #16]
 800a0be:	4615      	mov	r5, r2
 800a0c0:	e7ba      	b.n	800a038 <_printf_i+0x150>
 800a0c2:	682b      	ldr	r3, [r5, #0]
 800a0c4:	1d1a      	adds	r2, r3, #4
 800a0c6:	602a      	str	r2, [r5, #0]
 800a0c8:	681d      	ldr	r5, [r3, #0]
 800a0ca:	6862      	ldr	r2, [r4, #4]
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	f7f6 f87e 	bl	80001d0 <memchr>
 800a0d4:	b108      	cbz	r0, 800a0da <_printf_i+0x1f2>
 800a0d6:	1b40      	subs	r0, r0, r5
 800a0d8:	6060      	str	r0, [r4, #4]
 800a0da:	6863      	ldr	r3, [r4, #4]
 800a0dc:	6123      	str	r3, [r4, #16]
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0e4:	e7a8      	b.n	800a038 <_printf_i+0x150>
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	462a      	mov	r2, r5
 800a0ea:	4649      	mov	r1, r9
 800a0ec:	4640      	mov	r0, r8
 800a0ee:	47d0      	blx	sl
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d0ab      	beq.n	800a04c <_printf_i+0x164>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	079b      	lsls	r3, r3, #30
 800a0f8:	d413      	bmi.n	800a122 <_printf_i+0x23a>
 800a0fa:	68e0      	ldr	r0, [r4, #12]
 800a0fc:	9b03      	ldr	r3, [sp, #12]
 800a0fe:	4298      	cmp	r0, r3
 800a100:	bfb8      	it	lt
 800a102:	4618      	movlt	r0, r3
 800a104:	e7a4      	b.n	800a050 <_printf_i+0x168>
 800a106:	2301      	movs	r3, #1
 800a108:	4632      	mov	r2, r6
 800a10a:	4649      	mov	r1, r9
 800a10c:	4640      	mov	r0, r8
 800a10e:	47d0      	blx	sl
 800a110:	3001      	adds	r0, #1
 800a112:	d09b      	beq.n	800a04c <_printf_i+0x164>
 800a114:	3501      	adds	r5, #1
 800a116:	68e3      	ldr	r3, [r4, #12]
 800a118:	9903      	ldr	r1, [sp, #12]
 800a11a:	1a5b      	subs	r3, r3, r1
 800a11c:	42ab      	cmp	r3, r5
 800a11e:	dcf2      	bgt.n	800a106 <_printf_i+0x21e>
 800a120:	e7eb      	b.n	800a0fa <_printf_i+0x212>
 800a122:	2500      	movs	r5, #0
 800a124:	f104 0619 	add.w	r6, r4, #25
 800a128:	e7f5      	b.n	800a116 <_printf_i+0x22e>
 800a12a:	bf00      	nop
 800a12c:	0800a865 	.word	0x0800a865
 800a130:	0800a876 	.word	0x0800a876

0800a134 <_sbrk_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	4d06      	ldr	r5, [pc, #24]	; (800a150 <_sbrk_r+0x1c>)
 800a138:	2300      	movs	r3, #0
 800a13a:	4604      	mov	r4, r0
 800a13c:	4608      	mov	r0, r1
 800a13e:	602b      	str	r3, [r5, #0]
 800a140:	f7f6 fd1a 	bl	8000b78 <_sbrk>
 800a144:	1c43      	adds	r3, r0, #1
 800a146:	d102      	bne.n	800a14e <_sbrk_r+0x1a>
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	b103      	cbz	r3, 800a14e <_sbrk_r+0x1a>
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	bd38      	pop	{r3, r4, r5, pc}
 800a150:	20001438 	.word	0x20001438

0800a154 <__sread>:
 800a154:	b510      	push	{r4, lr}
 800a156:	460c      	mov	r4, r1
 800a158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a15c:	f000 fab2 	bl	800a6c4 <_read_r>
 800a160:	2800      	cmp	r0, #0
 800a162:	bfab      	itete	ge
 800a164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a166:	89a3      	ldrhlt	r3, [r4, #12]
 800a168:	181b      	addge	r3, r3, r0
 800a16a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a16e:	bfac      	ite	ge
 800a170:	6563      	strge	r3, [r4, #84]	; 0x54
 800a172:	81a3      	strhlt	r3, [r4, #12]
 800a174:	bd10      	pop	{r4, pc}

0800a176 <__swrite>:
 800a176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17a:	461f      	mov	r7, r3
 800a17c:	898b      	ldrh	r3, [r1, #12]
 800a17e:	05db      	lsls	r3, r3, #23
 800a180:	4605      	mov	r5, r0
 800a182:	460c      	mov	r4, r1
 800a184:	4616      	mov	r6, r2
 800a186:	d505      	bpl.n	800a194 <__swrite+0x1e>
 800a188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a18c:	2302      	movs	r3, #2
 800a18e:	2200      	movs	r2, #0
 800a190:	f000 f9c8 	bl	800a524 <_lseek_r>
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a19a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a19e:	81a3      	strh	r3, [r4, #12]
 800a1a0:	4632      	mov	r2, r6
 800a1a2:	463b      	mov	r3, r7
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1aa:	f000 b869 	b.w	800a280 <_write_r>

0800a1ae <__sseek>:
 800a1ae:	b510      	push	{r4, lr}
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b6:	f000 f9b5 	bl	800a524 <_lseek_r>
 800a1ba:	1c43      	adds	r3, r0, #1
 800a1bc:	89a3      	ldrh	r3, [r4, #12]
 800a1be:	bf15      	itete	ne
 800a1c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1ca:	81a3      	strheq	r3, [r4, #12]
 800a1cc:	bf18      	it	ne
 800a1ce:	81a3      	strhne	r3, [r4, #12]
 800a1d0:	bd10      	pop	{r4, pc}

0800a1d2 <__sclose>:
 800a1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d6:	f000 b8d3 	b.w	800a380 <_close_r>
	...

0800a1dc <__swbuf_r>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	460e      	mov	r6, r1
 800a1e0:	4614      	mov	r4, r2
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	b118      	cbz	r0, 800a1ee <__swbuf_r+0x12>
 800a1e6:	6983      	ldr	r3, [r0, #24]
 800a1e8:	b90b      	cbnz	r3, 800a1ee <__swbuf_r+0x12>
 800a1ea:	f7ff fb81 	bl	80098f0 <__sinit>
 800a1ee:	4b21      	ldr	r3, [pc, #132]	; (800a274 <__swbuf_r+0x98>)
 800a1f0:	429c      	cmp	r4, r3
 800a1f2:	d12b      	bne.n	800a24c <__swbuf_r+0x70>
 800a1f4:	686c      	ldr	r4, [r5, #4]
 800a1f6:	69a3      	ldr	r3, [r4, #24]
 800a1f8:	60a3      	str	r3, [r4, #8]
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	071a      	lsls	r2, r3, #28
 800a1fe:	d52f      	bpl.n	800a260 <__swbuf_r+0x84>
 800a200:	6923      	ldr	r3, [r4, #16]
 800a202:	b36b      	cbz	r3, 800a260 <__swbuf_r+0x84>
 800a204:	6923      	ldr	r3, [r4, #16]
 800a206:	6820      	ldr	r0, [r4, #0]
 800a208:	1ac0      	subs	r0, r0, r3
 800a20a:	6963      	ldr	r3, [r4, #20]
 800a20c:	b2f6      	uxtb	r6, r6
 800a20e:	4283      	cmp	r3, r0
 800a210:	4637      	mov	r7, r6
 800a212:	dc04      	bgt.n	800a21e <__swbuf_r+0x42>
 800a214:	4621      	mov	r1, r4
 800a216:	4628      	mov	r0, r5
 800a218:	f000 f948 	bl	800a4ac <_fflush_r>
 800a21c:	bb30      	cbnz	r0, 800a26c <__swbuf_r+0x90>
 800a21e:	68a3      	ldr	r3, [r4, #8]
 800a220:	3b01      	subs	r3, #1
 800a222:	60a3      	str	r3, [r4, #8]
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	1c5a      	adds	r2, r3, #1
 800a228:	6022      	str	r2, [r4, #0]
 800a22a:	701e      	strb	r6, [r3, #0]
 800a22c:	6963      	ldr	r3, [r4, #20]
 800a22e:	3001      	adds	r0, #1
 800a230:	4283      	cmp	r3, r0
 800a232:	d004      	beq.n	800a23e <__swbuf_r+0x62>
 800a234:	89a3      	ldrh	r3, [r4, #12]
 800a236:	07db      	lsls	r3, r3, #31
 800a238:	d506      	bpl.n	800a248 <__swbuf_r+0x6c>
 800a23a:	2e0a      	cmp	r6, #10
 800a23c:	d104      	bne.n	800a248 <__swbuf_r+0x6c>
 800a23e:	4621      	mov	r1, r4
 800a240:	4628      	mov	r0, r5
 800a242:	f000 f933 	bl	800a4ac <_fflush_r>
 800a246:	b988      	cbnz	r0, 800a26c <__swbuf_r+0x90>
 800a248:	4638      	mov	r0, r7
 800a24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a24c:	4b0a      	ldr	r3, [pc, #40]	; (800a278 <__swbuf_r+0x9c>)
 800a24e:	429c      	cmp	r4, r3
 800a250:	d101      	bne.n	800a256 <__swbuf_r+0x7a>
 800a252:	68ac      	ldr	r4, [r5, #8]
 800a254:	e7cf      	b.n	800a1f6 <__swbuf_r+0x1a>
 800a256:	4b09      	ldr	r3, [pc, #36]	; (800a27c <__swbuf_r+0xa0>)
 800a258:	429c      	cmp	r4, r3
 800a25a:	bf08      	it	eq
 800a25c:	68ec      	ldreq	r4, [r5, #12]
 800a25e:	e7ca      	b.n	800a1f6 <__swbuf_r+0x1a>
 800a260:	4621      	mov	r1, r4
 800a262:	4628      	mov	r0, r5
 800a264:	f000 f81e 	bl	800a2a4 <__swsetup_r>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d0cb      	beq.n	800a204 <__swbuf_r+0x28>
 800a26c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a270:	e7ea      	b.n	800a248 <__swbuf_r+0x6c>
 800a272:	bf00      	nop
 800a274:	0800a814 	.word	0x0800a814
 800a278:	0800a834 	.word	0x0800a834
 800a27c:	0800a7f4 	.word	0x0800a7f4

0800a280 <_write_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d07      	ldr	r5, [pc, #28]	; (800a2a0 <_write_r+0x20>)
 800a284:	4604      	mov	r4, r0
 800a286:	4608      	mov	r0, r1
 800a288:	4611      	mov	r1, r2
 800a28a:	2200      	movs	r2, #0
 800a28c:	602a      	str	r2, [r5, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	f7f6 f815 	bl	80002be <_write>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_write_r+0x1e>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_write_r+0x1e>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	20001438 	.word	0x20001438

0800a2a4 <__swsetup_r>:
 800a2a4:	4b32      	ldr	r3, [pc, #200]	; (800a370 <__swsetup_r+0xcc>)
 800a2a6:	b570      	push	{r4, r5, r6, lr}
 800a2a8:	681d      	ldr	r5, [r3, #0]
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	b125      	cbz	r5, 800a2ba <__swsetup_r+0x16>
 800a2b0:	69ab      	ldr	r3, [r5, #24]
 800a2b2:	b913      	cbnz	r3, 800a2ba <__swsetup_r+0x16>
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	f7ff fb1b 	bl	80098f0 <__sinit>
 800a2ba:	4b2e      	ldr	r3, [pc, #184]	; (800a374 <__swsetup_r+0xd0>)
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	d10f      	bne.n	800a2e0 <__swsetup_r+0x3c>
 800a2c0:	686c      	ldr	r4, [r5, #4]
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2c8:	0719      	lsls	r1, r3, #28
 800a2ca:	d42c      	bmi.n	800a326 <__swsetup_r+0x82>
 800a2cc:	06dd      	lsls	r5, r3, #27
 800a2ce:	d411      	bmi.n	800a2f4 <__swsetup_r+0x50>
 800a2d0:	2309      	movs	r3, #9
 800a2d2:	6033      	str	r3, [r6, #0]
 800a2d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2d8:	81a3      	strh	r3, [r4, #12]
 800a2da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2de:	e03e      	b.n	800a35e <__swsetup_r+0xba>
 800a2e0:	4b25      	ldr	r3, [pc, #148]	; (800a378 <__swsetup_r+0xd4>)
 800a2e2:	429c      	cmp	r4, r3
 800a2e4:	d101      	bne.n	800a2ea <__swsetup_r+0x46>
 800a2e6:	68ac      	ldr	r4, [r5, #8]
 800a2e8:	e7eb      	b.n	800a2c2 <__swsetup_r+0x1e>
 800a2ea:	4b24      	ldr	r3, [pc, #144]	; (800a37c <__swsetup_r+0xd8>)
 800a2ec:	429c      	cmp	r4, r3
 800a2ee:	bf08      	it	eq
 800a2f0:	68ec      	ldreq	r4, [r5, #12]
 800a2f2:	e7e6      	b.n	800a2c2 <__swsetup_r+0x1e>
 800a2f4:	0758      	lsls	r0, r3, #29
 800a2f6:	d512      	bpl.n	800a31e <__swsetup_r+0x7a>
 800a2f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2fa:	b141      	cbz	r1, 800a30e <__swsetup_r+0x6a>
 800a2fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a300:	4299      	cmp	r1, r3
 800a302:	d002      	beq.n	800a30a <__swsetup_r+0x66>
 800a304:	4630      	mov	r0, r6
 800a306:	f000 f991 	bl	800a62c <_free_r>
 800a30a:	2300      	movs	r3, #0
 800a30c:	6363      	str	r3, [r4, #52]	; 0x34
 800a30e:	89a3      	ldrh	r3, [r4, #12]
 800a310:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a314:	81a3      	strh	r3, [r4, #12]
 800a316:	2300      	movs	r3, #0
 800a318:	6063      	str	r3, [r4, #4]
 800a31a:	6923      	ldr	r3, [r4, #16]
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	89a3      	ldrh	r3, [r4, #12]
 800a320:	f043 0308 	orr.w	r3, r3, #8
 800a324:	81a3      	strh	r3, [r4, #12]
 800a326:	6923      	ldr	r3, [r4, #16]
 800a328:	b94b      	cbnz	r3, 800a33e <__swsetup_r+0x9a>
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a334:	d003      	beq.n	800a33e <__swsetup_r+0x9a>
 800a336:	4621      	mov	r1, r4
 800a338:	4630      	mov	r0, r6
 800a33a:	f000 f92b 	bl	800a594 <__smakebuf_r>
 800a33e:	89a0      	ldrh	r0, [r4, #12]
 800a340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a344:	f010 0301 	ands.w	r3, r0, #1
 800a348:	d00a      	beq.n	800a360 <__swsetup_r+0xbc>
 800a34a:	2300      	movs	r3, #0
 800a34c:	60a3      	str	r3, [r4, #8]
 800a34e:	6963      	ldr	r3, [r4, #20]
 800a350:	425b      	negs	r3, r3
 800a352:	61a3      	str	r3, [r4, #24]
 800a354:	6923      	ldr	r3, [r4, #16]
 800a356:	b943      	cbnz	r3, 800a36a <__swsetup_r+0xc6>
 800a358:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a35c:	d1ba      	bne.n	800a2d4 <__swsetup_r+0x30>
 800a35e:	bd70      	pop	{r4, r5, r6, pc}
 800a360:	0781      	lsls	r1, r0, #30
 800a362:	bf58      	it	pl
 800a364:	6963      	ldrpl	r3, [r4, #20]
 800a366:	60a3      	str	r3, [r4, #8]
 800a368:	e7f4      	b.n	800a354 <__swsetup_r+0xb0>
 800a36a:	2000      	movs	r0, #0
 800a36c:	e7f7      	b.n	800a35e <__swsetup_r+0xba>
 800a36e:	bf00      	nop
 800a370:	2000017c 	.word	0x2000017c
 800a374:	0800a814 	.word	0x0800a814
 800a378:	0800a834 	.word	0x0800a834
 800a37c:	0800a7f4 	.word	0x0800a7f4

0800a380 <_close_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	4d06      	ldr	r5, [pc, #24]	; (800a39c <_close_r+0x1c>)
 800a384:	2300      	movs	r3, #0
 800a386:	4604      	mov	r4, r0
 800a388:	4608      	mov	r0, r1
 800a38a:	602b      	str	r3, [r5, #0]
 800a38c:	f7f6 fbbf 	bl	8000b0e <_close>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	d102      	bne.n	800a39a <_close_r+0x1a>
 800a394:	682b      	ldr	r3, [r5, #0]
 800a396:	b103      	cbz	r3, 800a39a <_close_r+0x1a>
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	bd38      	pop	{r3, r4, r5, pc}
 800a39c:	20001438 	.word	0x20001438

0800a3a0 <__sflush_r>:
 800a3a0:	898a      	ldrh	r2, [r1, #12]
 800a3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	0710      	lsls	r0, r2, #28
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	d458      	bmi.n	800a460 <__sflush_r+0xc0>
 800a3ae:	684b      	ldr	r3, [r1, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	dc05      	bgt.n	800a3c0 <__sflush_r+0x20>
 800a3b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	dc02      	bgt.n	800a3c0 <__sflush_r+0x20>
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3c2:	2e00      	cmp	r6, #0
 800a3c4:	d0f9      	beq.n	800a3ba <__sflush_r+0x1a>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3cc:	682f      	ldr	r7, [r5, #0]
 800a3ce:	602b      	str	r3, [r5, #0]
 800a3d0:	d032      	beq.n	800a438 <__sflush_r+0x98>
 800a3d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	075a      	lsls	r2, r3, #29
 800a3d8:	d505      	bpl.n	800a3e6 <__sflush_r+0x46>
 800a3da:	6863      	ldr	r3, [r4, #4]
 800a3dc:	1ac0      	subs	r0, r0, r3
 800a3de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3e0:	b10b      	cbz	r3, 800a3e6 <__sflush_r+0x46>
 800a3e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3e4:	1ac0      	subs	r0, r0, r3
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3ec:	6a21      	ldr	r1, [r4, #32]
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	47b0      	blx	r6
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	d106      	bne.n	800a406 <__sflush_r+0x66>
 800a3f8:	6829      	ldr	r1, [r5, #0]
 800a3fa:	291d      	cmp	r1, #29
 800a3fc:	d82c      	bhi.n	800a458 <__sflush_r+0xb8>
 800a3fe:	4a2a      	ldr	r2, [pc, #168]	; (800a4a8 <__sflush_r+0x108>)
 800a400:	40ca      	lsrs	r2, r1
 800a402:	07d6      	lsls	r6, r2, #31
 800a404:	d528      	bpl.n	800a458 <__sflush_r+0xb8>
 800a406:	2200      	movs	r2, #0
 800a408:	6062      	str	r2, [r4, #4]
 800a40a:	04d9      	lsls	r1, r3, #19
 800a40c:	6922      	ldr	r2, [r4, #16]
 800a40e:	6022      	str	r2, [r4, #0]
 800a410:	d504      	bpl.n	800a41c <__sflush_r+0x7c>
 800a412:	1c42      	adds	r2, r0, #1
 800a414:	d101      	bne.n	800a41a <__sflush_r+0x7a>
 800a416:	682b      	ldr	r3, [r5, #0]
 800a418:	b903      	cbnz	r3, 800a41c <__sflush_r+0x7c>
 800a41a:	6560      	str	r0, [r4, #84]	; 0x54
 800a41c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a41e:	602f      	str	r7, [r5, #0]
 800a420:	2900      	cmp	r1, #0
 800a422:	d0ca      	beq.n	800a3ba <__sflush_r+0x1a>
 800a424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a428:	4299      	cmp	r1, r3
 800a42a:	d002      	beq.n	800a432 <__sflush_r+0x92>
 800a42c:	4628      	mov	r0, r5
 800a42e:	f000 f8fd 	bl	800a62c <_free_r>
 800a432:	2000      	movs	r0, #0
 800a434:	6360      	str	r0, [r4, #52]	; 0x34
 800a436:	e7c1      	b.n	800a3bc <__sflush_r+0x1c>
 800a438:	6a21      	ldr	r1, [r4, #32]
 800a43a:	2301      	movs	r3, #1
 800a43c:	4628      	mov	r0, r5
 800a43e:	47b0      	blx	r6
 800a440:	1c41      	adds	r1, r0, #1
 800a442:	d1c7      	bne.n	800a3d4 <__sflush_r+0x34>
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d0c4      	beq.n	800a3d4 <__sflush_r+0x34>
 800a44a:	2b1d      	cmp	r3, #29
 800a44c:	d001      	beq.n	800a452 <__sflush_r+0xb2>
 800a44e:	2b16      	cmp	r3, #22
 800a450:	d101      	bne.n	800a456 <__sflush_r+0xb6>
 800a452:	602f      	str	r7, [r5, #0]
 800a454:	e7b1      	b.n	800a3ba <__sflush_r+0x1a>
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	e7ad      	b.n	800a3bc <__sflush_r+0x1c>
 800a460:	690f      	ldr	r7, [r1, #16]
 800a462:	2f00      	cmp	r7, #0
 800a464:	d0a9      	beq.n	800a3ba <__sflush_r+0x1a>
 800a466:	0793      	lsls	r3, r2, #30
 800a468:	680e      	ldr	r6, [r1, #0]
 800a46a:	bf08      	it	eq
 800a46c:	694b      	ldreq	r3, [r1, #20]
 800a46e:	600f      	str	r7, [r1, #0]
 800a470:	bf18      	it	ne
 800a472:	2300      	movne	r3, #0
 800a474:	eba6 0807 	sub.w	r8, r6, r7
 800a478:	608b      	str	r3, [r1, #8]
 800a47a:	f1b8 0f00 	cmp.w	r8, #0
 800a47e:	dd9c      	ble.n	800a3ba <__sflush_r+0x1a>
 800a480:	6a21      	ldr	r1, [r4, #32]
 800a482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a484:	4643      	mov	r3, r8
 800a486:	463a      	mov	r2, r7
 800a488:	4628      	mov	r0, r5
 800a48a:	47b0      	blx	r6
 800a48c:	2800      	cmp	r0, #0
 800a48e:	dc06      	bgt.n	800a49e <__sflush_r+0xfe>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a496:	81a3      	strh	r3, [r4, #12]
 800a498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a49c:	e78e      	b.n	800a3bc <__sflush_r+0x1c>
 800a49e:	4407      	add	r7, r0
 800a4a0:	eba8 0800 	sub.w	r8, r8, r0
 800a4a4:	e7e9      	b.n	800a47a <__sflush_r+0xda>
 800a4a6:	bf00      	nop
 800a4a8:	20400001 	.word	0x20400001

0800a4ac <_fflush_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	690b      	ldr	r3, [r1, #16]
 800a4b0:	4605      	mov	r5, r0
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	b913      	cbnz	r3, 800a4bc <_fflush_r+0x10>
 800a4b6:	2500      	movs	r5, #0
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}
 800a4bc:	b118      	cbz	r0, 800a4c6 <_fflush_r+0x1a>
 800a4be:	6983      	ldr	r3, [r0, #24]
 800a4c0:	b90b      	cbnz	r3, 800a4c6 <_fflush_r+0x1a>
 800a4c2:	f7ff fa15 	bl	80098f0 <__sinit>
 800a4c6:	4b14      	ldr	r3, [pc, #80]	; (800a518 <_fflush_r+0x6c>)
 800a4c8:	429c      	cmp	r4, r3
 800a4ca:	d11b      	bne.n	800a504 <_fflush_r+0x58>
 800a4cc:	686c      	ldr	r4, [r5, #4]
 800a4ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d0ef      	beq.n	800a4b6 <_fflush_r+0xa>
 800a4d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4d8:	07d0      	lsls	r0, r2, #31
 800a4da:	d404      	bmi.n	800a4e6 <_fflush_r+0x3a>
 800a4dc:	0599      	lsls	r1, r3, #22
 800a4de:	d402      	bmi.n	800a4e6 <_fflush_r+0x3a>
 800a4e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4e2:	f7ff faa3 	bl	8009a2c <__retarget_lock_acquire_recursive>
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	f7ff ff59 	bl	800a3a0 <__sflush_r>
 800a4ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4f0:	07da      	lsls	r2, r3, #31
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	d4e0      	bmi.n	800a4b8 <_fflush_r+0xc>
 800a4f6:	89a3      	ldrh	r3, [r4, #12]
 800a4f8:	059b      	lsls	r3, r3, #22
 800a4fa:	d4dd      	bmi.n	800a4b8 <_fflush_r+0xc>
 800a4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4fe:	f7ff fa96 	bl	8009a2e <__retarget_lock_release_recursive>
 800a502:	e7d9      	b.n	800a4b8 <_fflush_r+0xc>
 800a504:	4b05      	ldr	r3, [pc, #20]	; (800a51c <_fflush_r+0x70>)
 800a506:	429c      	cmp	r4, r3
 800a508:	d101      	bne.n	800a50e <_fflush_r+0x62>
 800a50a:	68ac      	ldr	r4, [r5, #8]
 800a50c:	e7df      	b.n	800a4ce <_fflush_r+0x22>
 800a50e:	4b04      	ldr	r3, [pc, #16]	; (800a520 <_fflush_r+0x74>)
 800a510:	429c      	cmp	r4, r3
 800a512:	bf08      	it	eq
 800a514:	68ec      	ldreq	r4, [r5, #12]
 800a516:	e7da      	b.n	800a4ce <_fflush_r+0x22>
 800a518:	0800a814 	.word	0x0800a814
 800a51c:	0800a834 	.word	0x0800a834
 800a520:	0800a7f4 	.word	0x0800a7f4

0800a524 <_lseek_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4d07      	ldr	r5, [pc, #28]	; (800a544 <_lseek_r+0x20>)
 800a528:	4604      	mov	r4, r0
 800a52a:	4608      	mov	r0, r1
 800a52c:	4611      	mov	r1, r2
 800a52e:	2200      	movs	r2, #0
 800a530:	602a      	str	r2, [r5, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	f7f6 fb12 	bl	8000b5c <_lseek>
 800a538:	1c43      	adds	r3, r0, #1
 800a53a:	d102      	bne.n	800a542 <_lseek_r+0x1e>
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	b103      	cbz	r3, 800a542 <_lseek_r+0x1e>
 800a540:	6023      	str	r3, [r4, #0]
 800a542:	bd38      	pop	{r3, r4, r5, pc}
 800a544:	20001438 	.word	0x20001438

0800a548 <__swhatbuf_r>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	460e      	mov	r6, r1
 800a54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a550:	2900      	cmp	r1, #0
 800a552:	b096      	sub	sp, #88	; 0x58
 800a554:	4614      	mov	r4, r2
 800a556:	461d      	mov	r5, r3
 800a558:	da08      	bge.n	800a56c <__swhatbuf_r+0x24>
 800a55a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	602a      	str	r2, [r5, #0]
 800a562:	061a      	lsls	r2, r3, #24
 800a564:	d410      	bmi.n	800a588 <__swhatbuf_r+0x40>
 800a566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a56a:	e00e      	b.n	800a58a <__swhatbuf_r+0x42>
 800a56c:	466a      	mov	r2, sp
 800a56e:	f000 f8bb 	bl	800a6e8 <_fstat_r>
 800a572:	2800      	cmp	r0, #0
 800a574:	dbf1      	blt.n	800a55a <__swhatbuf_r+0x12>
 800a576:	9a01      	ldr	r2, [sp, #4]
 800a578:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a57c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a580:	425a      	negs	r2, r3
 800a582:	415a      	adcs	r2, r3
 800a584:	602a      	str	r2, [r5, #0]
 800a586:	e7ee      	b.n	800a566 <__swhatbuf_r+0x1e>
 800a588:	2340      	movs	r3, #64	; 0x40
 800a58a:	2000      	movs	r0, #0
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	b016      	add	sp, #88	; 0x58
 800a590:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a594 <__smakebuf_r>:
 800a594:	898b      	ldrh	r3, [r1, #12]
 800a596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a598:	079d      	lsls	r5, r3, #30
 800a59a:	4606      	mov	r6, r0
 800a59c:	460c      	mov	r4, r1
 800a59e:	d507      	bpl.n	800a5b0 <__smakebuf_r+0x1c>
 800a5a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	6123      	str	r3, [r4, #16]
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	6163      	str	r3, [r4, #20]
 800a5ac:	b002      	add	sp, #8
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
 800a5b0:	ab01      	add	r3, sp, #4
 800a5b2:	466a      	mov	r2, sp
 800a5b4:	f7ff ffc8 	bl	800a548 <__swhatbuf_r>
 800a5b8:	9900      	ldr	r1, [sp, #0]
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f7ff fa57 	bl	8009a70 <_malloc_r>
 800a5c2:	b948      	cbnz	r0, 800a5d8 <__smakebuf_r+0x44>
 800a5c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5c8:	059a      	lsls	r2, r3, #22
 800a5ca:	d4ef      	bmi.n	800a5ac <__smakebuf_r+0x18>
 800a5cc:	f023 0303 	bic.w	r3, r3, #3
 800a5d0:	f043 0302 	orr.w	r3, r3, #2
 800a5d4:	81a3      	strh	r3, [r4, #12]
 800a5d6:	e7e3      	b.n	800a5a0 <__smakebuf_r+0xc>
 800a5d8:	4b0d      	ldr	r3, [pc, #52]	; (800a610 <__smakebuf_r+0x7c>)
 800a5da:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	6020      	str	r0, [r4, #0]
 800a5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e4:	81a3      	strh	r3, [r4, #12]
 800a5e6:	9b00      	ldr	r3, [sp, #0]
 800a5e8:	6163      	str	r3, [r4, #20]
 800a5ea:	9b01      	ldr	r3, [sp, #4]
 800a5ec:	6120      	str	r0, [r4, #16]
 800a5ee:	b15b      	cbz	r3, 800a608 <__smakebuf_r+0x74>
 800a5f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f000 f889 	bl	800a70c <_isatty_r>
 800a5fa:	b128      	cbz	r0, 800a608 <__smakebuf_r+0x74>
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	f023 0303 	bic.w	r3, r3, #3
 800a602:	f043 0301 	orr.w	r3, r3, #1
 800a606:	81a3      	strh	r3, [r4, #12]
 800a608:	89a0      	ldrh	r0, [r4, #12]
 800a60a:	4305      	orrs	r5, r0
 800a60c:	81a5      	strh	r5, [r4, #12]
 800a60e:	e7cd      	b.n	800a5ac <__smakebuf_r+0x18>
 800a610:	08009889 	.word	0x08009889

0800a614 <__malloc_lock>:
 800a614:	4801      	ldr	r0, [pc, #4]	; (800a61c <__malloc_lock+0x8>)
 800a616:	f7ff ba09 	b.w	8009a2c <__retarget_lock_acquire_recursive>
 800a61a:	bf00      	nop
 800a61c:	2000142c 	.word	0x2000142c

0800a620 <__malloc_unlock>:
 800a620:	4801      	ldr	r0, [pc, #4]	; (800a628 <__malloc_unlock+0x8>)
 800a622:	f7ff ba04 	b.w	8009a2e <__retarget_lock_release_recursive>
 800a626:	bf00      	nop
 800a628:	2000142c 	.word	0x2000142c

0800a62c <_free_r>:
 800a62c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a62e:	2900      	cmp	r1, #0
 800a630:	d044      	beq.n	800a6bc <_free_r+0x90>
 800a632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a636:	9001      	str	r0, [sp, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f1a1 0404 	sub.w	r4, r1, #4
 800a63e:	bfb8      	it	lt
 800a640:	18e4      	addlt	r4, r4, r3
 800a642:	f7ff ffe7 	bl	800a614 <__malloc_lock>
 800a646:	4a1e      	ldr	r2, [pc, #120]	; (800a6c0 <_free_r+0x94>)
 800a648:	9801      	ldr	r0, [sp, #4]
 800a64a:	6813      	ldr	r3, [r2, #0]
 800a64c:	b933      	cbnz	r3, 800a65c <_free_r+0x30>
 800a64e:	6063      	str	r3, [r4, #4]
 800a650:	6014      	str	r4, [r2, #0]
 800a652:	b003      	add	sp, #12
 800a654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a658:	f7ff bfe2 	b.w	800a620 <__malloc_unlock>
 800a65c:	42a3      	cmp	r3, r4
 800a65e:	d908      	bls.n	800a672 <_free_r+0x46>
 800a660:	6825      	ldr	r5, [r4, #0]
 800a662:	1961      	adds	r1, r4, r5
 800a664:	428b      	cmp	r3, r1
 800a666:	bf01      	itttt	eq
 800a668:	6819      	ldreq	r1, [r3, #0]
 800a66a:	685b      	ldreq	r3, [r3, #4]
 800a66c:	1949      	addeq	r1, r1, r5
 800a66e:	6021      	streq	r1, [r4, #0]
 800a670:	e7ed      	b.n	800a64e <_free_r+0x22>
 800a672:	461a      	mov	r2, r3
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	b10b      	cbz	r3, 800a67c <_free_r+0x50>
 800a678:	42a3      	cmp	r3, r4
 800a67a:	d9fa      	bls.n	800a672 <_free_r+0x46>
 800a67c:	6811      	ldr	r1, [r2, #0]
 800a67e:	1855      	adds	r5, r2, r1
 800a680:	42a5      	cmp	r5, r4
 800a682:	d10b      	bne.n	800a69c <_free_r+0x70>
 800a684:	6824      	ldr	r4, [r4, #0]
 800a686:	4421      	add	r1, r4
 800a688:	1854      	adds	r4, r2, r1
 800a68a:	42a3      	cmp	r3, r4
 800a68c:	6011      	str	r1, [r2, #0]
 800a68e:	d1e0      	bne.n	800a652 <_free_r+0x26>
 800a690:	681c      	ldr	r4, [r3, #0]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	6053      	str	r3, [r2, #4]
 800a696:	4421      	add	r1, r4
 800a698:	6011      	str	r1, [r2, #0]
 800a69a:	e7da      	b.n	800a652 <_free_r+0x26>
 800a69c:	d902      	bls.n	800a6a4 <_free_r+0x78>
 800a69e:	230c      	movs	r3, #12
 800a6a0:	6003      	str	r3, [r0, #0]
 800a6a2:	e7d6      	b.n	800a652 <_free_r+0x26>
 800a6a4:	6825      	ldr	r5, [r4, #0]
 800a6a6:	1961      	adds	r1, r4, r5
 800a6a8:	428b      	cmp	r3, r1
 800a6aa:	bf04      	itt	eq
 800a6ac:	6819      	ldreq	r1, [r3, #0]
 800a6ae:	685b      	ldreq	r3, [r3, #4]
 800a6b0:	6063      	str	r3, [r4, #4]
 800a6b2:	bf04      	itt	eq
 800a6b4:	1949      	addeq	r1, r1, r5
 800a6b6:	6021      	streq	r1, [r4, #0]
 800a6b8:	6054      	str	r4, [r2, #4]
 800a6ba:	e7ca      	b.n	800a652 <_free_r+0x26>
 800a6bc:	b003      	add	sp, #12
 800a6be:	bd30      	pop	{r4, r5, pc}
 800a6c0:	20001430 	.word	0x20001430

0800a6c4 <_read_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d07      	ldr	r5, [pc, #28]	; (800a6e4 <_read_r+0x20>)
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	4608      	mov	r0, r1
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	602a      	str	r2, [r5, #0]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f7f6 f9fe 	bl	8000ad4 <_read>
 800a6d8:	1c43      	adds	r3, r0, #1
 800a6da:	d102      	bne.n	800a6e2 <_read_r+0x1e>
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	b103      	cbz	r3, 800a6e2 <_read_r+0x1e>
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	bd38      	pop	{r3, r4, r5, pc}
 800a6e4:	20001438 	.word	0x20001438

0800a6e8 <_fstat_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d07      	ldr	r5, [pc, #28]	; (800a708 <_fstat_r+0x20>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	602b      	str	r3, [r5, #0]
 800a6f6:	f7f6 fa16 	bl	8000b26 <_fstat>
 800a6fa:	1c43      	adds	r3, r0, #1
 800a6fc:	d102      	bne.n	800a704 <_fstat_r+0x1c>
 800a6fe:	682b      	ldr	r3, [r5, #0]
 800a700:	b103      	cbz	r3, 800a704 <_fstat_r+0x1c>
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	bd38      	pop	{r3, r4, r5, pc}
 800a706:	bf00      	nop
 800a708:	20001438 	.word	0x20001438

0800a70c <_isatty_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4d06      	ldr	r5, [pc, #24]	; (800a728 <_isatty_r+0x1c>)
 800a710:	2300      	movs	r3, #0
 800a712:	4604      	mov	r4, r0
 800a714:	4608      	mov	r0, r1
 800a716:	602b      	str	r3, [r5, #0]
 800a718:	f7f6 fa15 	bl	8000b46 <_isatty>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	d102      	bne.n	800a726 <_isatty_r+0x1a>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	b103      	cbz	r3, 800a726 <_isatty_r+0x1a>
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	20001438 	.word	0x20001438

0800a72c <_init>:
 800a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72e:	bf00      	nop
 800a730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a732:	bc08      	pop	{r3}
 800a734:	469e      	mov	lr, r3
 800a736:	4770      	bx	lr

0800a738 <_fini>:
 800a738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73a:	bf00      	nop
 800a73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a73e:	bc08      	pop	{r3}
 800a740:	469e      	mov	lr, r3
 800a742:	4770      	bx	lr
