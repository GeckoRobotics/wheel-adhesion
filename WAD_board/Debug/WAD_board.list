
WAD_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009508  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08009690  08009690  00019690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800970c  0800970c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800970c  0800970c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800970c  0800970c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800970c  0800970c  0001970c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009710  08009710  00019710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08009714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00001248  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  200013c4  200013c4  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d66  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fe6  00000000  00000000  00031f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  00034ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c28  00000000  00000000  00035c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9fb  00000000  00000000  000368b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013070  00000000  00000000  000562ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae67c  00000000  00000000  0006931b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00117997  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003640  00000000  00000000  001179e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009678 	.word	0x08009678

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	08009678 	.word	0x08009678

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	; 0x40
 80001cc:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	// Enable TRCENA
	DEMCR |= (1 << 24);
 80001ce:	4b33      	ldr	r3, [pc, #204]	; (800029c <main+0xd4>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a32      	ldr	r2, [pc, #200]	; (800029c <main+0xd4>)
 80001d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001d8:	6013      	str	r3, [r2, #0]
	// Enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80001da:	4b31      	ldr	r3, [pc, #196]	; (80002a0 <main+0xd8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a30      	ldr	r2, [pc, #192]	; (80002a0 <main+0xd8>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e6:	f000 fc73 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ea:	f000 f85b 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ee:	f000 f8f7 	bl	80003e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001f2:	f000 f8b5 	bl	8000360 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80001f6:	f008 fd49 	bl	8008c8c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // initialize all hall-effect sensors
  hall_sensor_init(I2C_ADDR_500);
 80001fa:	2060      	movs	r0, #96	; 0x60
 80001fc:	f000 fa88 	bl	8000710 <hall_sensor_init>
  hall_sensor_init(I2C_ADDR_1000);
 8000200:	2063      	movs	r0, #99	; 0x63
 8000202:	f000 fa85 	bl	8000710 <hall_sensor_init>
  hall_sensor_init(I2C_ADDR_2000);
 8000206:	206c      	movs	r0, #108	; 0x6c
 8000208:	f000 fa82 	bl	8000710 <hall_sensor_init>
//
//	int32_t x_2000 = get_component_field(I2C_ADDR_2000, 0);
//	int32_t y_2000 = get_component_field(I2C_ADDR_2000, 1);
//	int32_t z_2000 = get_component_field(I2C_ADDR_2000, 2);

	int32_t x_500 = single_read_component_field(I2C_ADDR_500, 0);
 800020c:	2100      	movs	r1, #0
 800020e:	2060      	movs	r0, #96	; 0x60
 8000210:	f000 fad8 	bl	80007c4 <single_read_component_field>
 8000214:	4603      	mov	r3, r0
 8000216:	627b      	str	r3, [r7, #36]	; 0x24
	// x_500 = x_500 >> SENS_500; // divide by 4 LSB/G to convert to B-field in Gauss (G)
	int32_t y_500 = single_read_component_field(I2C_ADDR_500, 1);
 8000218:	2101      	movs	r1, #1
 800021a:	2060      	movs	r0, #96	; 0x60
 800021c:	f000 fad2 	bl	80007c4 <single_read_component_field>
 8000220:	4603      	mov	r3, r0
 8000222:	623b      	str	r3, [r7, #32]
	// y_500 = y_500 >> SENS_500;
	int32_t z_500 = single_read_component_field(I2C_ADDR_500, 2);
 8000224:	2102      	movs	r1, #2
 8000226:	2060      	movs	r0, #96	; 0x60
 8000228:	f000 facc 	bl	80007c4 <single_read_component_field>
 800022c:	4603      	mov	r3, r0
 800022e:	61fb      	str	r3, [r7, #28]
	// z_500 = z_500 >> SENS_500;

	int32_t x_1000 = single_read_component_field(I2C_ADDR_1000, 0);
 8000230:	2100      	movs	r1, #0
 8000232:	2063      	movs	r0, #99	; 0x63
 8000234:	f000 fac6 	bl	80007c4 <single_read_component_field>
 8000238:	4603      	mov	r3, r0
 800023a:	61bb      	str	r3, [r7, #24]
	// x_1000 = x_1000 >> SENS_1000; // divide by 2 LSB/G to convert to B-field in G
	int32_t y_1000 = single_read_component_field(I2C_ADDR_1000, 1);
 800023c:	2101      	movs	r1, #1
 800023e:	2063      	movs	r0, #99	; 0x63
 8000240:	f000 fac0 	bl	80007c4 <single_read_component_field>
 8000244:	4603      	mov	r3, r0
 8000246:	617b      	str	r3, [r7, #20]
	// x_1000 = x_1000 >> SENS_1000;
	int32_t z_1000 = single_read_component_field(I2C_ADDR_1000, 2);
 8000248:	2102      	movs	r1, #2
 800024a:	2063      	movs	r0, #99	; 0x63
 800024c:	f000 faba 	bl	80007c4 <single_read_component_field>
 8000250:	4603      	mov	r3, r0
 8000252:	613b      	str	r3, [r7, #16]
	// x_1000 = x_1000 >> SENS_1000;

	int32_t x_2000 = single_read_component_field(I2C_ADDR_2000, 0);
 8000254:	2100      	movs	r1, #0
 8000256:	206c      	movs	r0, #108	; 0x6c
 8000258:	f000 fab4 	bl	80007c4 <single_read_component_field>
 800025c:	4603      	mov	r3, r0
 800025e:	60fb      	str	r3, [r7, #12]
	int32_t y_2000 = single_read_component_field(I2C_ADDR_2000, 1);
 8000260:	2101      	movs	r1, #1
 8000262:	206c      	movs	r0, #108	; 0x6c
 8000264:	f000 faae 	bl	80007c4 <single_read_component_field>
 8000268:	4603      	mov	r3, r0
 800026a:	60bb      	str	r3, [r7, #8]
	int32_t z_2000 = single_read_component_field(I2C_ADDR_2000, 2);
 800026c:	2102      	movs	r1, #2
 800026e:	206c      	movs	r0, #108	; 0x6c
 8000270:	f000 faa8 	bl	80007c4 <single_read_component_field>
 8000274:	4603      	mov	r3, r0
 8000276:	607b      	str	r3, [r7, #4]
//	int32_t Bt_squared_1000 = compute_Bt_squared(x_1000, y_1000, z_1000);
//	int32_t Bt_squared_2000 = compute_Bt_squared(x_2000, y_2000, z_2000);

	// send data to USB host
	// transmit_field_USB(Bt_squared_500, Bt_squared_1000, Bt_squared_2000);
	transmit_component_fields_USB(x_500, y_500, z_500, x_1000, y_1000, z_1000, x_2000, y_2000, z_2000);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	9304      	str	r3, [sp, #16]
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	9303      	str	r3, [sp, #12]
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	9302      	str	r3, [sp, #8]
 8000284:	693b      	ldr	r3, [r7, #16]
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	69fa      	ldr	r2, [r7, #28]
 8000290:	6a39      	ldr	r1, [r7, #32]
 8000292:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000294:	f000 f8ee 	bl	8000474 <transmit_component_fields_USB>
  {
 8000298:	e7b8      	b.n	800020c <main+0x44>
 800029a:	bf00      	nop
 800029c:	e000edfc 	.word	0xe000edfc
 80002a0:	e0000e00 	.word	0xe0000e00

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b09e      	sub	sp, #120	; 0x78
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002ae:	2228      	movs	r2, #40	; 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f009 f9d8 	bl	8009668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c8:	463b      	mov	r3, r7
 80002ca:	223c      	movs	r2, #60	; 0x3c
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f009 f9ca 	bl	8009668 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d4:	2301      	movs	r3, #1
 80002d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e6:	2302      	movs	r3, #2
 80002e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002f0:	2300      	movs	r3, #0
 80002f2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002f8:	4618      	mov	r0, r3
 80002fa:	f003 f9fd 	bl	80036f8 <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000304:	f000 fb06 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2302      	movs	r3, #2
 800030e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000318:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800031e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000322:	2101      	movs	r1, #1
 8000324:	4618      	mov	r0, r3
 8000326:	f004 fa25 	bl	8004774 <HAL_RCC_ClockConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000330:	f000 faf0 	bl	8000914 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <SystemClock_Config+0xb8>)
 8000336:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000338:	2310      	movs	r3, #16
 800033a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800033c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000340:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000342:	463b      	mov	r3, r7
 8000344:	4618      	mov	r0, r3
 8000346:	f004 fbfd 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000350:	f000 fae0 	bl	8000914 <Error_Handler>
  }
}
 8000354:	bf00      	nop
 8000356:	3778      	adds	r7, #120	; 0x78
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	00020020 	.word	0x00020020

08000360 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000364:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <MX_I2C1_Init+0x74>)
 8000366:	4a1c      	ldr	r2, [pc, #112]	; (80003d8 <MX_I2C1_Init+0x78>)
 8000368:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 800036a:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <MX_I2C1_Init+0x74>)
 800036c:	4a1b      	ldr	r2, [pc, #108]	; (80003dc <MX_I2C1_Init+0x7c>)
 800036e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000370:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <MX_I2C1_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000376:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <MX_I2C1_Init+0x74>)
 8000378:	2201      	movs	r2, #1
 800037a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_I2C1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_I2C1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_I2C1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_I2C1_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_I2C1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800039a:	480e      	ldr	r0, [pc, #56]	; (80003d4 <MX_I2C1_Init+0x74>)
 800039c:	f000 fec6 	bl	800112c <HAL_I2C_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003a6:	f000 fab5 	bl	8000914 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003aa:	2100      	movs	r1, #0
 80003ac:	4809      	ldr	r0, [pc, #36]	; (80003d4 <MX_I2C1_Init+0x74>)
 80003ae:	f001 fc33 	bl	8001c18 <HAL_I2CEx_ConfigAnalogFilter>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003b8:	f000 faac 	bl	8000914 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003bc:	2100      	movs	r1, #0
 80003be:	4805      	ldr	r0, [pc, #20]	; (80003d4 <MX_I2C1_Init+0x74>)
 80003c0:	f001 fc75 	bl	8001cae <HAL_I2CEx_ConfigDigitalFilter>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ca:	f000 faa3 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000198 	.word	0x20000198
 80003d8:	40005400 	.word	0x40005400
 80003dc:	2010091a 	.word	0x2010091a

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 030c 	add.w	r3, r7, #12
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003f6:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <MX_GPIO_Init+0x90>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a1d      	ldr	r2, [pc, #116]	; (8000470 <MX_GPIO_Init+0x90>)
 80003fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_GPIO_Init+0x90>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_GPIO_Init+0x90>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a17      	ldr	r2, [pc, #92]	; (8000470 <MX_GPIO_Init+0x90>)
 8000414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000418:	6153      	str	r3, [r2, #20]
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_GPIO_Init+0x90>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <MX_GPIO_Init+0x90>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a11      	ldr	r2, [pc, #68]	; (8000470 <MX_GPIO_Init+0x90>)
 800042c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000430:	6153      	str	r3, [r2, #20]
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_GPIO_Init+0x90>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_B_Pin|LED_R_Pin, GPIO_PIN_SET);
 800043e:	2201      	movs	r2, #1
 8000440:	2107      	movs	r1, #7
 8000442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000446:	f000 fe59 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_G_Pin LED_B_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_B_Pin|LED_R_Pin;
 800044a:	2307      	movs	r3, #7
 800044c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	2301      	movs	r3, #1
 8000450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000456:	2300      	movs	r3, #0
 8000458:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	4619      	mov	r1, r3
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f000 fcd0 	bl	8000e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000468:	bf00      	nop
 800046a:	3720      	adds	r7, #32
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40021000 	.word	0x40021000

08000474 <transmit_component_fields_USB>:
 * @param Bt_3: third squared Bt
 * @retval None
 */

static void transmit_component_fields_USB(int32_t x1, int32_t y1, int32_t z1, int32_t x2, int32_t y2, int32_t z2, int32_t x3, int32_t y3, int32_t z3)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b098      	sub	sp, #96	; 0x60
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	603b      	str	r3, [r7, #0]
	uint8_t *x1_vals = (uint8_t *)&x1;
 8000482:	f107 030c 	add.w	r3, r7, #12
 8000486:	65bb      	str	r3, [r7, #88]	; 0x58
	uint8_t *y1_vals = (uint8_t *)&y1;
 8000488:	f107 0308 	add.w	r3, r7, #8
 800048c:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t *z1_vals = (uint8_t *)&z1;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t *x2_vals = (uint8_t *)&x2;
 8000492:	463b      	mov	r3, r7
 8000494:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t *y2_vals = (uint8_t *)&y2;
 8000496:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800049a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t *z2_vals = (uint8_t *)&z2;
 800049c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004a0:	647b      	str	r3, [r7, #68]	; 0x44

	uint8_t *x3_vals = (uint8_t *)&x3;
 80004a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004a6:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t *y3_vals = (uint8_t *)&y3;
 80004a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80004ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t *z3_vals = (uint8_t *)&z3;
 80004ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80004b2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t buffer[36] = {0};
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	f107 0318 	add.w	r3, r7, #24
 80004bc:	2220      	movs	r2, #32
 80004be:	2100      	movs	r1, #0
 80004c0:	4618      	mov	r0, r3
 80004c2:	f009 f8d1 	bl	8009668 <memset>
	for (uint8_t i = 0; i < sizeof(buffer); ++i)
 80004c6:	2300      	movs	r3, #0
 80004c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80004cc:	e10c      	b.n	80006e8 <transmit_component_fields_USB+0x274>
	{
		if (i <= 3)
 80004ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d80e      	bhi.n	80004f4 <transmit_component_fields_USB+0x80>
		{
			buffer[i] = x1_vals[3 - i];
 80004d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80004da:	f1c3 0303 	rsb	r3, r3, #3
 80004de:	461a      	mov	r2, r3
 80004e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80004e2:	441a      	add	r2, r3
 80004e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80004e8:	7812      	ldrb	r2, [r2, #0]
 80004ea:	3360      	adds	r3, #96	; 0x60
 80004ec:	443b      	add	r3, r7
 80004ee:	f803 2c4c 	strb.w	r2, [r3, #-76]
 80004f2:	e0f4      	b.n	80006de <transmit_component_fields_USB+0x26a>
		}

		else if ((i >= 4) & (i <= 7))
 80004f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	bf8c      	ite	hi
 80004fc:	2301      	movhi	r3, #1
 80004fe:	2300      	movls	r3, #0
 8000500:	b2da      	uxtb	r2, r3
 8000502:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000506:	2b07      	cmp	r3, #7
 8000508:	bf94      	ite	ls
 800050a:	2301      	movls	r3, #1
 800050c:	2300      	movhi	r3, #0
 800050e:	b2db      	uxtb	r3, r3
 8000510:	4013      	ands	r3, r2
 8000512:	b2db      	uxtb	r3, r3
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00e      	beq.n	8000536 <transmit_component_fields_USB+0xc2>
		{
			buffer[i] = y1_vals[7 - i];
 8000518:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800051c:	f1c3 0307 	rsb	r3, r3, #7
 8000520:	461a      	mov	r2, r3
 8000522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000524:	441a      	add	r2, r3
 8000526:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800052a:	7812      	ldrb	r2, [r2, #0]
 800052c:	3360      	adds	r3, #96	; 0x60
 800052e:	443b      	add	r3, r7
 8000530:	f803 2c4c 	strb.w	r2, [r3, #-76]
 8000534:	e0d3      	b.n	80006de <transmit_component_fields_USB+0x26a>
		}

		else if ((i >= 8) & (i <= 11))
 8000536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800053a:	2b07      	cmp	r3, #7
 800053c:	bf8c      	ite	hi
 800053e:	2301      	movhi	r3, #1
 8000540:	2300      	movls	r3, #0
 8000542:	b2da      	uxtb	r2, r3
 8000544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000548:	2b0b      	cmp	r3, #11
 800054a:	bf94      	ite	ls
 800054c:	2301      	movls	r3, #1
 800054e:	2300      	movhi	r3, #0
 8000550:	b2db      	uxtb	r3, r3
 8000552:	4013      	ands	r3, r2
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	d00e      	beq.n	8000578 <transmit_component_fields_USB+0x104>
		{
			buffer[i] = z1_vals[11 - i];
 800055a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800055e:	f1c3 030b 	rsb	r3, r3, #11
 8000562:	461a      	mov	r2, r3
 8000564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000566:	441a      	add	r2, r3
 8000568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800056c:	7812      	ldrb	r2, [r2, #0]
 800056e:	3360      	adds	r3, #96	; 0x60
 8000570:	443b      	add	r3, r7
 8000572:	f803 2c4c 	strb.w	r2, [r3, #-76]
 8000576:	e0b2      	b.n	80006de <transmit_component_fields_USB+0x26a>
		}

		else if ((i >= 12) & (i <= 15))
 8000578:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800057c:	2b0b      	cmp	r3, #11
 800057e:	bf8c      	ite	hi
 8000580:	2301      	movhi	r3, #1
 8000582:	2300      	movls	r3, #0
 8000584:	b2da      	uxtb	r2, r3
 8000586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800058a:	2b0f      	cmp	r3, #15
 800058c:	bf94      	ite	ls
 800058e:	2301      	movls	r3, #1
 8000590:	2300      	movhi	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4013      	ands	r3, r2
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00e      	beq.n	80005ba <transmit_component_fields_USB+0x146>
		{
			buffer[i] = x2_vals[15 - i];
 800059c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005a0:	f1c3 030f 	rsb	r3, r3, #15
 80005a4:	461a      	mov	r2, r3
 80005a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005a8:	441a      	add	r2, r3
 80005aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005ae:	7812      	ldrb	r2, [r2, #0]
 80005b0:	3360      	adds	r3, #96	; 0x60
 80005b2:	443b      	add	r3, r7
 80005b4:	f803 2c4c 	strb.w	r2, [r3, #-76]
 80005b8:	e091      	b.n	80006de <transmit_component_fields_USB+0x26a>
		}

		else if ((i >= 16) & (i <= 19))
 80005ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005be:	2b0f      	cmp	r3, #15
 80005c0:	bf8c      	ite	hi
 80005c2:	2301      	movhi	r3, #1
 80005c4:	2300      	movls	r3, #0
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005cc:	2b13      	cmp	r3, #19
 80005ce:	bf94      	ite	ls
 80005d0:	2301      	movls	r3, #1
 80005d2:	2300      	movhi	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4013      	ands	r3, r2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d00e      	beq.n	80005fc <transmit_component_fields_USB+0x188>
		{
			buffer[i] = y2_vals[19 - i];
 80005de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005e2:	f1c3 0313 	rsb	r3, r3, #19
 80005e6:	461a      	mov	r2, r3
 80005e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005ea:	441a      	add	r2, r3
 80005ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005f0:	7812      	ldrb	r2, [r2, #0]
 80005f2:	3360      	adds	r3, #96	; 0x60
 80005f4:	443b      	add	r3, r7
 80005f6:	f803 2c4c 	strb.w	r2, [r3, #-76]
 80005fa:	e070      	b.n	80006de <transmit_component_fields_USB+0x26a>
		}

		else if ((i >= 20) & (i <= 23))
 80005fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000600:	2b13      	cmp	r3, #19
 8000602:	bf8c      	ite	hi
 8000604:	2301      	movhi	r3, #1
 8000606:	2300      	movls	r3, #0
 8000608:	b2da      	uxtb	r2, r3
 800060a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800060e:	2b17      	cmp	r3, #23
 8000610:	bf94      	ite	ls
 8000612:	2301      	movls	r3, #1
 8000614:	2300      	movhi	r3, #0
 8000616:	b2db      	uxtb	r3, r3
 8000618:	4013      	ands	r3, r2
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00e      	beq.n	800063e <transmit_component_fields_USB+0x1ca>
		{
			buffer[i] = z2_vals[23 - i];
 8000620:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000624:	f1c3 0317 	rsb	r3, r3, #23
 8000628:	461a      	mov	r2, r3
 800062a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800062c:	441a      	add	r2, r3
 800062e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000632:	7812      	ldrb	r2, [r2, #0]
 8000634:	3360      	adds	r3, #96	; 0x60
 8000636:	443b      	add	r3, r7
 8000638:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800063c:	e04f      	b.n	80006de <transmit_component_fields_USB+0x26a>
		}

		else if ((i >= 24) & (i <= 27))
 800063e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000642:	2b17      	cmp	r3, #23
 8000644:	bf8c      	ite	hi
 8000646:	2301      	movhi	r3, #1
 8000648:	2300      	movls	r3, #0
 800064a:	b2da      	uxtb	r2, r3
 800064c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000650:	2b1b      	cmp	r3, #27
 8000652:	bf94      	ite	ls
 8000654:	2301      	movls	r3, #1
 8000656:	2300      	movhi	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4013      	ands	r3, r2
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	d00e      	beq.n	8000680 <transmit_component_fields_USB+0x20c>
		{
			buffer[i] = x3_vals[27 - i];
 8000662:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000666:	f1c3 031b 	rsb	r3, r3, #27
 800066a:	461a      	mov	r2, r3
 800066c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800066e:	441a      	add	r2, r3
 8000670:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000674:	7812      	ldrb	r2, [r2, #0]
 8000676:	3360      	adds	r3, #96	; 0x60
 8000678:	443b      	add	r3, r7
 800067a:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800067e:	e02e      	b.n	80006de <transmit_component_fields_USB+0x26a>
		}

		else if ((i >= 28) & (i <= 31))
 8000680:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000684:	2b1b      	cmp	r3, #27
 8000686:	bf8c      	ite	hi
 8000688:	2301      	movhi	r3, #1
 800068a:	2300      	movls	r3, #0
 800068c:	b2da      	uxtb	r2, r3
 800068e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000692:	2b1f      	cmp	r3, #31
 8000694:	bf94      	ite	ls
 8000696:	2301      	movls	r3, #1
 8000698:	2300      	movhi	r3, #0
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4013      	ands	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00e      	beq.n	80006c2 <transmit_component_fields_USB+0x24e>
		{
			buffer[i] = y3_vals[31 - i];
 80006a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006a8:	f1c3 031f 	rsb	r3, r3, #31
 80006ac:	461a      	mov	r2, r3
 80006ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b0:	441a      	add	r2, r3
 80006b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006b6:	7812      	ldrb	r2, [r2, #0]
 80006b8:	3360      	adds	r3, #96	; 0x60
 80006ba:	443b      	add	r3, r7
 80006bc:	f803 2c4c 	strb.w	r2, [r3, #-76]
 80006c0:	e00d      	b.n	80006de <transmit_component_fields_USB+0x26a>
		}

		else
		{
			buffer[i] = z3_vals[35 - i];
 80006c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006c6:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 80006ca:	461a      	mov	r2, r3
 80006cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006ce:	441a      	add	r2, r3
 80006d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	3360      	adds	r3, #96	; 0x60
 80006d8:	443b      	add	r3, r7
 80006da:	f803 2c4c 	strb.w	r2, [r3, #-76]
	for (uint8_t i = 0; i < sizeof(buffer); ++i)
 80006de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006e2:	3301      	adds	r3, #1
 80006e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80006e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006ec:	2b23      	cmp	r3, #35	; 0x23
 80006ee:	f67f aeee 	bls.w	80004ce <transmit_component_fields_USB+0x5a>
		}

	}

	CDC_Transmit_FS(buffer, sizeof(buffer));
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2124      	movs	r1, #36	; 0x24
 80006f8:	4618      	mov	r0, r3
 80006fa:	f008 fb85 	bl	8008e08 <CDC_Transmit_FS>
	HAL_Delay(300);
 80006fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000702:	f000 fa4b 	bl	8000b9c <HAL_Delay>
}
 8000706:	bf00      	nop
 8000708:	3760      	adds	r7, #96	; 0x60
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <hall_sensor_init>:
 * @brief Hall Effect Sensor Initialization Function
 * @param dev_address: 7-bit I2C device address
 * @retval None
 */
static void hall_sensor_init(uint16_t dev_address)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af04      	add	r7, sp, #16
 8000716:	4603      	mov	r3, r0
 8000718:	80fb      	strh	r3, [r7, #6]
	// enter customer access code to enable writing to volatile registers
	uint8_t access_code[4] = {0x2C, 0x41, 0x35, 0x34};
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <hall_sensor_init+0x6c>)
 800071c:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, dev_address << 1, 0x35, I2C_MEMADD_SIZE_8BIT, access_code, DATA_SIZE, TIMEOUT);
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	b299      	uxth	r1, r3
 8000724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000728:	9302      	str	r3, [sp, #8]
 800072a:	2304      	movs	r3, #4
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2301      	movs	r3, #1
 8000736:	2235      	movs	r2, #53	; 0x35
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <hall_sensor_init+0x70>)
 800073a:	f000 fd87 	bl	800124c <HAL_I2C_Mem_Write>
	HAL_Delay(1000);
 800073e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000742:	f000 fa2b 	bl	8000b9c <HAL_Delay>

	// Enables X, Y, and Z channels
	// Sets hall mode to 00 and BW select to 000
	// BW Select = 000 corresponds with a three channel update rate of 2 kHz
	uint8_t init_data[4] = {0x00, 0x00, 0x01, 0xC0};
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <hall_sensor_init+0x74>)
 8000748:	60bb      	str	r3, [r7, #8]
	HAL_I2C_Mem_Write(&hi2c1, dev_address << 1, 0x02, I2C_MEMADD_SIZE_8BIT, init_data, DATA_SIZE, TIMEOUT);
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	b299      	uxth	r1, r3
 8000750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000754:	9302      	str	r3, [sp, #8]
 8000756:	2304      	movs	r3, #4
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2301      	movs	r3, #1
 8000762:	2202      	movs	r2, #2
 8000764:	4806      	ldr	r0, [pc, #24]	; (8000780 <hall_sensor_init+0x70>)
 8000766:	f000 fd71 	bl	800124c <HAL_I2C_Mem_Write>
	HAL_Delay(1000);
 800076a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076e:	f000 fa15 	bl	8000b9c <HAL_Delay>
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	3435412c 	.word	0x3435412c
 8000780:	20000198 	.word	0x20000198
 8000784:	c0010000 	.word	0xc0010000

08000788 <convert_8_to_16>:
 * @param dataFirst: First half of binary value
 * @param dataSecond: Second half of binary value
 * @retval dataBoth: uint16_t of combined binary value
 */
static int16_t convert_8_to_16(uint8_t data_first, uint8_t data_second)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
    int16_t data_both = 0x0000;
 8000798:	2300      	movs	r3, #0
 800079a:	81fb      	strh	r3, [r7, #14]
    data_both = data_first;
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	81fb      	strh	r3, [r7, #14]
    data_both = data_both << 8;
 80007a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	81fb      	strh	r3, [r7, #14]
    data_both |= data_second;
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	89fb      	ldrh	r3, [r7, #14]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	81fb      	strh	r3, [r7, #14]
    return data_both;
 80007b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <single_read_component_field>:
	}
	return (b_field >> 4); // right align 12 bit B-field
}

static int16_t single_read_component_field(uint16_t dev_address, uint8_t axis)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	; 0x38
 80007c8:	af04      	add	r7, sp, #16
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	80fb      	strh	r3, [r7, #6]
 80007d0:	4613      	mov	r3, r2
 80007d2:	717b      	strb	r3, [r7, #5]
	uint8_t data[8] = {0};
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
	uint8_t Msbs[3] = {0};
 80007dc:	4b4b      	ldr	r3, [pc, #300]	; (800090c <single_read_component_field+0x148>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	81bb      	strh	r3, [r7, #12]
 80007e2:	2300      	movs	r3, #0
 80007e4:	73bb      	strb	r3, [r7, #14]
	uint8_t Lsbs[2] = {0};
 80007e6:	2300      	movs	r3, #0
 80007e8:	813b      	strh	r3, [r7, #8]
	int16_t b_field = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	84fb      	strh	r3, [r7, #38]	; 0x26
	HAL_I2C_Mem_Read(&hi2c1, dev_address << 1, 0x28, I2C_MEMADD_SIZE_8BIT, data, DATA_SIZE * 2, TIMEOUT); // read MSBs
 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	b299      	uxth	r1, r3
 80007f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f8:	9302      	str	r3, [sp, #8]
 80007fa:	2308      	movs	r3, #8
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2301      	movs	r3, #1
 8000806:	2228      	movs	r2, #40	; 0x28
 8000808:	4841      	ldr	r0, [pc, #260]	; (8000910 <single_read_component_field+0x14c>)
 800080a:	f000 fe33 	bl	8001474 <HAL_I2C_Mem_Read>
	// HAL_Delay(150);

	// populate MSBs
	for (uint8_t i = 0; i < 3; ++i)
 800080e:	2300      	movs	r3, #0
 8000810:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000814:	e010      	b.n	8000838 <single_read_component_field+0x74>
	{
		Msbs[i] = data[i];
 8000816:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800081a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800081e:	3228      	adds	r2, #40	; 0x28
 8000820:	443a      	add	r2, r7
 8000822:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8000826:	3328      	adds	r3, #40	; 0x28
 8000828:	443b      	add	r3, r7
 800082a:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i = 0; i < 3; ++i)
 800082e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000832:	3301      	adds	r3, #1
 8000834:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000838:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800083c:	2b02      	cmp	r3, #2
 800083e:	d9ea      	bls.n	8000816 <single_read_component_field+0x52>
	}

	// populate LSBs
	for (uint8_t i = 0; i < 2; ++i)
 8000840:	2300      	movs	r3, #0
 8000842:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000846:	e011      	b.n	800086c <single_read_component_field+0xa8>
	{
		Lsbs[i] = data[i + 5];
 8000848:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800084c:	1d5a      	adds	r2, r3, #5
 800084e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000852:	3228      	adds	r2, #40	; 0x28
 8000854:	443a      	add	r2, r7
 8000856:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800085a:	3328      	adds	r3, #40	; 0x28
 800085c:	443b      	add	r3, r7
 800085e:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (uint8_t i = 0; i < 2; ++i)
 8000862:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000866:	3301      	adds	r3, #1
 8000868:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800086c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000870:	2b01      	cmp	r3, #1
 8000872:	d9e9      	bls.n	8000848 <single_read_component_field+0x84>
	}

	if (axis == 0) // x-axis selected
 8000874:	797b      	ldrb	r3, [r7, #5]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d112      	bne.n	80008a0 <single_read_component_field+0xdc>
	{
		uint8_t mask = 0x0F;
 800087a:	230f      	movs	r3, #15
 800087c:	777b      	strb	r3, [r7, #29]
		uint8_t msb = Msbs[0]; // extract MSBs
 800087e:	7b3b      	ldrb	r3, [r7, #12]
 8000880:	773b      	strb	r3, [r7, #28]
		uint8_t lsb = Lsbs[0] & mask; // extract LSBs
 8000882:	7a3a      	ldrb	r2, [r7, #8]
 8000884:	7f7b      	ldrb	r3, [r7, #29]
 8000886:	4013      	ands	r3, r2
 8000888:	76fb      	strb	r3, [r7, #27]
		b_field = convert_8_to_16(msb, (lsb << 4)); // combine MSBs and LSBs into 12 bit value
 800088a:	7efb      	ldrb	r3, [r7, #27]
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	b2da      	uxtb	r2, r3
 8000890:	7f3b      	ldrb	r3, [r7, #28]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff77 	bl	8000788 <convert_8_to_16>
 800089a:	4603      	mov	r3, r0
 800089c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800089e:	e02d      	b.n	80008fc <single_read_component_field+0x138>
	}

	else if (axis == 1) // y-axis selected
 80008a0:	797b      	ldrb	r3, [r7, #5]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d112      	bne.n	80008cc <single_read_component_field+0x108>
	{
		uint8_t mask = 0xF0;
 80008a6:	23f0      	movs	r3, #240	; 0xf0
 80008a8:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t msb = Msbs[1];
 80008ac:	7b7b      	ldrb	r3, [r7, #13]
 80008ae:	77fb      	strb	r3, [r7, #31]
		uint8_t lsb = Lsbs[1] & mask;
 80008b0:	7a7a      	ldrb	r2, [r7, #9]
 80008b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008b6:	4013      	ands	r3, r2
 80008b8:	77bb      	strb	r3, [r7, #30]
		b_field = convert_8_to_16(msb, lsb);
 80008ba:	7fba      	ldrb	r2, [r7, #30]
 80008bc:	7ffb      	ldrb	r3, [r7, #31]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff61 	bl	8000788 <convert_8_to_16>
 80008c6:	4603      	mov	r3, r0
 80008c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80008ca:	e017      	b.n	80008fc <single_read_component_field+0x138>
	}

	else // z-axis selected (axis == 2)
	{
		uint8_t mask = 0x0F;
 80008cc:	230f      	movs	r3, #15
 80008ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t msb = Msbs[2];
 80008d2:	7bbb      	ldrb	r3, [r7, #14]
 80008d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t lsb = Lsbs[1] & mask;
 80008d8:	7a7a      	ldrb	r2, [r7, #9]
 80008da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008de:	4013      	ands	r3, r2
 80008e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		b_field = convert_8_to_16(msb, (lsb << 4));
 80008e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff48 	bl	8000788 <convert_8_to_16>
 80008f8:	4603      	mov	r3, r0
 80008fa:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	return (b_field >> 4); // right align 12 bit B-field
 80008fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000900:	111b      	asrs	r3, r3, #4
 8000902:	b21b      	sxth	r3, r3
}
 8000904:	4618      	mov	r0, r3
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	08009690 	.word	0x08009690
 8000910:	20000198 	.word	0x20000198

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x44>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_MspInit+0x44>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6193      	str	r3, [r2, #24]
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_MspInit+0x44>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_MspInit+0x44>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_MspInit+0x44>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_MspInit+0x44>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <HAL_I2C_MspInit+0x7c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d127      	bne.n	80009da <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_I2C_MspInit+0x80>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <HAL_I2C_MspInit+0x80>)
 8000990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000994:	6153      	str	r3, [r2, #20]
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_I2C_MspInit+0x80>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009a2:	23c0      	movs	r3, #192	; 0xc0
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a6:	2312      	movs	r3, #18
 80009a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b2:	2304      	movs	r3, #4
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	480b      	ldr	r0, [pc, #44]	; (80009ec <HAL_I2C_MspInit+0x84>)
 80009be:	f000 fa23 	bl	8000e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_I2C_MspInit+0x80>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_I2C_MspInit+0x80>)
 80009c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_I2C_MspInit+0x80>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40005400 	.word	0x40005400
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000400 	.word	0x48000400

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler+0x4>

08000a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3c:	f000 f88e 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000a4a:	f001 fa74 	bl	8001f36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000eb8 	.word	0x20000eb8

08000a58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a80:	f7ff ffea 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <LoopForever+0xe>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <LoopForever+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f008 fdb9 	bl	8009620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aae:	f7ff fb8b 	bl	80001c8 <main>

08000ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ab4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000ac0:	08009714 	.word	0x08009714
  ldr r2, =_sbss
 8000ac4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000ac8:	200013c4 	.word	0x200013c4

08000acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_2_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_Init+0x28>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_Init+0x28>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f94f 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae6:	200f      	movs	r0, #15
 8000ae8:	f000 f808 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aec:	f7ff ff18 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40022000 	.word	0x40022000

08000afc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x54>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x58>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f967 	bl	8000dee <HAL_SYSTICK_Config>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00e      	b.n	8000b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d80a      	bhi.n	8000b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	f000 f92f 	bl	8000d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <HAL_InitTick+0x5c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	200001ec 	.word	0x200001ec

08000b84 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	200001ec 	.word	0x200001ec

08000b9c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba4:	f7ff ffee 	bl	8000b84 <HAL_GetTick>
 8000ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bb4:	d005      	beq.n	8000bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_Delay+0x44>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bc2:	bf00      	nop
 8000bc4:	f7ff ffde 	bl	8000b84 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8f7      	bhi.n	8000bc4 <HAL_Delay+0x28>
  {
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	; (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d64:	f7ff ff8e 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff29 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff3e 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff8e 	bl	8000cd8 <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff31 	bl	8000c48 <__NVIC_EnableIRQ>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffa2 	bl	8000d40 <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e16:	e154      	b.n	80010c2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 8146 	beq.w	80010bc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d005      	beq.n	8000e48 <HAL_GPIO_Init+0x40>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d130      	bne.n	8000eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7e:	2201      	movs	r2, #1
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	f003 0201 	and.w	r2, r3, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d017      	beq.n	8000ee6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d123      	bne.n	8000f3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	220f      	movs	r2, #15
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	691a      	ldr	r2, [r3, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	6939      	ldr	r1, [r7, #16]
 8000f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0203 	and.w	r2, r3, #3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 80a0 	beq.w	80010bc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7c:	4b58      	ldr	r3, [pc, #352]	; (80010e0 <HAL_GPIO_Init+0x2d8>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a57      	ldr	r2, [pc, #348]	; (80010e0 <HAL_GPIO_Init+0x2d8>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b55      	ldr	r3, [pc, #340]	; (80010e0 <HAL_GPIO_Init+0x2d8>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f94:	4a53      	ldr	r2, [pc, #332]	; (80010e4 <HAL_GPIO_Init+0x2dc>)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fbe:	d019      	beq.n	8000ff4 <HAL_GPIO_Init+0x1ec>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a49      	ldr	r2, [pc, #292]	; (80010e8 <HAL_GPIO_Init+0x2e0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d013      	beq.n	8000ff0 <HAL_GPIO_Init+0x1e8>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a48      	ldr	r2, [pc, #288]	; (80010ec <HAL_GPIO_Init+0x2e4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d00d      	beq.n	8000fec <HAL_GPIO_Init+0x1e4>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a47      	ldr	r2, [pc, #284]	; (80010f0 <HAL_GPIO_Init+0x2e8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d007      	beq.n	8000fe8 <HAL_GPIO_Init+0x1e0>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a46      	ldr	r2, [pc, #280]	; (80010f4 <HAL_GPIO_Init+0x2ec>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d101      	bne.n	8000fe4 <HAL_GPIO_Init+0x1dc>
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	e008      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000fe4:	2305      	movs	r3, #5
 8000fe6:	e006      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e004      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <HAL_GPIO_Init+0x1ee>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	f002 0203 	and.w	r2, r2, #3
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	4093      	lsls	r3, r2
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001006:	4937      	ldr	r1, [pc, #220]	; (80010e4 <HAL_GPIO_Init+0x2dc>)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001014:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001038:	4a2f      	ldr	r2, [pc, #188]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001062:	4a25      	ldr	r2, [pc, #148]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800108c:	4a1a      	ldr	r2, [pc, #104]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <HAL_GPIO_Init+0x2f0>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	fa22 f303 	lsr.w	r3, r2, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f47f aea3 	bne.w	8000e18 <HAL_GPIO_Init+0x10>
  }
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	48000400 	.word	0x48000400
 80010ec:	48000800 	.word	0x48000800
 80010f0:	48000c00 	.word	0x48000c00
 80010f4:	48001000 	.word	0x48001000
 80010f8:	40010400 	.word	0x40010400

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001118:	e002      	b.n	8001120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e081      	b.n	8001242 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d106      	bne.n	8001158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fc08 	bl	8000968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2224      	movs	r2, #36	; 0x24
 800115c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800117c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800118c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d107      	bne.n	80011a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	e006      	b.n	80011b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d104      	bne.n	80011c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69d9      	ldr	r1, [r3, #28]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1a      	ldr	r2, [r3, #32]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0201 	orr.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2220      	movs	r2, #32
 800122e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af02      	add	r7, sp, #8
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	461a      	mov	r2, r3
 800125a:	4603      	mov	r3, r0
 800125c:	817b      	strh	r3, [r7, #10]
 800125e:	460b      	mov	r3, r1
 8001260:	813b      	strh	r3, [r7, #8]
 8001262:	4613      	mov	r3, r2
 8001264:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b20      	cmp	r3, #32
 8001270:	f040 80f9 	bne.w	8001466 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <HAL_I2C_Mem_Write+0x34>
 800127a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800127c:	2b00      	cmp	r3, #0
 800127e:	d105      	bne.n	800128c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001286:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e0ed      	b.n	8001468 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <HAL_I2C_Mem_Write+0x4e>
 8001296:	2302      	movs	r3, #2
 8001298:	e0e6      	b.n	8001468 <HAL_I2C_Mem_Write+0x21c>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012a2:	f7ff fc6f 	bl	8000b84 <HAL_GetTick>
 80012a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2319      	movs	r3, #25
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f000 fac3 	bl	8001840 <I2C_WaitOnFlagUntilTimeout>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0d1      	b.n	8001468 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2221      	movs	r2, #33	; 0x21
 80012c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2240      	movs	r2, #64	; 0x40
 80012d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2200      	movs	r2, #0
 80012d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6a3a      	ldr	r2, [r7, #32]
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012ec:	88f8      	ldrh	r0, [r7, #6]
 80012ee:	893a      	ldrh	r2, [r7, #8]
 80012f0:	8979      	ldrh	r1, [r7, #10]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	4603      	mov	r3, r0
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f000 f9d3 	bl	80016a8 <I2C_RequestMemoryWrite>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e0a9      	b.n	8001468 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001318:	b29b      	uxth	r3, r3
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	d90e      	bls.n	800133c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	22ff      	movs	r2, #255	; 0xff
 8001322:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001328:	b2da      	uxtb	r2, r3
 800132a:	8979      	ldrh	r1, [r7, #10]
 800132c:	2300      	movs	r3, #0
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f000 fc3d 	bl	8001bb4 <I2C_TransferConfig>
 800133a:	e00f      	b.n	800135c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001340:	b29a      	uxth	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134a:	b2da      	uxtb	r2, r3
 800134c:	8979      	ldrh	r1, [r7, #10]
 800134e:	2300      	movs	r3, #0
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 fc2c 	bl	8001bb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 fabc 	bl	80018de <I2C_WaitOnTXISFlagUntilTimeout>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e07b      	b.n	8001468 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	781a      	ldrb	r2, [r3, #0]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138a:	b29b      	uxth	r3, r3
 800138c:	3b01      	subs	r3, #1
 800138e:	b29a      	uxth	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001398:	3b01      	subs	r3, #1
 800139a:	b29a      	uxth	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d034      	beq.n	8001414 <HAL_I2C_Mem_Write+0x1c8>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d130      	bne.n	8001414 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b8:	2200      	movs	r2, #0
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f000 fa3f 	bl	8001840 <I2C_WaitOnFlagUntilTimeout>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e04d      	b.n	8001468 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	2bff      	cmp	r3, #255	; 0xff
 80013d4:	d90e      	bls.n	80013f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	22ff      	movs	r2, #255	; 0xff
 80013da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	8979      	ldrh	r1, [r7, #10]
 80013e4:	2300      	movs	r3, #0
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 fbe1 	bl	8001bb4 <I2C_TransferConfig>
 80013f2:	e00f      	b.n	8001414 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001402:	b2da      	uxtb	r2, r3
 8001404:	8979      	ldrh	r1, [r7, #10]
 8001406:	2300      	movs	r3, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 fbd0 	bl	8001bb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001418:	b29b      	uxth	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d19e      	bne.n	800135c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f000 faa2 	bl	800196c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e01a      	b.n	8001468 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2220      	movs	r2, #32
 8001438:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6859      	ldr	r1, [r3, #4]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_I2C_Mem_Write+0x224>)
 8001446:	400b      	ands	r3, r1
 8001448:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2220      	movs	r2, #32
 800144e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001466:	2302      	movs	r3, #2
  }
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	fe00e800 	.word	0xfe00e800

08001474 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af02      	add	r7, sp, #8
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	4608      	mov	r0, r1
 800147e:	4611      	mov	r1, r2
 8001480:	461a      	mov	r2, r3
 8001482:	4603      	mov	r3, r0
 8001484:	817b      	strh	r3, [r7, #10]
 8001486:	460b      	mov	r3, r1
 8001488:	813b      	strh	r3, [r7, #8]
 800148a:	4613      	mov	r3, r2
 800148c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b20      	cmp	r3, #32
 8001498:	f040 80fd 	bne.w	8001696 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <HAL_I2C_Mem_Read+0x34>
 80014a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d105      	bne.n	80014b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0f1      	b.n	8001698 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <HAL_I2C_Mem_Read+0x4e>
 80014be:	2302      	movs	r3, #2
 80014c0:	e0ea      	b.n	8001698 <HAL_I2C_Mem_Read+0x224>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014ca:	f7ff fb5b 	bl	8000b84 <HAL_GetTick>
 80014ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2319      	movs	r3, #25
 80014d6:	2201      	movs	r2, #1
 80014d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 f9af 	bl	8001840 <I2C_WaitOnFlagUntilTimeout>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0d5      	b.n	8001698 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2222      	movs	r2, #34	; 0x22
 80014f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2240      	movs	r2, #64	; 0x40
 80014f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a3a      	ldr	r2, [r7, #32]
 8001506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800150c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001514:	88f8      	ldrh	r0, [r7, #6]
 8001516:	893a      	ldrh	r2, [r7, #8]
 8001518:	8979      	ldrh	r1, [r7, #10]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	4603      	mov	r3, r0
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 f913 	bl	8001750 <I2C_RequestMemoryRead>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0ad      	b.n	8001698 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001540:	b29b      	uxth	r3, r3
 8001542:	2bff      	cmp	r3, #255	; 0xff
 8001544:	d90e      	bls.n	8001564 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	22ff      	movs	r2, #255	; 0xff
 800154a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001550:	b2da      	uxtb	r2, r3
 8001552:	8979      	ldrh	r1, [r7, #10]
 8001554:	4b52      	ldr	r3, [pc, #328]	; (80016a0 <HAL_I2C_Mem_Read+0x22c>)
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 fb29 	bl	8001bb4 <I2C_TransferConfig>
 8001562:	e00f      	b.n	8001584 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001572:	b2da      	uxtb	r2, r3
 8001574:	8979      	ldrh	r1, [r7, #10]
 8001576:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_I2C_Mem_Read+0x22c>)
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 fb18 	bl	8001bb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158a:	2200      	movs	r2, #0
 800158c:	2104      	movs	r1, #4
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f000 f956 	bl	8001840 <I2C_WaitOnFlagUntilTimeout>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e07c      	b.n	8001698 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ba:	3b01      	subs	r3, #1
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	3b01      	subs	r3, #1
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d034      	beq.n	8001644 <HAL_I2C_Mem_Read+0x1d0>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d130      	bne.n	8001644 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	2200      	movs	r2, #0
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 f927 	bl	8001840 <I2C_WaitOnFlagUntilTimeout>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e04d      	b.n	8001698 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001600:	b29b      	uxth	r3, r3
 8001602:	2bff      	cmp	r3, #255	; 0xff
 8001604:	d90e      	bls.n	8001624 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	22ff      	movs	r2, #255	; 0xff
 800160a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001610:	b2da      	uxtb	r2, r3
 8001612:	8979      	ldrh	r1, [r7, #10]
 8001614:	2300      	movs	r3, #0
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 fac9 	bl	8001bb4 <I2C_TransferConfig>
 8001622:	e00f      	b.n	8001644 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001628:	b29a      	uxth	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001632:	b2da      	uxtb	r2, r3
 8001634:	8979      	ldrh	r1, [r7, #10]
 8001636:	2300      	movs	r3, #0
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 fab8 	bl	8001bb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001648:	b29b      	uxth	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d19a      	bne.n	8001584 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 f98a 	bl	800196c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e01a      	b.n	8001698 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2220      	movs	r2, #32
 8001668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_I2C_Mem_Read+0x230>)
 8001676:	400b      	ands	r3, r1
 8001678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2220      	movs	r2, #32
 800167e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001696:	2302      	movs	r3, #2
  }
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	80002400 	.word	0x80002400
 80016a4:	fe00e800 	.word	0xfe00e800

080016a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	4608      	mov	r0, r1
 80016b2:	4611      	mov	r1, r2
 80016b4:	461a      	mov	r2, r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	817b      	strh	r3, [r7, #10]
 80016ba:	460b      	mov	r3, r1
 80016bc:	813b      	strh	r3, [r7, #8]
 80016be:	4613      	mov	r3, r2
 80016c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	8979      	ldrh	r1, [r7, #10]
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <I2C_RequestMemoryWrite+0xa4>)
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 fa6f 	bl	8001bb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	69b9      	ldr	r1, [r7, #24]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f8ff 	bl	80018de <I2C_WaitOnTXISFlagUntilTimeout>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e02c      	b.n	8001744 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d105      	bne.n	80016fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016f0:	893b      	ldrh	r3, [r7, #8]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28
 80016fa:	e015      	b.n	8001728 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016fc:	893b      	ldrh	r3, [r7, #8]
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	b29b      	uxth	r3, r3
 8001702:	b2da      	uxtb	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	69b9      	ldr	r1, [r7, #24]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f8e5 	bl	80018de <I2C_WaitOnTXISFlagUntilTimeout>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e012      	b.n	8001744 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800171e:	893b      	ldrh	r3, [r7, #8]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2200      	movs	r2, #0
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 f884 	bl	8001840 <I2C_WaitOnFlagUntilTimeout>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	80002000 	.word	0x80002000

08001750 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af02      	add	r7, sp, #8
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	4608      	mov	r0, r1
 800175a:	4611      	mov	r1, r2
 800175c:	461a      	mov	r2, r3
 800175e:	4603      	mov	r3, r0
 8001760:	817b      	strh	r3, [r7, #10]
 8001762:	460b      	mov	r3, r1
 8001764:	813b      	strh	r3, [r7, #8]
 8001766:	4613      	mov	r3, r2
 8001768:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	8979      	ldrh	r1, [r7, #10]
 8001770:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <I2C_RequestMemoryRead+0xa4>)
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2300      	movs	r3, #0
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 fa1c 	bl	8001bb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	69b9      	ldr	r1, [r7, #24]
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 f8ac 	bl	80018de <I2C_WaitOnTXISFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e02c      	b.n	80017ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d105      	bne.n	80017a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001796:	893b      	ldrh	r3, [r7, #8]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
 80017a0:	e015      	b.n	80017ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017a2:	893b      	ldrh	r3, [r7, #8]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	69b9      	ldr	r1, [r7, #24]
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 f892 	bl	80018de <I2C_WaitOnTXISFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e012      	b.n	80017ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017c4:	893b      	ldrh	r3, [r7, #8]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2200      	movs	r2, #0
 80017d6:	2140      	movs	r1, #64	; 0x40
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 f831 	bl	8001840 <I2C_WaitOnFlagUntilTimeout>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	80002000 	.word	0x80002000

080017f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b02      	cmp	r3, #2
 800180c:	d103      	bne.n	8001816 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b01      	cmp	r3, #1
 8001822:	d007      	beq.n	8001834 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	699a      	ldr	r2, [r3, #24]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0201 	orr.w	r2, r2, #1
 8001832:	619a      	str	r2, [r3, #24]
  }
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	4613      	mov	r3, r2
 800184e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001850:	e031      	b.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001858:	d02d      	beq.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800185a:	f7ff f993 	bl	8000b84 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d302      	bcc.n	8001870 <I2C_WaitOnFlagUntilTimeout+0x30>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d122      	bne.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	4013      	ands	r3, r2
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	429a      	cmp	r2, r3
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	429a      	cmp	r2, r3
 800188c:	d113      	bne.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f043 0220 	orr.w	r2, r3, #32
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2220      	movs	r2, #32
 800189e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699a      	ldr	r2, [r3, #24]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4013      	ands	r3, r2
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	bf0c      	ite	eq
 80018c6:	2301      	moveq	r3, #1
 80018c8:	2300      	movne	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d0be      	beq.n	8001852 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018ea:	e033      	b.n	8001954 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 f87f 	bl	80019f4 <I2C_IsErrorOccurred>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e031      	b.n	8001964 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001906:	d025      	beq.n	8001954 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001908:	f7ff f93c 	bl	8000b84 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	429a      	cmp	r2, r3
 8001916:	d302      	bcc.n	800191e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d11a      	bne.n	8001954 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b02      	cmp	r3, #2
 800192a:	d013      	beq.n	8001954 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001930:	f043 0220 	orr.w	r2, r3, #32
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2220      	movs	r2, #32
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e007      	b.n	8001964 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b02      	cmp	r3, #2
 8001960:	d1c4      	bne.n	80018ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001978:	e02f      	b.n	80019da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 f838 	bl	80019f4 <I2C_IsErrorOccurred>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e02d      	b.n	80019ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198e:	f7ff f8f9 	bl	8000b84 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	429a      	cmp	r2, r3
 800199c:	d302      	bcc.n	80019a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11a      	bne.n	80019da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d013      	beq.n	80019da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f043 0220 	orr.w	r2, r3, #32
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e007      	b.n	80019ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	d1c8      	bne.n	800197a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d068      	beq.n	8001af2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2210      	movs	r2, #16
 8001a26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a28:	e049      	b.n	8001abe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a30:	d045      	beq.n	8001abe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a32:	f7ff f8a7 	bl	8000b84 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d302      	bcc.n	8001a48 <I2C_IsErrorOccurred+0x54>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d13a      	bne.n	8001abe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a6a:	d121      	bne.n	8001ab0 <I2C_IsErrorOccurred+0xbc>
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a72:	d01d      	beq.n	8001ab0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001a74:	7cfb      	ldrb	r3, [r7, #19]
 8001a76:	2b20      	cmp	r3, #32
 8001a78:	d01a      	beq.n	8001ab0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a8a:	f7ff f87b 	bl	8000b84 <HAL_GetTick>
 8001a8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a90:	e00e      	b.n	8001ab0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a92:	f7ff f877 	bl	8000b84 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b19      	cmp	r3, #25
 8001a9e:	d907      	bls.n	8001ab0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	f043 0320 	orr.w	r3, r3, #32
 8001aa6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001aae:	e006      	b.n	8001abe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d1e9      	bne.n	8001a92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0320 	and.w	r3, r3, #32
 8001ac8:	2b20      	cmp	r3, #32
 8001aca:	d003      	beq.n	8001ad4 <I2C_IsErrorOccurred+0xe0>
 8001acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0aa      	beq.n	8001a2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d103      	bne.n	8001ae4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00b      	beq.n	8001b1c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00b      	beq.n	8001b60 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d01c      	beq.n	8001ba2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f7ff fe45 	bl	80017f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <I2C_IsErrorOccurred+0x1bc>)
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3728      	adds	r7, #40	; 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	fe00e800 	.word	0xfe00e800

08001bb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	817b      	strh	r3, [r7, #10]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bc6:	897b      	ldrh	r3, [r7, #10]
 8001bc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bcc:	7a7b      	ldrb	r3, [r7, #9]
 8001bce:	041b      	lsls	r3, r3, #16
 8001bd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bd4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001be2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	0d5b      	lsrs	r3, r3, #21
 8001bee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <I2C_TransferConfig+0x60>)
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	ea02 0103 	and.w	r1, r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c06:	bf00      	nop
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	03ff63ff 	.word	0x03ff63ff

08001c18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b20      	cmp	r3, #32
 8001c2c:	d138      	bne.n	8001ca0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e032      	b.n	8001ca2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2224      	movs	r2, #36	; 0x24
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6819      	ldr	r1, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e000      	b.n	8001ca2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
  }
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b085      	sub	sp, #20
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b20      	cmp	r3, #32
 8001cc2:	d139      	bne.n	8001d38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e033      	b.n	8001d3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2224      	movs	r2, #36	; 0x24
 8001cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e000      	b.n	8001d3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
  }
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d48:	b08b      	sub	sp, #44	; 0x2c
 8001d4a:	af06      	add	r7, sp, #24
 8001d4c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0c4      	b.n	8001ee2 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d106      	bne.n	8001d72 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f007 f981 	bl	8009074 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2203      	movs	r2, #3
 8001d76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 f8a7 	bl	8004ed2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e040      	b.n	8001e0c <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	440b      	add	r3, r1
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3303      	adds	r3, #3
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	3338      	adds	r3, #56	; 0x38
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	333c      	adds	r3, #60	; 0x3c
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001df2:	7bfa      	ldrb	r2, [r7, #15]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	3340      	adds	r3, #64	; 0x40
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d3b9      	bcc.n	8001d8a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	73fb      	strb	r3, [r7, #15]
 8001e1a:	e044      	b.n	8001ea6 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	440b      	add	r3, r1
 8001e40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d3b5      	bcc.n	8001e1c <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	687e      	ldr	r6, [r7, #4]
 8001eb8:	466d      	mov	r5, sp
 8001eba:	f106 0410 	add.w	r4, r6, #16
 8001ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	602b      	str	r3, [r5, #0]
 8001ec6:	1d33      	adds	r3, r6, #4
 8001ec8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eca:	6838      	ldr	r0, [r7, #0]
 8001ecc:	f003 f81c 	bl	8004f08 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_PCD_Start+0x16>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e016      	b.n	8001f2e <HAL_PCD_Start+0x44>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 ffc9 	bl	8004ea4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f12:	2101      	movs	r1, #1
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f007 fb4b 	bl	80095b0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f005 fa89 	bl	8007436 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f005 fa82 	bl	800744c <USB_ReadInterrupts>
 8001f48:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fab2 	bl	80024be <PCD_EP_ISR_Handler>

    return;
 8001f5a:	e0bd      	b.n	80020d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d013      	beq.n	8001f8e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f007 f919 	bl	80091b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f84:	2100      	movs	r1, #0
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8a9 	bl	80020de <HAL_PCD_SetAddress>

    return;
 8001f8c:	e0a4      	b.n	80020d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00c      	beq.n	8001fb2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001faa:	b292      	uxth	r2, r2
 8001fac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001fb0:	e092      	b.n	80020d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00c      	beq.n	8001fd6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fce:	b292      	uxth	r2, r2
 8001fd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001fd4:	e080      	b.n	80020d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d027      	beq.n	8002030 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0204 	bic.w	r2, r2, #4
 8001ff2:	b292      	uxth	r2, r2
 8001ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0208 	bic.w	r2, r2, #8
 800200a:	b292      	uxth	r2, r2
 800200c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f007 f909 	bl	8009228 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002028:	b292      	uxth	r2, r2
 800202a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800202e:	e053      	b.n	80020d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002036:	2b00      	cmp	r3, #0
 8002038:	d027      	beq.n	800208a <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002042:	b29a      	uxth	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0208 	orr.w	r2, r2, #8
 800204c:	b292      	uxth	r2, r2
 800204e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800205a:	b29a      	uxth	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002064:	b292      	uxth	r2, r2
 8002066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002072:	b29a      	uxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0204 	orr.w	r2, r2, #4
 800207c:	b292      	uxth	r2, r2
 800207e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f007 f8b6 	bl	80091f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002088:	e026      	b.n	80020d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00f      	beq.n	80020b4 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800209c:	b29a      	uxth	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020a6:	b292      	uxth	r2, r2
 80020a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f007 f874 	bl	800919a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80020b2:	e011      	b.n	80020d8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020d0:	b292      	uxth	r2, r2
 80020d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020d6:	bf00      	nop
  }
}
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_PCD_SetAddress+0x1a>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e013      	b.n	8002120 <HAL_PCD_SetAddress+0x42>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f005 f97c 	bl	800740e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	461a      	mov	r2, r3
 8002136:	4603      	mov	r3, r0
 8002138:	70fb      	strb	r3, [r7, #3]
 800213a:	460b      	mov	r3, r1
 800213c:	803b      	strh	r3, [r7, #0]
 800213e:	4613      	mov	r3, r2
 8002140:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800214a:	2b00      	cmp	r3, #0
 800214c:	da0e      	bge.n	800216c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	705a      	strb	r2, [r3, #1]
 800216a:	e00e      	b.n	800218a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f003 0207 	and.w	r2, r3, #7
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	b2da      	uxtb	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002196:	883a      	ldrh	r2, [r7, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	78ba      	ldrb	r2, [r7, #2]
 80021a0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021a2:	78bb      	ldrb	r3, [r7, #2]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d102      	bne.n	80021ae <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_PCD_EP_Open+0x94>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e00e      	b.n	80021da <HAL_PCD_EP_Open+0xb2>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68f9      	ldr	r1, [r7, #12]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f002 febe 	bl	8004f4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80021d8:	7afb      	ldrb	r3, [r7, #11]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	da0e      	bge.n	8002214 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	705a      	strb	r2, [r3, #1]
 8002212:	e00e      	b.n	8002232 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	f003 0207 	and.w	r2, r3, #7
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	b2da      	uxtb	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_PCD_EP_Close+0x6a>
 8002248:	2302      	movs	r3, #2
 800224a:	e00e      	b.n	800226a <HAL_PCD_EP_Close+0x88>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68f9      	ldr	r1, [r7, #12]
 800225a:	4618      	mov	r0, r3
 800225c:	f003 fa3a 	bl	80056d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	460b      	mov	r3, r1
 8002280:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002282:	7afb      	ldrb	r3, [r7, #11]
 8002284:	f003 0207 	and.w	r2, r3, #7
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2200      	movs	r2, #0
 80022aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2200      	movs	r2, #0
 80022b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022b2:	7afb      	ldrb	r3, [r7, #11]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6979      	ldr	r1, [r7, #20]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 fbf2 	bl	8005aae <USB_EPStartXfer>

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	f003 0207 	and.w	r2, r3, #7
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	460b      	mov	r3, r1
 8002312:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002314:	7afb      	ldrb	r3, [r7, #11]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2201      	movs	r2, #1
 800234e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002350:	7afb      	ldrb	r3, [r7, #11]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	b2da      	uxtb	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6979      	ldr	r1, [r7, #20]
 8002362:	4618      	mov	r0, r3
 8002364:	f003 fba3 	bl	8005aae <USB_EPStartXfer>

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	f003 0207 	and.w	r2, r3, #7
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	d901      	bls.n	8002390 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e03e      	b.n	800240e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002394:	2b00      	cmp	r3, #0
 8002396:	da0e      	bge.n	80023b6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	705a      	strb	r2, [r3, #1]
 80023b4:	e00c      	b.n	80023d0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_PCD_EP_SetStall+0x7e>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e00e      	b.n	800240e <HAL_PCD_EP_SetStall+0x9c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68f9      	ldr	r1, [r7, #12]
 80023fe:	4618      	mov	r0, r3
 8002400:	f004 ff06 	bl	8007210 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	f003 020f 	and.w	r2, r3, #15
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	d901      	bls.n	8002434 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e040      	b.n	80024b6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002438:	2b00      	cmp	r3, #0
 800243a:	da0e      	bge.n	800245a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	705a      	strb	r2, [r3, #1]
 8002458:	e00e      	b.n	8002478 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	f003 0207 	and.w	r2, r3, #7
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	4413      	add	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	b2da      	uxtb	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_PCD_EP_ClrStall+0x82>
 8002494:	2302      	movs	r3, #2
 8002496:	e00e      	b.n	80024b6 <HAL_PCD_EP_ClrStall+0xa0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68f9      	ldr	r1, [r7, #12]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 ff03 	bl	80072b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b096      	sub	sp, #88	; 0x58
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024c6:	e3bf      	b.n	8002c48 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80024e2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 8179 	bne.w	80027de <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d152      	bne.n	800259e <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002508:	81fb      	strh	r3, [r7, #14]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	89fb      	ldrh	r3, [r7, #14]
 8002510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002518:	b29b      	uxth	r3, r3
 800251a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3328      	adds	r3, #40	; 0x28
 8002520:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252a:	b29b      	uxth	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	3302      	adds	r3, #2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	4413      	add	r3, r2
 8002540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800254a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800254e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	441a      	add	r2, r3
 8002558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800255c:	2100      	movs	r1, #0
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f006 fe01 	bl	8009166 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 836b 	beq.w	8002c48 <PCD_EP_ISR_Handler+0x78a>
 8002572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 8366 	bne.w	8002c48 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002588:	b2da      	uxtb	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b292      	uxth	r2, r2
 8002590:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800259c:	e354      	b.n	8002c48 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025a4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80025b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d034      	beq.n	8002626 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	3306      	adds	r3, #6
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80025f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f004 ff7c 	bl	80074f8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29a      	uxth	r2, r3
 8002608:	f640 738f 	movw	r3, #3983	; 0xf8f
 800260c:	4013      	ands	r3, r2
 800260e:	823b      	strh	r3, [r7, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	8a3a      	ldrh	r2, [r7, #16]
 8002616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800261a:	b292      	uxth	r2, r2
 800261c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f006 fd74 	bl	800910c <HAL_PCD_SetupStageCallback>
 8002624:	e310      	b.n	8002c48 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002626:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800262a:	2b00      	cmp	r3, #0
 800262c:	f280 830c 	bge.w	8002c48 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b29a      	uxth	r2, r3
 8002638:	f640 738f 	movw	r3, #3983	; 0xf8f
 800263c:	4013      	ands	r3, r2
 800263e:	83fb      	strh	r3, [r7, #30]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	8bfa      	ldrh	r2, [r7, #30]
 8002646:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800264a:	b292      	uxth	r2, r2
 800264c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002656:	b29b      	uxth	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	3306      	adds	r3, #6
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002678:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800267a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d019      	beq.n	80026b6 <PCD_EP_ISR_Handler+0x1f8>
 8002682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d015      	beq.n	80026b6 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002690:	6959      	ldr	r1, [r3, #20]
 8002692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002694:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002698:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800269a:	b29b      	uxth	r3, r3
 800269c:	f004 ff2c 	bl	80074f8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	441a      	add	r2, r3
 80026aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026ae:	2100      	movs	r1, #0
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f006 fd3d 	bl	8009130 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80026c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f040 82bd 	bne.w	8002c48 <PCD_EP_ISR_Handler+0x78a>
 80026ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80026d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026da:	f000 82b5 	beq.w	8002c48 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	4413      	add	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002708:	b29a      	uxth	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	801a      	strh	r2, [r3, #0]
 800270e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b3e      	cmp	r3, #62	; 0x3e
 8002714:	d91d      	bls.n	8002752 <PCD_EP_ISR_Handler+0x294>
 8002716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	647b      	str	r3, [r7, #68]	; 0x44
 800271e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <PCD_EP_ISR_Handler+0x272>
 800272a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800272c:	3b01      	subs	r3, #1
 800272e:	647b      	str	r3, [r7, #68]	; 0x44
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29a      	uxth	r2, r3
 8002736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002738:	b29b      	uxth	r3, r3
 800273a:	029b      	lsls	r3, r3, #10
 800273c:	b29b      	uxth	r3, r3
 800273e:	4313      	orrs	r3, r2
 8002740:	b29b      	uxth	r3, r3
 8002742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800274a:	b29a      	uxth	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	801a      	strh	r2, [r3, #0]
 8002750:	e026      	b.n	80027a0 <PCD_EP_ISR_Handler+0x2e2>
 8002752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10a      	bne.n	8002770 <PCD_EP_ISR_Handler+0x2b2>
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002768:	b29a      	uxth	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	801a      	strh	r2, [r3, #0]
 800276e:	e017      	b.n	80027a0 <PCD_EP_ISR_Handler+0x2e2>
 8002770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	647b      	str	r3, [r7, #68]	; 0x44
 8002778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <PCD_EP_ISR_Handler+0x2cc>
 8002784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002786:	3301      	adds	r3, #1
 8002788:	647b      	str	r3, [r7, #68]	; 0x44
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29a      	uxth	r2, r3
 8002790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002792:	b29b      	uxth	r3, r3
 8002794:	029b      	lsls	r3, r3, #10
 8002796:	b29b      	uxth	r3, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	b29a      	uxth	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b0:	827b      	strh	r3, [r7, #18]
 80027b2:	8a7b      	ldrh	r3, [r7, #18]
 80027b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80027b8:	827b      	strh	r3, [r7, #18]
 80027ba:	8a7b      	ldrh	r3, [r7, #18]
 80027bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027c0:	827b      	strh	r3, [r7, #18]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	8a7b      	ldrh	r3, [r7, #18]
 80027c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d8:	b29b      	uxth	r3, r3
 80027da:	8013      	strh	r3, [r2, #0]
 80027dc:	e234      	b.n	8002c48 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027f2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f280 80fc 	bge.w	80029f4 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29a      	uxth	r2, r3
 800280e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002812:	4013      	ands	r3, r2
 8002814:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800282a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800282e:	b292      	uxth	r2, r2
 8002830:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002832:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284a:	7b1b      	ldrb	r3, [r3, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d125      	bne.n	800289c <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002858:	b29b      	uxth	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4413      	add	r3, r2
 8002864:	3306      	adds	r3, #6
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	4413      	add	r3, r2
 800286e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002878:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800287c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8092 	beq.w	80029aa <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288c:	6959      	ldr	r1, [r3, #20]
 800288e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002890:	88da      	ldrh	r2, [r3, #6]
 8002892:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002896:	f004 fe2f 	bl	80074f8 <USB_ReadPMA>
 800289a:	e086      	b.n	80029aa <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800289c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289e:	78db      	ldrb	r3, [r3, #3]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d10a      	bne.n	80028ba <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028a8:	461a      	mov	r2, r3
 80028aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f9d9 	bl	8002c64 <HAL_PCD_EP_DB_Receive>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80028b8:	e077      	b.n	80029aa <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	441a      	add	r2, r3
 80028e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80028ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d024      	beq.n	8002962 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002920:	b29b      	uxth	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	3302      	adds	r3, #2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002940:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002944:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002948:	2b00      	cmp	r3, #0
 800294a:	d02e      	beq.n	80029aa <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002952:	6959      	ldr	r1, [r3, #20]
 8002954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002956:	891a      	ldrh	r2, [r3, #8]
 8002958:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800295c:	f004 fdcc 	bl	80074f8 <USB_ReadPMA>
 8002960:	e023      	b.n	80029aa <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296a:	b29b      	uxth	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	3306      	adds	r3, #6
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800298e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299c:	6959      	ldr	r1, [r3, #20]
 800299e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a0:	895a      	ldrh	r2, [r3, #10]
 80029a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029a6:	f004 fda7 	bl	80074f8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029b2:	441a      	add	r2, r3
 80029b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029c0:	441a      	add	r2, r3
 80029c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <PCD_EP_ISR_Handler+0x51c>
 80029ce:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80029d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d206      	bcs.n	80029e8 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f006 fba5 	bl	8009130 <HAL_PCD_DataOutStageCallback>
 80029e6:	e005      	b.n	80029f4 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 f85d 	bl	8005aae <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8123 	beq.w	8002c48 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a02:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	4413      	add	r3, r2
 8002a14:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	441a      	add	r2, r3
 8002a42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a54:	78db      	ldrb	r3, [r3, #3]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	f040 80a2 	bne.w	8002ba0 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5e:	2200      	movs	r2, #0
 8002a60:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a64:	7b1b      	ldrb	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8093 	beq.w	8002b92 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d046      	beq.n	8002b06 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7a:	785b      	ldrb	r3, [r3, #1]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d126      	bne.n	8002ace <PCD_EP_ISR_Handler+0x610>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	4413      	add	r3, r2
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
 8002a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	011a      	lsls	r2, r3, #4
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002aa6:	623b      	str	r3, [r7, #32]
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	801a      	strh	r2, [r3, #0]
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	801a      	strh	r2, [r3, #0]
 8002acc:	e061      	b.n	8002b92 <PCD_EP_ISR_Handler+0x6d4>
 8002ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad0:	785b      	ldrb	r3, [r3, #1]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d15d      	bne.n	8002b92 <PCD_EP_ISR_Handler+0x6d4>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	4413      	add	r3, r2
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	011a      	lsls	r2, r3, #4
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	4413      	add	r3, r2
 8002af8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	2200      	movs	r2, #0
 8002b02:	801a      	strh	r2, [r3, #0]
 8002b04:	e045      	b.n	8002b92 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0e:	785b      	ldrb	r3, [r3, #1]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d126      	bne.n	8002b62 <PCD_EP_ISR_Handler+0x6a4>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	637b      	str	r3, [r7, #52]	; 0x34
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b28:	4413      	add	r3, r2
 8002b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	011a      	lsls	r2, r3, #4
 8002b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b34:	4413      	add	r3, r2
 8002b36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4a:	801a      	strh	r2, [r3, #0]
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5e:	801a      	strh	r2, [r3, #0]
 8002b60:	e017      	b.n	8002b92 <PCD_EP_ISR_Handler+0x6d4>
 8002b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b64:	785b      	ldrb	r3, [r3, #1]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d113      	bne.n	8002b92 <PCD_EP_ISR_Handler+0x6d4>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b78:	4413      	add	r3, r2
 8002b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	011a      	lsls	r2, r3, #4
 8002b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b84:	4413      	add	r3, r2
 8002b86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8e:	2200      	movs	r2, #0
 8002b90:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f006 fae4 	bl	8009166 <HAL_PCD_DataInStageCallback>
 8002b9e:	e053      	b.n	8002c48 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002ba0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d146      	bne.n	8002c3a <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bda:	699a      	ldr	r2, [r3, #24]
 8002bdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d907      	bls.n	8002bf4 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002bec:	1ad2      	subs	r2, r2, r3
 8002bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf0:	619a      	str	r2, [r3, #24]
 8002bf2:	e002      	b.n	8002bfa <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f006 faac 	bl	8009166 <HAL_PCD_DataInStageCallback>
 8002c0e:	e01b      	b.n	8002c48 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c18:	441a      	add	r2, r3
 8002c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c26:	441a      	add	r2, r3
 8002c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c32:	4618      	mov	r0, r3
 8002c34:	f002 ff3b 	bl	8005aae <USB_EPStartXfer>
 8002c38:	e006      	b.n	8002c48 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c3e:	461a      	mov	r2, r3
 8002c40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f91b 	bl	8002e7e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	b21b      	sxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f6ff ac37 	blt.w	80024c8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3758      	adds	r7, #88	; 0x58
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d07e      	beq.n	8002d7a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3302      	adds	r3, #2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	8b7b      	ldrh	r3, [r7, #26]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d306      	bcc.n	8002cbe <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	699a      	ldr	r2, [r3, #24]
 8002cb4:	8b7b      	ldrh	r3, [r7, #26]
 8002cb6:	1ad2      	subs	r2, r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	619a      	str	r2, [r3, #24]
 8002cbc:	e002      	b.n	8002cc4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d123      	bne.n	8002d14 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce6:	833b      	strh	r3, [r7, #24]
 8002ce8:	8b3b      	ldrh	r3, [r7, #24]
 8002cea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cee:	833b      	strh	r3, [r7, #24]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	441a      	add	r2, r3
 8002cfe:	8b3b      	ldrh	r3, [r7, #24]
 8002d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01f      	beq.n	8002d5e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d38:	82fb      	strh	r3, [r7, #22]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	441a      	add	r2, r3
 8002d48:	8afb      	ldrh	r3, [r7, #22]
 8002d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d5e:	8b7b      	ldrh	r3, [r7, #26]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8087 	beq.w	8002e74 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	6959      	ldr	r1, [r3, #20]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	891a      	ldrh	r2, [r3, #8]
 8002d72:	8b7b      	ldrh	r3, [r7, #26]
 8002d74:	f004 fbc0 	bl	80074f8 <USB_ReadPMA>
 8002d78:	e07c      	b.n	8002e74 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3306      	adds	r3, #6
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	8b7b      	ldrh	r3, [r7, #26]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d306      	bcc.n	8002dbc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	8b7b      	ldrh	r3, [r7, #26]
 8002db4:	1ad2      	subs	r2, r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	619a      	str	r2, [r3, #24]
 8002dba:	e002      	b.n	8002dc2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d123      	bne.n	8002e12 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de4:	83fb      	strh	r3, [r7, #30]
 8002de6:	8bfb      	ldrh	r3, [r7, #30]
 8002de8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002dec:	83fb      	strh	r3, [r7, #30]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	441a      	add	r2, r3
 8002dfc:	8bfb      	ldrh	r3, [r7, #30]
 8002dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d11f      	bne.n	8002e5c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e36:	83bb      	strh	r3, [r7, #28]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	441a      	add	r2, r3
 8002e46:	8bbb      	ldrh	r3, [r7, #28]
 8002e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e5c:	8b7b      	ldrh	r3, [r7, #26]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	6959      	ldr	r1, [r3, #20]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	895a      	ldrh	r2, [r3, #10]
 8002e6e:	8b7b      	ldrh	r3, [r7, #26]
 8002e70:	f004 fb42 	bl	80074f8 <USB_ReadPMA>
    }
  }

  return count;
 8002e74:	8b7b      	ldrh	r3, [r7, #26]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b0a4      	sub	sp, #144	; 0x90
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 81dd 	beq.w	8003252 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3302      	adds	r3, #2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d907      	bls.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ed8:	1ad2      	subs	r2, r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	619a      	str	r2, [r3, #24]
 8002ede:	e002      	b.n	8002ee6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f040 80b9 	bne.w	8003062 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	785b      	ldrb	r3, [r3, #1]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d126      	bne.n	8002f46 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	4413      	add	r3, r2
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	011a      	lsls	r2, r3, #4
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	4413      	add	r3, r2
 8002f1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	801a      	strh	r2, [r3, #0]
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	801a      	strh	r2, [r3, #0]
 8002f44:	e01a      	b.n	8002f7c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	785b      	ldrb	r3, [r3, #1]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d116      	bne.n	8002f7c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	637b      	str	r3, [r7, #52]	; 0x34
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f62:	4413      	add	r3, r2
 8002f64:	637b      	str	r3, [r7, #52]	; 0x34
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	011a      	lsls	r2, r3, #4
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6e:	4413      	add	r3, r2
 8002f70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f74:	633b      	str	r3, [r7, #48]	; 0x30
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	2200      	movs	r2, #0
 8002f7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	785b      	ldrb	r3, [r3, #1]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d126      	bne.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	011a      	lsls	r2, r3, #4
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	4413      	add	r3, r2
 8002fac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	801a      	strh	r2, [r3, #0]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	801a      	strh	r2, [r3, #0]
 8002fd6:	e017      	b.n	8003008 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	785b      	ldrb	r3, [r3, #1]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d113      	bne.n	8003008 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	4413      	add	r3, r2
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	011a      	lsls	r2, r3, #4
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003000:	623b      	str	r3, [r7, #32]
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	2200      	movs	r2, #0
 8003006:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4619      	mov	r1, r3
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f006 f8a9 	bl	8009166 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 82fc 	beq.w	8003618 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	b29b      	uxth	r3, r3
 8003032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	82fb      	strh	r3, [r7, #22]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	441a      	add	r2, r3
 800304a:	8afb      	ldrh	r3, [r7, #22]
 800304c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305c:	b29b      	uxth	r3, r3
 800305e:	8013      	strh	r3, [r2, #0]
 8003060:	e2da      	b.n	8003618 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d021      	beq.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003086:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	441a      	add	r2, r3
 8003098:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800309c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	f040 82ae 	bne.w	8003618 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030c4:	441a      	add	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030d2:	441a      	add	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	6a1a      	ldr	r2, [r3, #32]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d30b      	bcc.n	80030fc <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	6a1a      	ldr	r2, [r3, #32]
 80030f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030f4:	1ad2      	subs	r2, r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	621a      	str	r2, [r3, #32]
 80030fa:	e017      	b.n	800312c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d108      	bne.n	8003116 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003104:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003108:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003114:	e00a      	b.n	800312c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2200      	movs	r2, #0
 800312a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	785b      	ldrb	r3, [r3, #1]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d165      	bne.n	8003200 <HAL_PCD_EP_DB_Transmit+0x382>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003142:	b29b      	uxth	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003148:	4413      	add	r3, r2
 800314a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	011a      	lsls	r2, r3, #4
 8003152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003154:	4413      	add	r3, r2
 8003156:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800315a:	63bb      	str	r3, [r7, #56]	; 0x38
 800315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003166:	b29a      	uxth	r2, r3
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	801a      	strh	r2, [r3, #0]
 800316c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003170:	2b3e      	cmp	r3, #62	; 0x3e
 8003172:	d91d      	bls.n	80031b0 <HAL_PCD_EP_DB_Transmit+0x332>
 8003174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	64bb      	str	r3, [r7, #72]	; 0x48
 800317c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <HAL_PCD_EP_DB_Transmit+0x310>
 8003188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318a:	3b01      	subs	r3, #1
 800318c:	64bb      	str	r3, [r7, #72]	; 0x48
 800318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	b29a      	uxth	r2, r3
 8003194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003196:	b29b      	uxth	r3, r3
 8003198:	029b      	lsls	r3, r3, #10
 800319a:	b29b      	uxth	r3, r3
 800319c:	4313      	orrs	r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	e044      	b.n	800323a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80031b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <HAL_PCD_EP_DB_Transmit+0x350>
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	801a      	strh	r2, [r3, #0]
 80031cc:	e035      	b.n	800323a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80031ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80031d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80031e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e4:	3301      	adds	r3, #1
 80031e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	029b      	lsls	r3, r3, #10
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	4313      	orrs	r3, r2
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	801a      	strh	r2, [r3, #0]
 80031fe:	e01c      	b.n	800323a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	785b      	ldrb	r3, [r3, #1]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d118      	bne.n	800323a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	647b      	str	r3, [r7, #68]	; 0x44
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003216:	b29b      	uxth	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800321c:	4413      	add	r3, r2
 800321e:	647b      	str	r3, [r7, #68]	; 0x44
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	011a      	lsls	r2, r3, #4
 8003226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003228:	4413      	add	r3, r2
 800322a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800322e:	643b      	str	r3, [r7, #64]	; 0x40
 8003230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003234:	b29a      	uxth	r2, r3
 8003236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003238:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	6959      	ldr	r1, [r3, #20]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	891a      	ldrh	r2, [r3, #8]
 8003246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800324a:	b29b      	uxth	r3, r3
 800324c:	f004 f90e 	bl	800746c <USB_WritePMA>
 8003250:	e1e2      	b.n	8003618 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800325a:	b29b      	uxth	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	3306      	adds	r3, #6
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800327a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003286:	429a      	cmp	r2, r3
 8003288:	d307      	bcc.n	800329a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003292:	1ad2      	subs	r2, r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	619a      	str	r2, [r3, #24]
 8003298:	e002      	b.n	80032a0 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2200      	movs	r2, #0
 800329e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f040 80c0 	bne.w	800342a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	785b      	ldrb	r3, [r3, #1]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d126      	bne.n	8003300 <HAL_PCD_EP_DB_Transmit+0x482>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032c6:	4413      	add	r3, r2
 80032c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	011a      	lsls	r2, r3, #4
 80032d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032d2:	4413      	add	r3, r2
 80032d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80032da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e8:	801a      	strh	r2, [r3, #0]
 80032ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032fc:	801a      	strh	r2, [r3, #0]
 80032fe:	e01a      	b.n	8003336 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	785b      	ldrb	r3, [r3, #1]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d116      	bne.n	8003336 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	667b      	str	r3, [r7, #100]	; 0x64
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800331c:	4413      	add	r3, r2
 800331e:	667b      	str	r3, [r7, #100]	; 0x64
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	011a      	lsls	r2, r3, #4
 8003326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003328:	4413      	add	r3, r2
 800332a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800332e:	663b      	str	r3, [r7, #96]	; 0x60
 8003330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003332:	2200      	movs	r2, #0
 8003334:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	677b      	str	r3, [r7, #116]	; 0x74
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	785b      	ldrb	r3, [r3, #1]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d12b      	bne.n	800339c <HAL_PCD_EP_DB_Transmit+0x51e>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	66fb      	str	r3, [r7, #108]	; 0x6c
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003352:	b29b      	uxth	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003358:	4413      	add	r3, r2
 800335a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	011a      	lsls	r2, r3, #4
 8003362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003364:	4413      	add	r3, r2
 8003366:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800336a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800336e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800337a:	b29a      	uxth	r2, r3
 800337c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003380:	801a      	strh	r2, [r3, #0]
 8003382:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800338e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003392:	b29a      	uxth	r2, r3
 8003394:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003398:	801a      	strh	r2, [r3, #0]
 800339a:	e017      	b.n	80033cc <HAL_PCD_EP_DB_Transmit+0x54e>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	785b      	ldrb	r3, [r3, #1]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d113      	bne.n	80033cc <HAL_PCD_EP_DB_Transmit+0x54e>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b2:	4413      	add	r3, r2
 80033b4:	677b      	str	r3, [r7, #116]	; 0x74
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	011a      	lsls	r2, r3, #4
 80033bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033be:	4413      	add	r3, r2
 80033c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033c4:	673b      	str	r3, [r7, #112]	; 0x70
 80033c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c8:	2200      	movs	r2, #0
 80033ca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	4619      	mov	r1, r3
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f005 fec7 	bl	8009166 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 811a 	bne.w	8003618 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fe:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	441a      	add	r2, r3
 8003410:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800341c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003424:	b29b      	uxth	r3, r3
 8003426:	8013      	strh	r3, [r2, #0]
 8003428:	e0f6      	b.n	8003618 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d121      	bne.n	8003478 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	441a      	add	r2, r3
 8003460:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800346c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003474:	b29b      	uxth	r3, r3
 8003476:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800347e:	2b01      	cmp	r3, #1
 8003480:	f040 80ca 	bne.w	8003618 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800348c:	441a      	add	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800349a:	441a      	add	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	6a1a      	ldr	r2, [r3, #32]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d30b      	bcc.n	80034c4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6a1a      	ldr	r2, [r3, #32]
 80034b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034bc:	1ad2      	subs	r2, r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	621a      	str	r2, [r3, #32]
 80034c2:	e017      	b.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d108      	bne.n	80034de <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80034cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034dc:	e00a      	b.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2200      	movs	r2, #0
 80034ea:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	657b      	str	r3, [r7, #84]	; 0x54
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	785b      	ldrb	r3, [r3, #1]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d165      	bne.n	80035ce <HAL_PCD_EP_DB_Transmit+0x750>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003510:	b29b      	uxth	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003516:	4413      	add	r3, r2
 8003518:	65fb      	str	r3, [r7, #92]	; 0x5c
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	011a      	lsls	r2, r3, #4
 8003520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003522:	4413      	add	r3, r2
 8003524:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003528:	65bb      	str	r3, [r7, #88]	; 0x58
 800352a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003534:	b29a      	uxth	r2, r3
 8003536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003538:	801a      	strh	r2, [r3, #0]
 800353a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800353e:	2b3e      	cmp	r3, #62	; 0x3e
 8003540:	d91d      	bls.n	800357e <HAL_PCD_EP_DB_Transmit+0x700>
 8003542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	66bb      	str	r3, [r7, #104]	; 0x68
 800354a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	2b00      	cmp	r3, #0
 8003554:	d102      	bne.n	800355c <HAL_PCD_EP_DB_Transmit+0x6de>
 8003556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003558:	3b01      	subs	r3, #1
 800355a:	66bb      	str	r3, [r7, #104]	; 0x68
 800355c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29a      	uxth	r2, r3
 8003562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003564:	b29b      	uxth	r3, r3
 8003566:	029b      	lsls	r3, r3, #10
 8003568:	b29b      	uxth	r3, r3
 800356a:	4313      	orrs	r3, r2
 800356c:	b29b      	uxth	r3, r3
 800356e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003576:	b29a      	uxth	r2, r3
 8003578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800357a:	801a      	strh	r2, [r3, #0]
 800357c:	e041      	b.n	8003602 <HAL_PCD_EP_DB_Transmit+0x784>
 800357e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10a      	bne.n	800359c <HAL_PCD_EP_DB_Transmit+0x71e>
 8003586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003594:	b29a      	uxth	r2, r3
 8003596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	e032      	b.n	8003602 <HAL_PCD_EP_DB_Transmit+0x784>
 800359c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_PCD_EP_DB_Transmit+0x738>
 80035b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035b2:	3301      	adds	r3, #1
 80035b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80035b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035be:	b29b      	uxth	r3, r3
 80035c0:	029b      	lsls	r3, r3, #10
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	4313      	orrs	r3, r2
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	e019      	b.n	8003602 <HAL_PCD_EP_DB_Transmit+0x784>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	785b      	ldrb	r3, [r3, #1]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d115      	bne.n	8003602 <HAL_PCD_EP_DB_Transmit+0x784>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035de:	b29b      	uxth	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e4:	4413      	add	r3, r2
 80035e6:	657b      	str	r3, [r7, #84]	; 0x54
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	011a      	lsls	r2, r3, #4
 80035ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f0:	4413      	add	r3, r2
 80035f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035f6:	653b      	str	r3, [r7, #80]	; 0x50
 80035f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003600:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	6959      	ldr	r1, [r3, #20]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	895a      	ldrh	r2, [r3, #10]
 800360e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003612:	b29b      	uxth	r3, r3
 8003614:	f003 ff2a 	bl	800746c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003632:	82bb      	strh	r3, [r7, #20]
 8003634:	8abb      	ldrh	r3, [r7, #20]
 8003636:	f083 0310 	eor.w	r3, r3, #16
 800363a:	82bb      	strh	r3, [r7, #20]
 800363c:	8abb      	ldrh	r3, [r7, #20]
 800363e:	f083 0320 	eor.w	r3, r3, #32
 8003642:	82bb      	strh	r3, [r7, #20]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	441a      	add	r2, r3
 8003652:	8abb      	ldrh	r3, [r7, #20]
 8003654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800365c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003664:	b29b      	uxth	r3, r3
 8003666:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3790      	adds	r7, #144	; 0x90
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003672:	b480      	push	{r7}
 8003674:	b087      	sub	sp, #28
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	817b      	strh	r3, [r7, #10]
 8003680:	4613      	mov	r3, r2
 8003682:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003684:	897b      	ldrh	r3, [r7, #10]
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003690:	897b      	ldrh	r3, [r7, #10]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	e009      	b.n	80036bc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036a8:	897a      	ldrh	r2, [r7, #10]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4413      	add	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036bc:	893b      	ldrh	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d107      	bne.n	80036d2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2200      	movs	r2, #0
 80036c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	80da      	strh	r2, [r3, #6]
 80036d0:	e00b      	b.n	80036ea <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2201      	movs	r2, #1
 80036d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80036fe:	af00      	add	r7, sp, #0
 8003700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003704:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003708:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800370a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f001 b823 	b.w	8004764 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 817d 	beq.w	8003a2e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003734:	4bbc      	ldr	r3, [pc, #752]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b04      	cmp	r3, #4
 800373e:	d00c      	beq.n	800375a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003740:	4bb9      	ldr	r3, [pc, #740]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 030c 	and.w	r3, r3, #12
 8003748:	2b08      	cmp	r3, #8
 800374a:	d15c      	bne.n	8003806 <HAL_RCC_OscConfig+0x10e>
 800374c:	4bb6      	ldr	r3, [pc, #728]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003758:	d155      	bne.n	8003806 <HAL_RCC_OscConfig+0x10e>
 800375a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800375e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800376e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d102      	bne.n	800378c <HAL_RCC_OscConfig+0x94>
 8003786:	4ba8      	ldr	r3, [pc, #672]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	e015      	b.n	80037b8 <HAL_RCC_OscConfig+0xc0>
 800378c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003790:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80037a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037a4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80037a8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80037b4:	4b9c      	ldr	r3, [pc, #624]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037bc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80037c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80037c4:	fa92 f2a2 	rbit	r2, r2
 80037c8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80037cc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80037d0:	fab2 f282 	clz	r2, r2
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	f042 0220 	orr.w	r2, r2, #32
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	f002 021f 	and.w	r2, r2, #31
 80037e0:	2101      	movs	r1, #1
 80037e2:	fa01 f202 	lsl.w	r2, r1, r2
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 811f 	beq.w	8003a2c <HAL_RCC_OscConfig+0x334>
 80037ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 8116 	bne.w	8003a2c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	f000 bfaf 	b.w	8004764 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003816:	d106      	bne.n	8003826 <HAL_RCC_OscConfig+0x12e>
 8003818:	4b83      	ldr	r3, [pc, #524]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a82      	ldr	r2, [pc, #520]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 800381e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	e036      	b.n	8003894 <HAL_RCC_OscConfig+0x19c>
 8003826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x158>
 8003836:	4b7c      	ldr	r3, [pc, #496]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a7b      	ldr	r2, [pc, #492]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 800383c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	4b79      	ldr	r3, [pc, #484]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a78      	ldr	r2, [pc, #480]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 8003848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e021      	b.n	8003894 <HAL_RCC_OscConfig+0x19c>
 8003850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003854:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x184>
 8003862:	4b71      	ldr	r3, [pc, #452]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a70      	ldr	r2, [pc, #448]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 8003868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b6e      	ldr	r3, [pc, #440]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a6d      	ldr	r2, [pc, #436]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 8003874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e00b      	b.n	8003894 <HAL_RCC_OscConfig+0x19c>
 800387c:	4b6a      	ldr	r3, [pc, #424]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a69      	ldr	r2, [pc, #420]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 8003882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b67      	ldr	r3, [pc, #412]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a66      	ldr	r2, [pc, #408]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 800388e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003892:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003894:	4b64      	ldr	r3, [pc, #400]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	f023 020f 	bic.w	r2, r3, #15
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	495f      	ldr	r1, [pc, #380]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d059      	beq.n	8003972 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038be:	f7fd f961 	bl	8000b84 <HAL_GetTick>
 80038c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	e00a      	b.n	80038de <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c8:	f7fd f95c 	bl	8000b84 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b64      	cmp	r3, #100	; 0x64
 80038d6:	d902      	bls.n	80038de <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	f000 bf43 	b.w	8004764 <HAL_RCC_OscConfig+0x106c>
 80038de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038e2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80038f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	d102      	bne.n	8003910 <HAL_RCC_OscConfig+0x218>
 800390a:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	e015      	b.n	800393c <HAL_RCC_OscConfig+0x244>
 8003910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003914:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003928:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800392c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003938:	4b3b      	ldr	r3, [pc, #236]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003940:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003944:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003948:	fa92 f2a2 	rbit	r2, r2
 800394c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003950:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003954:	fab2 f282 	clz	r2, r2
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	f042 0220 	orr.w	r2, r2, #32
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	f002 021f 	and.w	r2, r2, #31
 8003964:	2101      	movs	r1, #1
 8003966:	fa01 f202 	lsl.w	r2, r1, r2
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ab      	beq.n	80038c8 <HAL_RCC_OscConfig+0x1d0>
 8003970:	e05d      	b.n	8003a2e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003972:	f7fd f907 	bl	8000b84 <HAL_GetTick>
 8003976:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397a:	e00a      	b.n	8003992 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800397c:	f7fd f902 	bl	8000b84 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b64      	cmp	r3, #100	; 0x64
 800398a:	d902      	bls.n	8003992 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	f000 bee9 	b.w	8004764 <HAL_RCC_OscConfig+0x106c>
 8003992:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003996:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80039a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	fab3 f383 	clz	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d102      	bne.n	80039c4 <HAL_RCC_OscConfig+0x2cc>
 80039be:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	e015      	b.n	80039f0 <HAL_RCC_OscConfig+0x2f8>
 80039c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80039d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039dc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80039e0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80039e4:	fa93 f3a3 	rbit	r3, r3
 80039e8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <HAL_RCC_OscConfig+0x330>)
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039f4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80039f8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80039fc:	fa92 f2a2 	rbit	r2, r2
 8003a00:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003a04:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003a08:	fab2 f282 	clz	r2, r2
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	f042 0220 	orr.w	r2, r2, #32
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	f002 021f 	and.w	r2, r2, #31
 8003a18:	2101      	movs	r1, #1
 8003a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1ab      	bne.n	800397c <HAL_RCC_OscConfig+0x284>
 8003a24:	e003      	b.n	8003a2e <HAL_RCC_OscConfig+0x336>
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 817d 	beq.w	8003d3e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a44:	4ba6      	ldr	r3, [pc, #664]	; (8003ce0 <HAL_RCC_OscConfig+0x5e8>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00b      	beq.n	8003a68 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a50:	4ba3      	ldr	r3, [pc, #652]	; (8003ce0 <HAL_RCC_OscConfig+0x5e8>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d172      	bne.n	8003b42 <HAL_RCC_OscConfig+0x44a>
 8003a5c:	4ba0      	ldr	r3, [pc, #640]	; (8003ce0 <HAL_RCC_OscConfig+0x5e8>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d16c      	bne.n	8003b42 <HAL_RCC_OscConfig+0x44a>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003a72:	fa93 f3a3 	rbit	r3, r3
 8003a76:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003a7a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d102      	bne.n	8003a98 <HAL_RCC_OscConfig+0x3a0>
 8003a92:	4b93      	ldr	r3, [pc, #588]	; (8003ce0 <HAL_RCC_OscConfig+0x5e8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	e013      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3c8>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003aaa:	2302      	movs	r3, #2
 8003aac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003ab0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ab4:	fa93 f3a3 	rbit	r3, r3
 8003ab8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003abc:	4b88      	ldr	r3, [pc, #544]	; (8003ce0 <HAL_RCC_OscConfig+0x5e8>)
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003ac6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003aca:	fa92 f2a2 	rbit	r2, r2
 8003ace:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003ad2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003ad6:	fab2 f282 	clz	r2, r2
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	f042 0220 	orr.w	r2, r2, #32
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	f002 021f 	and.w	r2, r2, #31
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_RCC_OscConfig+0x410>
 8003af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d002      	beq.n	8003b08 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f000 be2e 	b.w	8004764 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b08:	4b75      	ldr	r3, [pc, #468]	; (8003ce0 <HAL_RCC_OscConfig+0x5e8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	21f8      	movs	r1, #248	; 0xf8
 8003b1e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003b26:	fa91 f1a1 	rbit	r1, r1
 8003b2a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003b2e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003b32:	fab1 f181 	clz	r1, r1
 8003b36:	b2c9      	uxtb	r1, r1
 8003b38:	408b      	lsls	r3, r1
 8003b3a:	4969      	ldr	r1, [pc, #420]	; (8003ce0 <HAL_RCC_OscConfig+0x5e8>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b40:	e0fd      	b.n	8003d3e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 8088 	beq.w	8003c64 <HAL_RCC_OscConfig+0x56c>
 8003b54:	2301      	movs	r3, #1
 8003b56:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003b66:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fd f800 	bl	8000b84 <HAL_GetTick>
 8003b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7fc fffb 	bl	8000b84 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d902      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	f000 bde2 	b.w	8004764 <HAL_RCC_OscConfig+0x106c>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003bb2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d102      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x4d8>
 8003bca:	4b45      	ldr	r3, [pc, #276]	; (8003ce0 <HAL_RCC_OscConfig+0x5e8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	e013      	b.n	8003bf8 <HAL_RCC_OscConfig+0x500>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003be2:	2302      	movs	r3, #2
 8003be4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003be8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003bf4:	4b3a      	ldr	r3, [pc, #232]	; (8003ce0 <HAL_RCC_OscConfig+0x5e8>)
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003bfe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003c02:	fa92 f2a2 	rbit	r2, r2
 8003c06:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003c0a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c0e:	fab2 f282 	clz	r2, r2
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	f042 0220 	orr.w	r2, r2, #32
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	f002 021f 	and.w	r2, r2, #31
 8003c1e:	2101      	movs	r1, #1
 8003c20:	fa01 f202 	lsl.w	r2, r1, r2
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0af      	beq.n	8003b8a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2a:	4b2d      	ldr	r3, [pc, #180]	; (8003ce0 <HAL_RCC_OscConfig+0x5e8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	21f8      	movs	r1, #248	; 0xf8
 8003c40:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003c48:	fa91 f1a1 	rbit	r1, r1
 8003c4c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003c50:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003c54:	fab1 f181 	clz	r1, r1
 8003c58:	b2c9      	uxtb	r1, r1
 8003c5a:	408b      	lsls	r3, r1
 8003c5c:	4920      	ldr	r1, [pc, #128]	; (8003ce0 <HAL_RCC_OscConfig+0x5e8>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
 8003c62:	e06c      	b.n	8003d3e <HAL_RCC_OscConfig+0x646>
 8003c64:	2301      	movs	r3, #1
 8003c66:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003c6e:	fa93 f3a3 	rbit	r3, r3
 8003c72:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003c76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fc ff78 	bl	8000b84 <HAL_GetTick>
 8003c94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c9a:	f7fc ff73 	bl	8000b84 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d902      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	f000 bd5a 	b.w	8004764 <HAL_RCC_OscConfig+0x106c>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc6:	fab3 f383 	clz	r3, r3
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d104      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x5ec>
 8003cda:	4b01      	ldr	r3, [pc, #4]	; (8003ce0 <HAL_RCC_OscConfig+0x5e8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	e015      	b.n	8003d0c <HAL_RCC_OscConfig+0x614>
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003cfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003d08:	4bc8      	ldr	r3, [pc, #800]	; (800402c <HAL_RCC_OscConfig+0x934>)
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003d12:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003d16:	fa92 f2a2 	rbit	r2, r2
 8003d1a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003d1e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003d22:	fab2 f282 	clz	r2, r2
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	f042 0220 	orr.w	r2, r2, #32
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	f002 021f 	and.w	r2, r2, #31
 8003d32:	2101      	movs	r1, #1
 8003d34:	fa01 f202 	lsl.w	r2, r1, r2
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1ad      	bne.n	8003c9a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 8110 	beq.w	8003f74 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d079      	beq.n	8003e58 <HAL_RCC_OscConfig+0x760>
 8003d64:	2301      	movs	r3, #1
 8003d66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7a:	fab3 f383 	clz	r3, r3
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	4bab      	ldr	r3, [pc, #684]	; (8004030 <HAL_RCC_OscConfig+0x938>)
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d8e:	f7fc fef9 	bl	8000b84 <HAL_GetTick>
 8003d92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d98:	f7fc fef4 	bl	8000b84 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d902      	bls.n	8003dae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	f000 bcdb 	b.w	8004764 <HAL_RCC_OscConfig+0x106c>
 8003dae:	2302      	movs	r3, #2
 8003db0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003dc8:	2202      	movs	r2, #2
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	fa93 f2a3 	rbit	r2, r3
 8003dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dec:	2202      	movs	r2, #2
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	fa93 f2a3 	rbit	r2, r3
 8003dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e06:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e08:	4b88      	ldr	r3, [pc, #544]	; (800402c <HAL_RCC_OscConfig+0x934>)
 8003e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e14:	2102      	movs	r1, #2
 8003e16:	6019      	str	r1, [r3, #0]
 8003e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	fa93 f1a3 	rbit	r1, r3
 8003e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e2e:	6019      	str	r1, [r3, #0]
  return result;
 8003e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0a0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x6a0>
 8003e56:	e08d      	b.n	8003f74 <HAL_RCC_OscConfig+0x87c>
 8003e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	fa93 f2a3 	rbit	r2, r3
 8003e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e7a:	601a      	str	r2, [r3, #0]
  return result;
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e84:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b68      	ldr	r3, [pc, #416]	; (8004030 <HAL_RCC_OscConfig+0x938>)
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	461a      	mov	r2, r3
 8003e96:	2300      	movs	r3, #0
 8003e98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7fc fe73 	bl	8000b84 <HAL_GetTick>
 8003e9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea4:	f7fc fe6e 	bl	8000b84 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d902      	bls.n	8003eba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	f000 bc55 	b.w	8004764 <HAL_RCC_OscConfig+0x106c>
 8003eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ebe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	fa93 f2a3 	rbit	r2, r3
 8003ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	fa93 f2a3 	rbit	r2, r3
 8003ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	fa93 f2a3 	rbit	r2, r3
 8003f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003f24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f26:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCC_OscConfig+0x934>)
 8003f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003f32:	2102      	movs	r1, #2
 8003f34:	6019      	str	r1, [r3, #0]
 8003f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	fa93 f1a3 	rbit	r1, r3
 8003f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003f4c:	6019      	str	r1, [r3, #0]
  return result;
 8003f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f52:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	fab3 f383 	clz	r3, r3
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	2101      	movs	r1, #1
 8003f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d197      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 81a1 	beq.w	80042cc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f90:	4b26      	ldr	r3, [pc, #152]	; (800402c <HAL_RCC_OscConfig+0x934>)
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d116      	bne.n	8003fca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9c:	4b23      	ldr	r3, [pc, #140]	; (800402c <HAL_RCC_OscConfig+0x934>)
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	4a22      	ldr	r2, [pc, #136]	; (800402c <HAL_RCC_OscConfig+0x934>)
 8003fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	61d3      	str	r3, [r2, #28]
 8003fa8:	4b20      	ldr	r3, [pc, #128]	; (800402c <HAL_RCC_OscConfig+0x934>)
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003fc2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fca:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <HAL_RCC_OscConfig+0x93c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d11a      	bne.n	800400c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <HAL_RCC_OscConfig+0x93c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a16      	ldr	r2, [pc, #88]	; (8004034 <HAL_RCC_OscConfig+0x93c>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe2:	f7fc fdcf 	bl	8000b84 <HAL_GetTick>
 8003fe6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fea:	e009      	b.n	8004000 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fec:	f7fc fdca 	bl	8000b84 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b64      	cmp	r3, #100	; 0x64
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e3b1      	b.n	8004764 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <HAL_RCC_OscConfig+0x93c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ef      	beq.n	8003fec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004010:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d10d      	bne.n	8004038 <HAL_RCC_OscConfig+0x940>
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <HAL_RCC_OscConfig+0x934>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	4a02      	ldr	r2, [pc, #8]	; (800402c <HAL_RCC_OscConfig+0x934>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	6213      	str	r3, [r2, #32]
 8004028:	e03c      	b.n	80040a4 <HAL_RCC_OscConfig+0x9ac>
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
 8004030:	10908120 	.word	0x10908120
 8004034:	40007000 	.word	0x40007000
 8004038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10c      	bne.n	8004062 <HAL_RCC_OscConfig+0x96a>
 8004048:	4bc1      	ldr	r3, [pc, #772]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4ac0      	ldr	r2, [pc, #768]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	6213      	str	r3, [r2, #32]
 8004054:	4bbe      	ldr	r3, [pc, #760]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	4abd      	ldr	r2, [pc, #756]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 800405a:	f023 0304 	bic.w	r3, r3, #4
 800405e:	6213      	str	r3, [r2, #32]
 8004060:	e020      	b.n	80040a4 <HAL_RCC_OscConfig+0x9ac>
 8004062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	2b05      	cmp	r3, #5
 8004070:	d10c      	bne.n	800408c <HAL_RCC_OscConfig+0x994>
 8004072:	4bb7      	ldr	r3, [pc, #732]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	4ab6      	ldr	r2, [pc, #728]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 8004078:	f043 0304 	orr.w	r3, r3, #4
 800407c:	6213      	str	r3, [r2, #32]
 800407e:	4bb4      	ldr	r3, [pc, #720]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	4ab3      	ldr	r2, [pc, #716]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6213      	str	r3, [r2, #32]
 800408a:	e00b      	b.n	80040a4 <HAL_RCC_OscConfig+0x9ac>
 800408c:	4bb0      	ldr	r3, [pc, #704]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4aaf      	ldr	r2, [pc, #700]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	6213      	str	r3, [r2, #32]
 8004098:	4bad      	ldr	r3, [pc, #692]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	4aac      	ldr	r2, [pc, #688]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 800409e:	f023 0304 	bic.w	r3, r3, #4
 80040a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8081 	beq.w	80041b8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b6:	f7fc fd65 	bl	8000b84 <HAL_GetTick>
 80040ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040be:	e00b      	b.n	80040d8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c0:	f7fc fd60 	bl	8000b84 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e345      	b.n	8004764 <HAL_RCC_OscConfig+0x106c>
 80040d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80040e0:	2202      	movs	r2, #2
 80040e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	fa93 f2a3 	rbit	r2, r3
 80040f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004100:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004104:	2202      	movs	r2, #2
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	fa93 f2a3 	rbit	r2, r3
 8004116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800411e:	601a      	str	r2, [r3, #0]
  return result;
 8004120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004124:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004128:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f043 0302 	orr.w	r3, r3, #2
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d102      	bne.n	8004144 <HAL_RCC_OscConfig+0xa4c>
 800413e:	4b84      	ldr	r3, [pc, #528]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	e013      	b.n	800416c <HAL_RCC_OscConfig+0xa74>
 8004144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004148:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800414c:	2202      	movs	r2, #2
 800414e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004154:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	fa93 f2a3 	rbit	r2, r3
 800415e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004162:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	4b79      	ldr	r3, [pc, #484]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004170:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004174:	2102      	movs	r1, #2
 8004176:	6011      	str	r1, [r2, #0]
 8004178:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800417c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	fa92 f1a2 	rbit	r1, r2
 8004186:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800418a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800418e:	6011      	str	r1, [r2, #0]
  return result;
 8004190:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004194:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	fab2 f282 	clz	r2, r2
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	f002 021f 	and.w	r2, r2, #31
 80041aa:	2101      	movs	r1, #1
 80041ac:	fa01 f202 	lsl.w	r2, r1, r2
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d084      	beq.n	80040c0 <HAL_RCC_OscConfig+0x9c8>
 80041b6:	e07f      	b.n	80042b8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b8:	f7fc fce4 	bl	8000b84 <HAL_GetTick>
 80041bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c0:	e00b      	b.n	80041da <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fc fcdf 	bl	8000b84 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e2c4      	b.n	8004764 <HAL_RCC_OscConfig+0x106c>
 80041da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041de:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80041e2:	2202      	movs	r2, #2
 80041e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	fa93 f2a3 	rbit	r2, r3
 80041f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004202:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004206:	2202      	movs	r2, #2
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	fa93 f2a3 	rbit	r2, r3
 8004218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004220:	601a      	str	r2, [r3, #0]
  return result;
 8004222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004226:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800422a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800422c:	fab3 f383 	clz	r3, r3
 8004230:	b2db      	uxtb	r3, r3
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f043 0302 	orr.w	r3, r3, #2
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d102      	bne.n	8004246 <HAL_RCC_OscConfig+0xb4e>
 8004240:	4b43      	ldr	r3, [pc, #268]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	e013      	b.n	800426e <HAL_RCC_OscConfig+0xb76>
 8004246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800424e:	2202      	movs	r2, #2
 8004250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004256:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	fa93 f2a3 	rbit	r2, r3
 8004260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004264:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	4b39      	ldr	r3, [pc, #228]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004272:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004276:	2102      	movs	r1, #2
 8004278:	6011      	str	r1, [r2, #0]
 800427a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800427e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	fa92 f1a2 	rbit	r1, r2
 8004288:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800428c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004290:	6011      	str	r1, [r2, #0]
  return result;
 8004292:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004296:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	fab2 f282 	clz	r2, r2
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	f002 021f 	and.w	r2, r2, #31
 80042ac:	2101      	movs	r1, #1
 80042ae:	fa01 f202 	lsl.w	r2, r1, r2
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d184      	bne.n	80041c2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c0:	4b23      	ldr	r3, [pc, #140]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	4a22      	ldr	r2, [pc, #136]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 80042c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8242 	beq.w	8004762 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042de:	4b1c      	ldr	r3, [pc, #112]	; (8004350 <HAL_RCC_OscConfig+0xc58>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	f000 8213 	beq.w	8004712 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	f040 8162 	bne.w	80045c2 <HAL_RCC_OscConfig+0xeca>
 80042fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004302:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004306:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800430a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004310:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	fa93 f2a3 	rbit	r2, r3
 800431a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004322:	601a      	str	r2, [r3, #0]
  return result;
 8004324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004328:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800432c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004338:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	461a      	mov	r2, r3
 8004340:	2300      	movs	r3, #0
 8004342:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fc fc1e 	bl	8000b84 <HAL_GetTick>
 8004348:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800434c:	e00c      	b.n	8004368 <HAL_RCC_OscConfig+0xc70>
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004354:	f7fc fc16 	bl	8000b84 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e1fd      	b.n	8004764 <HAL_RCC_OscConfig+0x106c>
 8004368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004370:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	fa93 f2a3 	rbit	r2, r3
 8004384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004388:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800438c:	601a      	str	r2, [r3, #0]
  return result;
 800438e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004392:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004396:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004398:	fab3 f383 	clz	r3, r3
 800439c:	b2db      	uxtb	r3, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d102      	bne.n	80043b2 <HAL_RCC_OscConfig+0xcba>
 80043ac:	4bb0      	ldr	r3, [pc, #704]	; (8004670 <HAL_RCC_OscConfig+0xf78>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	e027      	b.n	8004402 <HAL_RCC_OscConfig+0xd0a>
 80043b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80043ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	fa93 f2a3 	rbit	r2, r3
 80043ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043dc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80043e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	fa93 f2a3 	rbit	r2, r3
 80043f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	4b9c      	ldr	r3, [pc, #624]	; (8004670 <HAL_RCC_OscConfig+0xf78>)
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004406:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800440a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800440e:	6011      	str	r1, [r2, #0]
 8004410:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004414:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	fa92 f1a2 	rbit	r1, r2
 800441e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004422:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004426:	6011      	str	r1, [r2, #0]
  return result;
 8004428:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800442c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	fab2 f282 	clz	r2, r2
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	f042 0220 	orr.w	r2, r2, #32
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	f002 021f 	and.w	r2, r2, #31
 8004442:	2101      	movs	r1, #1
 8004444:	fa01 f202 	lsl.w	r2, r1, r2
 8004448:	4013      	ands	r3, r2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d182      	bne.n	8004354 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800444e:	4b88      	ldr	r3, [pc, #544]	; (8004670 <HAL_RCC_OscConfig+0xf78>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004466:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	430b      	orrs	r3, r1
 8004470:	497f      	ldr	r1, [pc, #508]	; (8004670 <HAL_RCC_OscConfig+0xf78>)
 8004472:	4313      	orrs	r3, r2
 8004474:	604b      	str	r3, [r1, #4]
 8004476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800447e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004488:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	fa93 f2a3 	rbit	r2, r3
 8004492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004496:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800449a:	601a      	str	r2, [r3, #0]
  return result;
 800449c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80044a4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a6:	fab3 f383 	clz	r3, r3
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	461a      	mov	r2, r3
 80044b8:	2301      	movs	r3, #1
 80044ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fc fb62 	bl	8000b84 <HAL_GetTick>
 80044c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044c4:	e009      	b.n	80044da <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fc fb5d 	bl	8000b84 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e144      	b.n	8004764 <HAL_RCC_OscConfig+0x106c>
 80044da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044de:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80044e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	fa93 f2a3 	rbit	r2, r3
 80044f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80044fe:	601a      	str	r2, [r3, #0]
  return result;
 8004500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004504:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004508:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800450a:	fab3 f383 	clz	r3, r3
 800450e:	b2db      	uxtb	r3, r3
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	d102      	bne.n	8004524 <HAL_RCC_OscConfig+0xe2c>
 800451e:	4b54      	ldr	r3, [pc, #336]	; (8004670 <HAL_RCC_OscConfig+0xf78>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	e027      	b.n	8004574 <HAL_RCC_OscConfig+0xe7c>
 8004524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004528:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800452c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004536:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	fa93 f2a3 	rbit	r2, r3
 8004540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004544:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800455c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	fa93 f2a3 	rbit	r2, r3
 8004566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	4b3f      	ldr	r3, [pc, #252]	; (8004670 <HAL_RCC_OscConfig+0xf78>)
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004578:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800457c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004580:	6011      	str	r1, [r2, #0]
 8004582:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004586:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	fa92 f1a2 	rbit	r1, r2
 8004590:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004594:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004598:	6011      	str	r1, [r2, #0]
  return result;
 800459a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800459e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	fab2 f282 	clz	r2, r2
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	f042 0220 	orr.w	r2, r2, #32
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	f002 021f 	and.w	r2, r2, #31
 80045b4:	2101      	movs	r1, #1
 80045b6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d082      	beq.n	80044c6 <HAL_RCC_OscConfig+0xdce>
 80045c0:	e0cf      	b.n	8004762 <HAL_RCC_OscConfig+0x106a>
 80045c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80045ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	fa93 f2a3 	rbit	r2, r3
 80045de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80045e6:	601a      	str	r2, [r3, #0]
  return result;
 80045e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ec:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80045f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f2:	fab3 f383 	clz	r3, r3
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	461a      	mov	r2, r3
 8004604:	2300      	movs	r3, #0
 8004606:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fc fabc 	bl	8000b84 <HAL_GetTick>
 800460c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004610:	e009      	b.n	8004626 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004612:	f7fc fab7 	bl	8000b84 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e09e      	b.n	8004764 <HAL_RCC_OscConfig+0x106c>
 8004626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800462e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004638:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	fa93 f2a3 	rbit	r2, r3
 8004642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004646:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800464a:	601a      	str	r2, [r3, #0]
  return result;
 800464c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004650:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004654:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004656:	fab3 f383 	clz	r3, r3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	d104      	bne.n	8004674 <HAL_RCC_OscConfig+0xf7c>
 800466a:	4b01      	ldr	r3, [pc, #4]	; (8004670 <HAL_RCC_OscConfig+0xf78>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	e029      	b.n	80046c4 <HAL_RCC_OscConfig+0xfcc>
 8004670:	40021000 	.word	0x40021000
 8004674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004678:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800467c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004686:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	fa93 f2a3 	rbit	r2, r3
 8004690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004694:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80046a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ac:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	fa93 f2a3 	rbit	r2, r3
 80046b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <HAL_RCC_OscConfig+0x1078>)
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046c8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80046cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046d0:	6011      	str	r1, [r2, #0]
 80046d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046d6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	fa92 f1a2 	rbit	r1, r2
 80046e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046e4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80046e8:	6011      	str	r1, [r2, #0]
  return result;
 80046ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046ee:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	fab2 f282 	clz	r2, r2
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	f042 0220 	orr.w	r2, r2, #32
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	f002 021f 	and.w	r2, r2, #31
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f202 	lsl.w	r2, r1, r2
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d180      	bne.n	8004612 <HAL_RCC_OscConfig+0xf1a>
 8004710:	e027      	b.n	8004762 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e01e      	b.n	8004764 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004726:	4b12      	ldr	r3, [pc, #72]	; (8004770 <HAL_RCC_OscConfig+0x1078>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800472e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004732:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	429a      	cmp	r2, r3
 8004744:	d10b      	bne.n	800475e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004746:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800474a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800474e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800475a:	429a      	cmp	r2, r3
 800475c:	d001      	beq.n	8004762 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000

08004774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b09e      	sub	sp, #120	; 0x78
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e162      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800478c:	4b90      	ldr	r3, [pc, #576]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d910      	bls.n	80047bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479a:	4b8d      	ldr	r3, [pc, #564]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f023 0207 	bic.w	r2, r3, #7
 80047a2:	498b      	ldr	r1, [pc, #556]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047aa:	4b89      	ldr	r3, [pc, #548]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e14a      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c8:	4b82      	ldr	r3, [pc, #520]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	497f      	ldr	r1, [pc, #508]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80dc 	beq.w	80049a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d13c      	bne.n	800486a <HAL_RCC_ClockConfig+0xf6>
 80047f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80047fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004800:	fab3 f383 	clz	r3, r3
 8004804:	b2db      	uxtb	r3, r3
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	b2db      	uxtb	r3, r3
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d102      	bne.n	800481a <HAL_RCC_ClockConfig+0xa6>
 8004814:	4b6f      	ldr	r3, [pc, #444]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	e00f      	b.n	800483a <HAL_RCC_ClockConfig+0xc6>
 800481a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800481e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004822:	fa93 f3a3 	rbit	r3, r3
 8004826:	667b      	str	r3, [r7, #100]	; 0x64
 8004828:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800482c:	663b      	str	r3, [r7, #96]	; 0x60
 800482e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004830:	fa93 f3a3 	rbit	r3, r3
 8004834:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004836:	4b67      	ldr	r3, [pc, #412]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800483e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004842:	fa92 f2a2 	rbit	r2, r2
 8004846:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004848:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800484a:	fab2 f282 	clz	r2, r2
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	f042 0220 	orr.w	r2, r2, #32
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	f002 021f 	and.w	r2, r2, #31
 800485a:	2101      	movs	r1, #1
 800485c:	fa01 f202 	lsl.w	r2, r1, r2
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d17b      	bne.n	800495e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e0f3      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d13c      	bne.n	80048ec <HAL_RCC_ClockConfig+0x178>
 8004872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004876:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800487a:	fa93 f3a3 	rbit	r3, r3
 800487e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004882:	fab3 f383 	clz	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	d102      	bne.n	800489c <HAL_RCC_ClockConfig+0x128>
 8004896:	4b4f      	ldr	r3, [pc, #316]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	e00f      	b.n	80048bc <HAL_RCC_ClockConfig+0x148>
 800489c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a4:	fa93 f3a3 	rbit	r3, r3
 80048a8:	647b      	str	r3, [r7, #68]	; 0x44
 80048aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048ae:	643b      	str	r3, [r7, #64]	; 0x40
 80048b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b8:	4b46      	ldr	r3, [pc, #280]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80048c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048c4:	fa92 f2a2 	rbit	r2, r2
 80048c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80048ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048cc:	fab2 f282 	clz	r2, r2
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	f042 0220 	orr.w	r2, r2, #32
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	f002 021f 	and.w	r2, r2, #31
 80048dc:	2101      	movs	r1, #1
 80048de:	fa01 f202 	lsl.w	r2, r1, r2
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d13a      	bne.n	800495e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0b2      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
 80048ec:	2302      	movs	r3, #2
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fa:	fab3 f383 	clz	r3, r3
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b01      	cmp	r3, #1
 800490c:	d102      	bne.n	8004914 <HAL_RCC_ClockConfig+0x1a0>
 800490e:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	e00d      	b.n	8004930 <HAL_RCC_ClockConfig+0x1bc>
 8004914:	2302      	movs	r3, #2
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
 8004920:	2302      	movs	r3, #2
 8004922:	623b      	str	r3, [r7, #32]
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	fa93 f3a3 	rbit	r3, r3
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	4b29      	ldr	r3, [pc, #164]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2202      	movs	r2, #2
 8004932:	61ba      	str	r2, [r7, #24]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	fa92 f2a2 	rbit	r2, r2
 800493a:	617a      	str	r2, [r7, #20]
  return result;
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	fab2 f282 	clz	r2, r2
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	f042 0220 	orr.w	r2, r2, #32
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	f002 021f 	and.w	r2, r2, #31
 800494e:	2101      	movs	r1, #1
 8004950:	fa01 f202 	lsl.w	r2, r1, r2
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e079      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800495e:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f023 0203 	bic.w	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	491a      	ldr	r1, [pc, #104]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 800496c:	4313      	orrs	r3, r2
 800496e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004970:	f7fc f908 	bl	8000b84 <HAL_GetTick>
 8004974:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004976:	e00a      	b.n	800498e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004978:	f7fc f904 	bl	8000b84 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	; 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e061      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 020c 	and.w	r2, r3, #12
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	429a      	cmp	r2, r3
 800499e:	d1eb      	bne.n	8004978 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d214      	bcs.n	80049d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 0207 	bic.w	r2, r3, #7
 80049b6:	4906      	ldr	r1, [pc, #24]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d005      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e040      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
 80049d0:	40022000 	.word	0x40022000
 80049d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e4:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <HAL_RCC_ClockConfig+0x2e8>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	491a      	ldr	r1, [pc, #104]	; (8004a5c <HAL_RCC_ClockConfig+0x2e8>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d009      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a02:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <HAL_RCC_ClockConfig+0x2e8>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4912      	ldr	r1, [pc, #72]	; (8004a5c <HAL_RCC_ClockConfig+0x2e8>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a16:	f000 f829 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <HAL_RCC_ClockConfig+0x2e8>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a24:	22f0      	movs	r2, #240	; 0xf0
 8004a26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	fa92 f2a2 	rbit	r2, r2
 8004a2e:	60fa      	str	r2, [r7, #12]
  return result;
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	fab2 f282 	clz	r2, r2
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	40d3      	lsrs	r3, r2
 8004a3a:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <HAL_RCC_ClockConfig+0x2ec>)
 8004a3c:	5cd3      	ldrb	r3, [r2, r3]
 8004a3e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a42:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <HAL_RCC_ClockConfig+0x2f0>)
 8004a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004a46:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <HAL_RCC_ClockConfig+0x2f4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fc f856 	bl	8000afc <HAL_InitTick>
  
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3778      	adds	r7, #120	; 0x78
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	080096dc 	.word	0x080096dc
 8004a64:	20000000 	.word	0x20000000
 8004a68:	20000004 	.word	0x20000004

08004a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b08b      	sub	sp, #44	; 0x2c
 8004a70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004a86:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d002      	beq.n	8004a9c <HAL_RCC_GetSysClockFreq+0x30>
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d003      	beq.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x36>
 8004a9a:	e03c      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a9c:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a9e:	623b      	str	r3, [r7, #32]
      break;
 8004aa0:	e03c      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004aa8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004aac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	fa92 f2a2 	rbit	r2, r2
 8004ab4:	607a      	str	r2, [r7, #4]
  return result;
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	fab2 f282 	clz	r2, r2
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	40d3      	lsrs	r3, r2
 8004ac0:	4a1c      	ldr	r2, [pc, #112]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ac2:	5cd3      	ldrb	r3, [r2, r3]
 8004ac4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004ac6:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	220f      	movs	r2, #15
 8004ad0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	fa92 f2a2 	rbit	r2, r2
 8004ad8:	60fa      	str	r2, [r7, #12]
  return result;
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	fab2 f282 	clz	r2, r2
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	40d3      	lsrs	r3, r2
 8004ae4:	4a14      	ldr	r2, [pc, #80]	; (8004b38 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ae6:	5cd3      	ldrb	r3, [r2, r3]
 8004ae8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004af4:	4a0e      	ldr	r2, [pc, #56]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
 8004b04:	e004      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	623b      	str	r3, [r7, #32]
      break;
 8004b14:	e002      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b16:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b18:	623b      	str	r3, [r7, #32]
      break;
 8004b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	372c      	adds	r7, #44	; 0x2c
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	016e3600 	.word	0x016e3600
 8004b34:	080096ec 	.word	0x080096ec
 8004b38:	080096fc 	.word	0x080096fc
 8004b3c:	003d0900 	.word	0x003d0900
 8004b40:	007a1200 	.word	0x007a1200

08004b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b092      	sub	sp, #72	; 0x48
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 80d4 	beq.w	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b68:	4b4e      	ldr	r3, [pc, #312]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10e      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b74:	4b4b      	ldr	r3, [pc, #300]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	4a4a      	ldr	r2, [pc, #296]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	61d3      	str	r3, [r2, #28]
 8004b80:	4b48      	ldr	r3, [pc, #288]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b92:	4b45      	ldr	r3, [pc, #276]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d118      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b9e:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a41      	ldr	r2, [pc, #260]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004baa:	f7fb ffeb 	bl	8000b84 <HAL_GetTick>
 8004bae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb2:	f7fb ffe7 	bl	8000b84 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b64      	cmp	r3, #100	; 0x64
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e169      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc4:	4b38      	ldr	r3, [pc, #224]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bd0:	4b34      	ldr	r3, [pc, #208]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 8084 	beq.w	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d07c      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bf0:	4b2c      	ldr	r3, [pc, #176]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	fa93 f3a3 	rbit	r3, r3
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c0a:	fab3 f383 	clz	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	4b26      	ldr	r3, [pc, #152]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c26:	fa93 f3a3 	rbit	r3, r3
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c2e:	fab3 f383 	clz	r3, r3
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c42:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c46:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d04b      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c52:	f7fb ff97 	bl	8000b84 <HAL_GetTick>
 8004c56:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c58:	e00a      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c5a:	f7fb ff93 	bl	8000b84 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e113      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004c70:	2302      	movs	r3, #2
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	fa93 f3a3 	rbit	r3, r3
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	fa93 f3a3 	rbit	r3, r3
 8004c86:	61fb      	str	r3, [r7, #28]
  return result;
 8004c88:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8a:	fab3 f383 	clz	r3, r3
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f043 0302 	orr.w	r3, r3, #2
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d108      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c9e:	4b01      	ldr	r3, [pc, #4]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	e00d      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40007000 	.word	0x40007000
 8004cac:	10908100 	.word	0x10908100
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	fa93 f3a3 	rbit	r3, r3
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	4b78      	ldr	r3, [pc, #480]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	613a      	str	r2, [r7, #16]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	fa92 f2a2 	rbit	r2, r2
 8004cca:	60fa      	str	r2, [r7, #12]
  return result;
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	fab2 f282 	clz	r2, r2
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	f002 021f 	and.w	r2, r2, #31
 8004cde:	2101      	movs	r1, #1
 8004ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0b7      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004cea:	4b6d      	ldr	r3, [pc, #436]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	496a      	ldr	r1, [pc, #424]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d105      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d04:	4b66      	ldr	r3, [pc, #408]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	4a65      	ldr	r2, [pc, #404]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d1c:	4b60      	ldr	r3, [pc, #384]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	f023 0203 	bic.w	r2, r3, #3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	495d      	ldr	r1, [pc, #372]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d008      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d3a:	4b59      	ldr	r3, [pc, #356]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	4956      	ldr	r1, [pc, #344]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d008      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d58:	4b51      	ldr	r3, [pc, #324]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	494e      	ldr	r1, [pc, #312]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d008      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d76:	4b4a      	ldr	r3, [pc, #296]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	f023 0210 	bic.w	r2, r3, #16
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	4947      	ldr	r1, [pc, #284]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004d94:	4b42      	ldr	r3, [pc, #264]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	493f      	ldr	r1, [pc, #252]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004db2:	4b3b      	ldr	r3, [pc, #236]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	f023 0220 	bic.w	r2, r3, #32
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	4938      	ldr	r1, [pc, #224]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dd0:	4b33      	ldr	r3, [pc, #204]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	4930      	ldr	r1, [pc, #192]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dee:	4b2c      	ldr	r3, [pc, #176]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	4929      	ldr	r1, [pc, #164]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e0c:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	4921      	ldr	r1, [pc, #132]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e2a:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	491a      	ldr	r1, [pc, #104]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004e48:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	4912      	ldr	r1, [pc, #72]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e66:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	490b      	ldr	r1, [pc, #44]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e90:	4903      	ldr	r1, [pc, #12]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3748      	adds	r7, #72	; 0x48
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40021000 	.word	0x40021000

08004ea4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004eb4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004eb8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004eda:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ede:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f08:	b084      	sub	sp, #16
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	f107 0014 	add.w	r0, r7, #20
 8004f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	b004      	add	sp, #16
 8004f48:	4770      	bx	lr
	...

08004f4c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b09d      	sub	sp, #116	; 0x74
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f72:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	78db      	ldrb	r3, [r3, #3]
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d81f      	bhi.n	8004fbe <USB_ActivateEndpoint+0x72>
 8004f7e:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <USB_ActivateEndpoint+0x38>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004fb1 	.word	0x08004fb1
 8004f8c:	08004fc7 	.word	0x08004fc7
 8004f90:	08004fa3 	.word	0x08004fa3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004f94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004fa0:	e012      	b.n	8004fc8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004fa2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fa6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004faa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004fae:	e00b      	b.n	8004fc8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004fb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004fbc:	e004      	b.n	8004fc8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004fc4:	e000      	b.n	8004fc8 <USB_ActivateEndpoint+0x7c>
      break;
 8004fc6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	441a      	add	r2, r3
 8004fd2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	b21b      	sxth	r3, r3
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	b21a      	sxth	r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	b21b      	sxth	r3, r3
 800500a:	4313      	orrs	r3, r2
 800500c:	b21b      	sxth	r3, r3
 800500e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	441a      	add	r2, r3
 800501c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005030:	b29b      	uxth	r3, r3
 8005032:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	7b1b      	ldrb	r3, [r3, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	f040 8178 	bne.w	800532e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	785b      	ldrb	r3, [r3, #1]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8084 	beq.w	8005150 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005052:	b29b      	uxth	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	4413      	add	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	011a      	lsls	r2, r3, #4
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	88db      	ldrh	r3, [r3, #6]
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	b29b      	uxth	r3, r3
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	827b      	strh	r3, [r7, #18]
 800508a:	8a7b      	ldrh	r3, [r7, #18]
 800508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01b      	beq.n	80050cc <USB_ActivateEndpoint+0x180>
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	823b      	strh	r3, [r7, #16]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	441a      	add	r2, r3
 80050b6:	8a3b      	ldrh	r3, [r7, #16]
 80050b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	78db      	ldrb	r3, [r3, #3]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d020      	beq.n	8005116 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ea:	81bb      	strh	r3, [r7, #12]
 80050ec:	89bb      	ldrh	r3, [r7, #12]
 80050ee:	f083 0320 	eor.w	r3, r3, #32
 80050f2:	81bb      	strh	r3, [r7, #12]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	441a      	add	r2, r3
 80050fe:	89bb      	ldrh	r3, [r7, #12]
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]
 8005114:	e2d5      	b.n	80056c2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512c:	81fb      	strh	r3, [r7, #14]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	441a      	add	r2, r3
 8005138:	89fb      	ldrh	r3, [r7, #14]
 800513a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800514a:	b29b      	uxth	r3, r3
 800514c:	8013      	strh	r3, [r2, #0]
 800514e:	e2b8      	b.n	80056c2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	633b      	str	r3, [r7, #48]	; 0x30
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800515a:	b29b      	uxth	r3, r3
 800515c:	461a      	mov	r2, r3
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	4413      	add	r3, r2
 8005162:	633b      	str	r3, [r7, #48]	; 0x30
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	011a      	lsls	r2, r3, #4
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	4413      	add	r3, r2
 800516e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	88db      	ldrh	r3, [r3, #6]
 8005178:	085b      	lsrs	r3, r3, #1
 800517a:	b29b      	uxth	r3, r3
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518e:	b29b      	uxth	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	4413      	add	r3, r2
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	011a      	lsls	r2, r3, #4
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	4413      	add	r3, r2
 80051a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	2b3e      	cmp	r3, #62	; 0x3e
 80051be:	d91d      	bls.n	80051fc <USB_ActivateEndpoint+0x2b0>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	f003 031f 	and.w	r3, r3, #31
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d102      	bne.n	80051da <USB_ActivateEndpoint+0x28e>
 80051d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051d6:	3b01      	subs	r3, #1
 80051d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29a      	uxth	r2, r3
 80051e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	029b      	lsls	r3, r3, #10
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	4313      	orrs	r3, r2
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	801a      	strh	r2, [r3, #0]
 80051fa:	e026      	b.n	800524a <USB_ActivateEndpoint+0x2fe>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <USB_ActivateEndpoint+0x2ce>
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005212:	b29a      	uxth	r2, r3
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	801a      	strh	r2, [r3, #0]
 8005218:	e017      	b.n	800524a <USB_ActivateEndpoint+0x2fe>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	66bb      	str	r3, [r7, #104]	; 0x68
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <USB_ActivateEndpoint+0x2e8>
 800522e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005230:	3301      	adds	r3, #1
 8005232:	66bb      	str	r3, [r7, #104]	; 0x68
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29a      	uxth	r2, r3
 800523a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800523c:	b29b      	uxth	r3, r3
 800523e:	029b      	lsls	r3, r3, #10
 8005240:	b29b      	uxth	r3, r3
 8005242:	4313      	orrs	r3, r2
 8005244:	b29a      	uxth	r2, r3
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	847b      	strh	r3, [r7, #34]	; 0x22
 8005258:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800525a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01b      	beq.n	800529a <USB_ActivateEndpoint+0x34e>
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005278:	843b      	strh	r3, [r7, #32]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	441a      	add	r2, r3
 8005284:	8c3b      	ldrh	r3, [r7, #32]
 8005286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800528a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800528e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005296:	b29b      	uxth	r3, r3
 8005298:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d124      	bne.n	80052ec <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b8:	83bb      	strh	r3, [r7, #28]
 80052ba:	8bbb      	ldrh	r3, [r7, #28]
 80052bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052c0:	83bb      	strh	r3, [r7, #28]
 80052c2:	8bbb      	ldrh	r3, [r7, #28]
 80052c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052c8:	83bb      	strh	r3, [r7, #28]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	441a      	add	r2, r3
 80052d4:	8bbb      	ldrh	r3, [r7, #28]
 80052d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	8013      	strh	r3, [r2, #0]
 80052ea:	e1ea      	b.n	80056c2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	83fb      	strh	r3, [r7, #30]
 8005304:	8bfb      	ldrh	r3, [r7, #30]
 8005306:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800530a:	83fb      	strh	r3, [r7, #30]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	441a      	add	r2, r3
 8005316:	8bfb      	ldrh	r3, [r7, #30]
 8005318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800531c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005328:	b29b      	uxth	r3, r3
 800532a:	8013      	strh	r3, [r2, #0]
 800532c:	e1c9      	b.n	80056c2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	78db      	ldrb	r3, [r3, #3]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d11e      	bne.n	8005374 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800535e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005366:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800536a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536e:	b29b      	uxth	r3, r3
 8005370:	8013      	strh	r3, [r2, #0]
 8005372:	e01d      	b.n	80053b0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	441a      	add	r2, r3
 8005398:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800539c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c0:	4413      	add	r3, r2
 80053c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	011a      	lsls	r2, r3, #4
 80053ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	891b      	ldrh	r3, [r3, #8]
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	b29b      	uxth	r3, r3
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053e2:	801a      	strh	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	657b      	str	r3, [r7, #84]	; 0x54
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053f4:	4413      	add	r3, r2
 80053f6:	657b      	str	r3, [r7, #84]	; 0x54
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	011a      	lsls	r2, r3, #4
 80053fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005400:	4413      	add	r3, r2
 8005402:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005406:	653b      	str	r3, [r7, #80]	; 0x50
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	895b      	ldrh	r3, [r3, #10]
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	b29b      	uxth	r3, r3
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005416:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	785b      	ldrb	r3, [r3, #1]
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 8093 	bne.w	8005548 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005432:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01b      	beq.n	8005476 <USB_ActivateEndpoint+0x52a>
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005454:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	441a      	add	r2, r3
 8005460:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800546e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005472:	b29b      	uxth	r3, r3
 8005474:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005484:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01b      	beq.n	80054c6 <USB_ActivateEndpoint+0x57a>
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	441a      	add	r2, r3
 80054b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80054b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80054de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054e4:	873b      	strh	r3, [r7, #56]	; 0x38
 80054e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054ec:	873b      	strh	r3, [r7, #56]	; 0x38
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	441a      	add	r2, r3
 80054f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550a:	b29b      	uxth	r3, r3
 800550c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005524:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	441a      	add	r2, r3
 8005530:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005542:	b29b      	uxth	r3, r3
 8005544:	8013      	strh	r3, [r2, #0]
 8005546:	e0bc      	b.n	80056c2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005558:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800555c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01d      	beq.n	80055a0 <USB_ActivateEndpoint+0x654>
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	441a      	add	r2, r3
 8005588:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800558c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559c:	b29b      	uxth	r3, r3
 800559e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80055b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01d      	beq.n	80055f8 <USB_ActivateEndpoint+0x6ac>
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	441a      	add	r2, r3
 80055e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	78db      	ldrb	r3, [r3, #3]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d024      	beq.n	800564a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005616:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800561a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800561e:	f083 0320 	eor.w	r3, r3, #32
 8005622:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	441a      	add	r2, r3
 8005630:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005644:	b29b      	uxth	r3, r3
 8005646:	8013      	strh	r3, [r2, #0]
 8005648:	e01d      	b.n	8005686 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005660:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	441a      	add	r2, r3
 800566e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800567a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005682:	b29b      	uxth	r3, r3
 8005684:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80056ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056be:	b29b      	uxth	r3, r3
 80056c0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80056c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3774      	adds	r7, #116	; 0x74
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop

080056d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b08d      	sub	sp, #52	; 0x34
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	7b1b      	ldrb	r3, [r3, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 808e 	bne.w	8005804 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d044      	beq.n	800577a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	81bb      	strh	r3, [r7, #12]
 80056fe:	89bb      	ldrh	r3, [r7, #12]
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01b      	beq.n	8005740 <USB_DeactivateEndpoint+0x6c>
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	817b      	strh	r3, [r7, #10]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	441a      	add	r2, r3
 800572a:	897b      	ldrh	r3, [r7, #10]
 800572c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800573c:	b29b      	uxth	r3, r3
 800573e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005756:	813b      	strh	r3, [r7, #8]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	441a      	add	r2, r3
 8005762:	893b      	ldrh	r3, [r7, #8]
 8005764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800576c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005774:	b29b      	uxth	r3, r3
 8005776:	8013      	strh	r3, [r2, #0]
 8005778:	e192      	b.n	8005aa0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	827b      	strh	r3, [r7, #18]
 8005788:	8a7b      	ldrh	r3, [r7, #18]
 800578a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d01b      	beq.n	80057ca <USB_DeactivateEndpoint+0xf6>
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a8:	823b      	strh	r3, [r7, #16]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	441a      	add	r2, r3
 80057b4:	8a3b      	ldrh	r3, [r7, #16]
 80057b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e0:	81fb      	strh	r3, [r7, #14]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	441a      	add	r2, r3
 80057ec:	89fb      	ldrh	r3, [r7, #14]
 80057ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]
 8005802:	e14d      	b.n	8005aa0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f040 80a5 	bne.w	8005958 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	843b      	strh	r3, [r7, #32]
 800581c:	8c3b      	ldrh	r3, [r7, #32]
 800581e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d01b      	beq.n	800585e <USB_DeactivateEndpoint+0x18a>
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583c:	83fb      	strh	r3, [r7, #30]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	441a      	add	r2, r3
 8005848:	8bfb      	ldrh	r3, [r7, #30]
 800584a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800584e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585a:	b29b      	uxth	r3, r3
 800585c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	83bb      	strh	r3, [r7, #28]
 800586c:	8bbb      	ldrh	r3, [r7, #28]
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01b      	beq.n	80058ae <USB_DeactivateEndpoint+0x1da>
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588c:	837b      	strh	r3, [r7, #26]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	441a      	add	r2, r3
 8005898:	8b7b      	ldrh	r3, [r7, #26]
 800589a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c4:	833b      	strh	r3, [r7, #24]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	441a      	add	r2, r3
 80058d0:	8b3b      	ldrh	r3, [r7, #24]
 80058d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fc:	82fb      	strh	r3, [r7, #22]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	441a      	add	r2, r3
 8005908:	8afb      	ldrh	r3, [r7, #22]
 800590a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800590e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591a:	b29b      	uxth	r3, r3
 800591c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005934:	82bb      	strh	r3, [r7, #20]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	441a      	add	r2, r3
 8005940:	8abb      	ldrh	r3, [r7, #20]
 8005942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005952:	b29b      	uxth	r3, r3
 8005954:	8013      	strh	r3, [r2, #0]
 8005956:	e0a3      	b.n	8005aa0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005966:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01b      	beq.n	80059a8 <USB_DeactivateEndpoint+0x2d4>
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005986:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	441a      	add	r2, r3
 8005992:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80059b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01b      	beq.n	80059f8 <USB_DeactivateEndpoint+0x324>
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80059e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	441a      	add	r2, r3
 8005a8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3734      	adds	r7, #52	; 0x34
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b0c2      	sub	sp, #264	; 0x108
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005abc:	6018      	str	r0, [r3, #0]
 8005abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	f040 86b7 	bne.w	8006848 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d908      	bls.n	8005b08 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b06:	e007      	b.n	8005b18 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	7b1b      	ldrb	r3, [r3, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d13a      	bne.n	8005b9e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6959      	ldr	r1, [r3, #20]
 8005b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	88da      	ldrh	r2, [r3, #6]
 8005b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b4e:	6800      	ldr	r0, [r0, #0]
 8005b50:	f001 fc8c 	bl	800746c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	613b      	str	r3, [r7, #16]
 8005b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	4413      	add	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
 8005b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	011a      	lsls	r2, r3, #4
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	801a      	strh	r2, [r3, #0]
 8005b9a:	f000 be1f 	b.w	80067dc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	78db      	ldrb	r3, [r3, #3]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	f040 8462 	bne.w	8006474 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a1a      	ldr	r2, [r3, #32]
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	f240 83df 	bls.w	800638c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	441a      	add	r2, r3
 8005c12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6a1a      	ldr	r2, [r3, #32]
 8005c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3a:	1ad2      	subs	r2, r2, r3
 8005c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 81c7 	beq.w	8005ffe <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d177      	bne.n	8005d7c <USB_EPStartXfer+0x2ce>
 8005c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	4413      	add	r3, r2
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	011a      	lsls	r2, r3, #4
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8005cde:	d921      	bls.n	8005d24 <USB_EPStartXfer+0x276>
 8005ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce4:	095b      	lsrs	r3, r3, #5
 8005ce6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cee:	f003 031f 	and.w	r3, r3, #31
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d104      	bne.n	8005d00 <USB_EPStartXfer+0x252>
 8005cf6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	029b      	lsls	r3, r3, #10
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	4313      	orrs	r3, r2
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	e050      	b.n	8005dc6 <USB_EPStartXfer+0x318>
 8005d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <USB_EPStartXfer+0x294>
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	801a      	strh	r2, [r3, #0]
 8005d40:	e041      	b.n	8005dc6 <USB_EPStartXfer+0x318>
 8005d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d46:	085b      	lsrs	r3, r3, #1
 8005d48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d004      	beq.n	8005d62 <USB_EPStartXfer+0x2b4>
 8005d58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	029b      	lsls	r3, r3, #10
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	4313      	orrs	r3, r2
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	e024      	b.n	8005dc6 <USB_EPStartXfer+0x318>
 8005d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d11c      	bne.n	8005dc6 <USB_EPStartXfer+0x318>
 8005d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	4413      	add	r3, r2
 8005da2:	633b      	str	r3, [r7, #48]	; 0x30
 8005da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	011a      	lsls	r2, r3, #4
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	4413      	add	r3, r2
 8005db6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	895b      	ldrh	r3, [r3, #10]
 8005dd2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6959      	ldr	r1, [r3, #20]
 8005de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005dec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005df0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005df4:	6800      	ldr	r0, [r0, #0]
 8005df6:	f001 fb39 	bl	800746c <USB_WritePMA>
            ep->xfer_buff += len;
 8005dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e0a:	441a      	add	r2, r3
 8005e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6a1a      	ldr	r2, [r3, #32]
 8005e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d90f      	bls.n	8005e54 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6a1a      	ldr	r2, [r3, #32]
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e44:	1ad2      	subs	r2, r2, r3
 8005e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	621a      	str	r2, [r3, #32]
 8005e52:	e00e      	b.n	8005e72 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	785b      	ldrb	r3, [r3, #1]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d177      	bne.n	8005f72 <USB_EPStartXfer+0x4c4>
 8005e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	011a      	lsls	r2, r3, #4
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ed4:	d921      	bls.n	8005f1a <USB_EPStartXfer+0x46c>
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee4:	f003 031f 	and.w	r3, r3, #31
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <USB_EPStartXfer+0x448>
 8005eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	029b      	lsls	r3, r3, #10
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4313      	orrs	r3, r2
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	e056      	b.n	8005fc8 <USB_EPStartXfer+0x51a>
 8005f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <USB_EPStartXfer+0x48a>
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	e047      	b.n	8005fc8 <USB_EPStartXfer+0x51a>
 8005f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f3c:	085b      	lsrs	r3, r3, #1
 8005f3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d004      	beq.n	8005f58 <USB_EPStartXfer+0x4aa>
 8005f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f52:	3301      	adds	r3, #1
 8005f54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	029b      	lsls	r3, r3, #10
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	e02a      	b.n	8005fc8 <USB_EPStartXfer+0x51a>
 8005f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d122      	bne.n	8005fc8 <USB_EPStartXfer+0x51a>
 8005f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	623b      	str	r3, [r7, #32]
 8005f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	623b      	str	r3, [r7, #32]
 8005fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	011a      	lsls	r2, r3, #4
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fbc:	61fb      	str	r3, [r7, #28]
 8005fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	891b      	ldrh	r3, [r3, #8]
 8005fd4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6959      	ldr	r1, [r3, #20]
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005fee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ff2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ff6:	6800      	ldr	r0, [r0, #0]
 8005ff8:	f001 fa38 	bl	800746c <USB_WritePMA>
 8005ffc:	e3ee      	b.n	80067dc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d177      	bne.n	80060fe <USB_EPStartXfer+0x650>
 800600e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	64bb      	str	r3, [r7, #72]	; 0x48
 800601a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006028:	b29b      	uxth	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800602e:	4413      	add	r3, r2
 8006030:	64bb      	str	r3, [r7, #72]	; 0x48
 8006032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	011a      	lsls	r2, r3, #4
 8006040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006042:	4413      	add	r3, r2
 8006044:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006048:	647b      	str	r3, [r7, #68]	; 0x44
 800604a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	b29b      	uxth	r3, r3
 8006050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006054:	b29a      	uxth	r2, r3
 8006056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605e:	2b3e      	cmp	r3, #62	; 0x3e
 8006060:	d921      	bls.n	80060a6 <USB_EPStartXfer+0x5f8>
 8006062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	2b00      	cmp	r3, #0
 8006076:	d104      	bne.n	8006082 <USB_EPStartXfer+0x5d4>
 8006078:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800607c:	3b01      	subs	r3, #1
 800607e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29a      	uxth	r2, r3
 8006088:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800608c:	b29b      	uxth	r3, r3
 800608e:	029b      	lsls	r3, r3, #10
 8006090:	b29b      	uxth	r3, r3
 8006092:	4313      	orrs	r3, r2
 8006094:	b29b      	uxth	r3, r3
 8006096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609e:	b29a      	uxth	r2, r3
 80060a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a2:	801a      	strh	r2, [r3, #0]
 80060a4:	e056      	b.n	8006154 <USB_EPStartXfer+0x6a6>
 80060a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <USB_EPStartXfer+0x616>
 80060ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060bc:	b29a      	uxth	r2, r3
 80060be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	e047      	b.n	8006154 <USB_EPStartXfer+0x6a6>
 80060c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80060ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <USB_EPStartXfer+0x636>
 80060da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060de:	3301      	adds	r3, #1
 80060e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80060e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	029b      	lsls	r3, r3, #10
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	4313      	orrs	r3, r2
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e02a      	b.n	8006154 <USB_EPStartXfer+0x6a6>
 80060fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	785b      	ldrb	r3, [r3, #1]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d122      	bne.n	8006154 <USB_EPStartXfer+0x6a6>
 800610e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006112:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	653b      	str	r3, [r7, #80]	; 0x50
 800611a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006128:	b29b      	uxth	r3, r3
 800612a:	461a      	mov	r2, r3
 800612c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800612e:	4413      	add	r3, r2
 8006130:	653b      	str	r3, [r7, #80]	; 0x50
 8006132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	011a      	lsls	r2, r3, #4
 8006140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006142:	4413      	add	r3, r2
 8006144:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006148:	64fb      	str	r3, [r7, #76]	; 0x4c
 800614a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614e:	b29a      	uxth	r2, r3
 8006150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006152:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	891b      	ldrh	r3, [r3, #8]
 8006160:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6959      	ldr	r1, [r3, #20]
 8006170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006174:	b29b      	uxth	r3, r3
 8006176:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800617a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800617e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006182:	6800      	ldr	r0, [r0, #0]
 8006184:	f001 f972 	bl	800746c <USB_WritePMA>
            ep->xfer_buff += len;
 8006188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	695a      	ldr	r2, [r3, #20]
 8006194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006198:	441a      	add	r2, r3
 800619a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80061a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6a1a      	ldr	r2, [r3, #32]
 80061b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d90f      	bls.n	80061e2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80061c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6a1a      	ldr	r2, [r3, #32]
 80061ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d2:	1ad2      	subs	r2, r2, r3
 80061d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	621a      	str	r2, [r3, #32]
 80061e0:	e00e      	b.n	8006200 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80061e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80061f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2200      	movs	r2, #0
 80061fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	643b      	str	r3, [r7, #64]	; 0x40
 800620c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d177      	bne.n	800630c <USB_EPStartXfer+0x85e>
 800621c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006220:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	63bb      	str	r3, [r7, #56]	; 0x38
 8006228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006236:	b29b      	uxth	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	4413      	add	r3, r2
 800623e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	011a      	lsls	r2, r3, #4
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	4413      	add	r3, r2
 8006252:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006256:	637b      	str	r3, [r7, #52]	; 0x34
 8006258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29b      	uxth	r3, r3
 800625e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006262:	b29a      	uxth	r2, r3
 8006264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006266:	801a      	strh	r2, [r3, #0]
 8006268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626c:	2b3e      	cmp	r3, #62	; 0x3e
 800626e:	d921      	bls.n	80062b4 <USB_EPStartXfer+0x806>
 8006270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800627a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	2b00      	cmp	r3, #0
 8006284:	d104      	bne.n	8006290 <USB_EPStartXfer+0x7e2>
 8006286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628a:	3b01      	subs	r3, #1
 800628c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29a      	uxth	r2, r3
 8006296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629a:	b29b      	uxth	r3, r3
 800629c:	029b      	lsls	r3, r3, #10
 800629e:	b29b      	uxth	r3, r3
 80062a0:	4313      	orrs	r3, r2
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	e050      	b.n	8006356 <USB_EPStartXfer+0x8a8>
 80062b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <USB_EPStartXfer+0x824>
 80062bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	e041      	b.n	8006356 <USB_EPStartXfer+0x8a8>
 80062d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d6:	085b      	lsrs	r3, r3, #1
 80062d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <USB_EPStartXfer+0x844>
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	3301      	adds	r3, #1
 80062ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	029b      	lsls	r3, r3, #10
 8006300:	b29b      	uxth	r3, r3
 8006302:	4313      	orrs	r3, r2
 8006304:	b29a      	uxth	r2, r3
 8006306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006308:	801a      	strh	r2, [r3, #0]
 800630a:	e024      	b.n	8006356 <USB_EPStartXfer+0x8a8>
 800630c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	785b      	ldrb	r3, [r3, #1]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d11c      	bne.n	8006356 <USB_EPStartXfer+0x8a8>
 800631c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006320:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632a:	b29b      	uxth	r3, r3
 800632c:	461a      	mov	r2, r3
 800632e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006330:	4413      	add	r3, r2
 8006332:	643b      	str	r3, [r7, #64]	; 0x40
 8006334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	011a      	lsls	r2, r3, #4
 8006342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006344:	4413      	add	r3, r2
 8006346:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006350:	b29a      	uxth	r2, r3
 8006352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006354:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	895b      	ldrh	r3, [r3, #10]
 8006362:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6959      	ldr	r1, [r3, #20]
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006376:	b29b      	uxth	r3, r3
 8006378:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800637c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006380:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006384:	6800      	ldr	r0, [r0, #0]
 8006386:	f001 f871 	bl	800746c <USB_WritePMA>
 800638a:	e227      	b.n	80067dc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800638c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800639c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80063be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80063c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	441a      	add	r2, r3
 80063e0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80063e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006412:	b29b      	uxth	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006418:	4413      	add	r3, r2
 800641a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800641c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	011a      	lsls	r2, r3, #4
 800642a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800642c:	4413      	add	r3, r2
 800642e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006432:	65bb      	str	r3, [r7, #88]	; 0x58
 8006434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006438:	b29a      	uxth	r2, r3
 800643a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800643c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800643e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	891b      	ldrh	r3, [r3, #8]
 800644a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800644e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6959      	ldr	r1, [r3, #20]
 800645a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800645e:	b29b      	uxth	r3, r3
 8006460:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006464:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006468:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800646c:	6800      	ldr	r0, [r0, #0]
 800646e:	f000 fffd 	bl	800746c <USB_WritePMA>
 8006472:	e1b3      	b.n	80067dc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006484:	1ad2      	subs	r2, r2, r3
 8006486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006496:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 80c6 	beq.w	8006646 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	673b      	str	r3, [r7, #112]	; 0x70
 80064c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	785b      	ldrb	r3, [r3, #1]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d177      	bne.n	80065c6 <USB_EPStartXfer+0xb18>
 80064d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80064e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	461a      	mov	r2, r3
 80064f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064f6:	4413      	add	r3, r2
 80064f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80064fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	011a      	lsls	r2, r3, #4
 8006508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800650a:	4413      	add	r3, r2
 800650c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006510:	667b      	str	r3, [r7, #100]	; 0x64
 8006512:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	b29b      	uxth	r3, r3
 8006518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800651c:	b29a      	uxth	r2, r3
 800651e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006520:	801a      	strh	r2, [r3, #0]
 8006522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006526:	2b3e      	cmp	r3, #62	; 0x3e
 8006528:	d921      	bls.n	800656e <USB_EPStartXfer+0xac0>
 800652a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006538:	f003 031f 	and.w	r3, r3, #31
 800653c:	2b00      	cmp	r3, #0
 800653e:	d104      	bne.n	800654a <USB_EPStartXfer+0xa9c>
 8006540:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006544:	3b01      	subs	r3, #1
 8006546:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800654a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29a      	uxth	r2, r3
 8006550:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006554:	b29b      	uxth	r3, r3
 8006556:	029b      	lsls	r3, r3, #10
 8006558:	b29b      	uxth	r3, r3
 800655a:	4313      	orrs	r3, r2
 800655c:	b29b      	uxth	r3, r3
 800655e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006566:	b29a      	uxth	r2, r3
 8006568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	e050      	b.n	8006610 <USB_EPStartXfer+0xb62>
 800656e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <USB_EPStartXfer+0xade>
 8006576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	b29b      	uxth	r3, r3
 800657c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006584:	b29a      	uxth	r2, r3
 8006586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006588:	801a      	strh	r2, [r3, #0]
 800658a:	e041      	b.n	8006610 <USB_EPStartXfer+0xb62>
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006590:	085b      	lsrs	r3, r3, #1
 8006592:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d004      	beq.n	80065ac <USB_EPStartXfer+0xafe>
 80065a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065a6:	3301      	adds	r3, #1
 80065a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	029b      	lsls	r3, r3, #10
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	4313      	orrs	r3, r2
 80065be:	b29a      	uxth	r2, r3
 80065c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065c2:	801a      	strh	r2, [r3, #0]
 80065c4:	e024      	b.n	8006610 <USB_EPStartXfer+0xb62>
 80065c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d11c      	bne.n	8006610 <USB_EPStartXfer+0xb62>
 80065d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065ea:	4413      	add	r3, r2
 80065ec:	673b      	str	r3, [r7, #112]	; 0x70
 80065ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	011a      	lsls	r2, r3, #4
 80065fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065fe:	4413      	add	r3, r2
 8006600:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006604:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800660a:	b29a      	uxth	r2, r3
 800660c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	895b      	ldrh	r3, [r3, #10]
 800661c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6959      	ldr	r1, [r3, #20]
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006630:	b29b      	uxth	r3, r3
 8006632:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006636:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800663a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800663e:	6800      	ldr	r0, [r0, #0]
 8006640:	f000 ff14 	bl	800746c <USB_WritePMA>
 8006644:	e0ca      	b.n	80067dc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	785b      	ldrb	r3, [r3, #1]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d177      	bne.n	8006746 <USB_EPStartXfer+0xc98>
 8006656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006670:	b29b      	uxth	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006676:	4413      	add	r3, r2
 8006678:	67fb      	str	r3, [r7, #124]	; 0x7c
 800667a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	011a      	lsls	r2, r3, #4
 8006688:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800668a:	4413      	add	r3, r2
 800668c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006690:	67bb      	str	r3, [r7, #120]	; 0x78
 8006692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800669c:	b29a      	uxth	r2, r3
 800669e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066a0:	801a      	strh	r2, [r3, #0]
 80066a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a6:	2b3e      	cmp	r3, #62	; 0x3e
 80066a8:	d921      	bls.n	80066ee <USB_EPStartXfer+0xc40>
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b8:	f003 031f 	and.w	r3, r3, #31
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <USB_EPStartXfer+0xc1c>
 80066c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066c4:	3b01      	subs	r3, #1
 80066c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	029b      	lsls	r3, r3, #10
 80066d8:	b29b      	uxth	r3, r3
 80066da:	4313      	orrs	r3, r2
 80066dc:	b29b      	uxth	r3, r3
 80066de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	e05c      	b.n	80067a8 <USB_EPStartXfer+0xcfa>
 80066ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <USB_EPStartXfer+0xc5e>
 80066f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006704:	b29a      	uxth	r2, r3
 8006706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006708:	801a      	strh	r2, [r3, #0]
 800670a:	e04d      	b.n	80067a8 <USB_EPStartXfer+0xcfa>
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006710:	085b      	lsrs	r3, r3, #1
 8006712:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d004      	beq.n	800672c <USB_EPStartXfer+0xc7e>
 8006722:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006726:	3301      	adds	r3, #1
 8006728:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800672c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29a      	uxth	r2, r3
 8006732:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006736:	b29b      	uxth	r3, r3
 8006738:	029b      	lsls	r3, r3, #10
 800673a:	b29b      	uxth	r3, r3
 800673c:	4313      	orrs	r3, r2
 800673e:	b29a      	uxth	r2, r3
 8006740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	e030      	b.n	80067a8 <USB_EPStartXfer+0xcfa>
 8006746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d128      	bne.n	80067a8 <USB_EPStartXfer+0xcfa>
 8006756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006772:	b29b      	uxth	r3, r3
 8006774:	461a      	mov	r2, r3
 8006776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800677a:	4413      	add	r3, r2
 800677c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	011a      	lsls	r2, r3, #4
 800678e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006792:	4413      	add	r3, r2
 8006794:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800679c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	891b      	ldrh	r3, [r3, #8]
 80067b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6959      	ldr	r1, [r3, #20]
 80067c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067d6:	6800      	ldr	r0, [r0, #0]
 80067d8:	f000 fe48 	bl	800746c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80067dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006802:	817b      	strh	r3, [r7, #10]
 8006804:	897b      	ldrh	r3, [r7, #10]
 8006806:	f083 0310 	eor.w	r3, r3, #16
 800680a:	817b      	strh	r3, [r7, #10]
 800680c:	897b      	ldrh	r3, [r7, #10]
 800680e:	f083 0320 	eor.w	r3, r3, #32
 8006812:	817b      	strh	r3, [r7, #10]
 8006814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006818:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	441a      	add	r2, r3
 800682e:	897b      	ldrh	r3, [r7, #10]
 8006830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006840:	b29b      	uxth	r3, r3
 8006842:	8013      	strh	r3, [r2, #0]
 8006844:	f000 bcde 	b.w	8007204 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	7b1b      	ldrb	r3, [r3, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f040 80bb 	bne.w	80069d0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800685a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	429a      	cmp	r2, r3
 8006874:	d917      	bls.n	80068a6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006896:	1ad2      	subs	r2, r2, r3
 8006898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	619a      	str	r2, [r3, #24]
 80068a4:	e00e      	b.n	80068c4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80068a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80068b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80068c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068e8:	4413      	add	r3, r2
 80068ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	011a      	lsls	r2, r3, #4
 80068fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006900:	4413      	add	r3, r2
 8006902:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800690a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006916:	b29a      	uxth	r2, r3
 8006918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006922:	2b3e      	cmp	r3, #62	; 0x3e
 8006924:	d924      	bls.n	8006970 <USB_EPStartXfer+0xec2>
 8006926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <USB_EPStartXfer+0xe98>
 800693c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006940:	3b01      	subs	r3, #1
 8006942:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29a      	uxth	r2, r3
 800694e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006952:	b29b      	uxth	r3, r3
 8006954:	029b      	lsls	r3, r3, #10
 8006956:	b29b      	uxth	r3, r3
 8006958:	4313      	orrs	r3, r2
 800695a:	b29b      	uxth	r3, r3
 800695c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006964:	b29a      	uxth	r2, r3
 8006966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800696a:	801a      	strh	r2, [r3, #0]
 800696c:	f000 bc10 	b.w	8007190 <USB_EPStartXfer+0x16e2>
 8006970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10c      	bne.n	8006992 <USB_EPStartXfer+0xee4>
 8006978:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006988:	b29a      	uxth	r2, r3
 800698a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800698e:	801a      	strh	r2, [r3, #0]
 8006990:	e3fe      	b.n	8007190 <USB_EPStartXfer+0x16e2>
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006996:	085b      	lsrs	r3, r3, #1
 8006998:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800699c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <USB_EPStartXfer+0xf04>
 80069a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069ac:	3301      	adds	r3, #1
 80069ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069be:	b29b      	uxth	r3, r3
 80069c0:	029b      	lsls	r3, r3, #10
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	4313      	orrs	r3, r2
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069cc:	801a      	strh	r2, [r3, #0]
 80069ce:	e3df      	b.n	8007190 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80069d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	78db      	ldrb	r3, [r3, #3]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	f040 8218 	bne.w	8006e12 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80069e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	785b      	ldrb	r3, [r3, #1]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f040 809d 	bne.w	8006b2e <USB_EPStartXfer+0x1080>
 80069f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a18:	4413      	add	r3, r2
 8006a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	011a      	lsls	r2, r3, #4
 8006a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a30:	4413      	add	r3, r2
 8006a32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a4c:	801a      	strh	r2, [r3, #0]
 8006a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a5c:	d92b      	bls.n	8006ab6 <USB_EPStartXfer+0x1008>
 8006a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f003 031f 	and.w	r3, r3, #31
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d104      	bne.n	8006a8e <USB_EPStartXfer+0xfe0>
 8006a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	029b      	lsls	r3, r3, #10
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	e070      	b.n	8006b98 <USB_EPStartXfer+0x10ea>
 8006ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10c      	bne.n	8006ae0 <USB_EPStartXfer+0x1032>
 8006ac6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006adc:	801a      	strh	r2, [r3, #0]
 8006ade:	e05b      	b.n	8006b98 <USB_EPStartXfer+0x10ea>
 8006ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	085b      	lsrs	r3, r3, #1
 8006aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <USB_EPStartXfer+0x1062>
 8006b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	029b      	lsls	r3, r3, #10
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	4313      	orrs	r3, r2
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e034      	b.n	8006b98 <USB_EPStartXfer+0x10ea>
 8006b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	785b      	ldrb	r3, [r3, #1]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d12c      	bne.n	8006b98 <USB_EPStartXfer+0x10ea>
 8006b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b62:	4413      	add	r3, r2
 8006b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	011a      	lsls	r2, r3, #4
 8006b76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b96:	801a      	strh	r2, [r3, #0]
 8006b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f040 809d 	bne.w	8006cf2 <USB_EPStartXfer+0x1244>
 8006bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bdc:	4413      	add	r3, r2
 8006bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	011a      	lsls	r2, r3, #4
 8006bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006bfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c20:	d92b      	bls.n	8006c7a <USB_EPStartXfer+0x11cc>
 8006c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f003 031f 	and.w	r3, r3, #31
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d104      	bne.n	8006c52 <USB_EPStartXfer+0x11a4>
 8006c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	029b      	lsls	r3, r3, #10
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	4313      	orrs	r3, r2
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c76:	801a      	strh	r2, [r3, #0]
 8006c78:	e069      	b.n	8006d4e <USB_EPStartXfer+0x12a0>
 8006c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10c      	bne.n	8006ca4 <USB_EPStartXfer+0x11f6>
 8006c8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	e054      	b.n	8006d4e <USB_EPStartXfer+0x12a0>
 8006ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	085b      	lsrs	r3, r3, #1
 8006cb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <USB_EPStartXfer+0x1226>
 8006cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cce:	3301      	adds	r3, #1
 8006cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	029b      	lsls	r3, r3, #10
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	e02d      	b.n	8006d4e <USB_EPStartXfer+0x12a0>
 8006cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	785b      	ldrb	r3, [r3, #1]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d125      	bne.n	8006d4e <USB_EPStartXfer+0x12a0>
 8006d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d18:	4413      	add	r3, r2
 8006d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	011a      	lsls	r2, r3, #4
 8006d2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d30:	4413      	add	r3, r2
 8006d32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d4c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 8218 	beq.w	8007190 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <USB_EPStartXfer+0x12ea>
 8006d8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10d      	bne.n	8006db4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d98:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f040 81f5 	bne.w	8007190 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006da6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 81ee 	bne.w	8007190 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dda:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	441a      	add	r2, r3
 8006df8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	8013      	strh	r3, [r2, #0]
 8006e10:	e1be      	b.n	8007190 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	78db      	ldrb	r3, [r3, #3]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	f040 81b4 	bne.w	800718c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	699a      	ldr	r2, [r3, #24]
 8006e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d917      	bls.n	8006e70 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	699a      	ldr	r2, [r3, #24]
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e60:	1ad2      	subs	r2, r2, r3
 8006e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	619a      	str	r2, [r3, #24]
 8006e6e:	e00e      	b.n	8006e8e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	785b      	ldrb	r3, [r3, #1]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f040 8085 	bne.w	8006faa <USB_EPStartXfer+0x14fc>
 8006ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	011a      	lsls	r2, r3, #4
 8006ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006edc:	4413      	add	r3, r2
 8006ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ef8:	801a      	strh	r2, [r3, #0]
 8006efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efe:	2b3e      	cmp	r3, #62	; 0x3e
 8006f00:	d923      	bls.n	8006f4a <USB_EPStartXfer+0x149c>
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f06:	095b      	lsrs	r3, r3, #5
 8006f08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f10:	f003 031f 	and.w	r3, r3, #31
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <USB_EPStartXfer+0x1474>
 8006f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	029b      	lsls	r3, r3, #10
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	4313      	orrs	r3, r2
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f46:	801a      	strh	r2, [r3, #0]
 8006f48:	e060      	b.n	800700c <USB_EPStartXfer+0x155e>
 8006f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10c      	bne.n	8006f6c <USB_EPStartXfer+0x14be>
 8006f52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f68:	801a      	strh	r2, [r3, #0]
 8006f6a:	e04f      	b.n	800700c <USB_EPStartXfer+0x155e>
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <USB_EPStartXfer+0x14de>
 8006f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f86:	3301      	adds	r3, #1
 8006f88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	029b      	lsls	r3, r3, #10
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	e030      	b.n	800700c <USB_EPStartXfer+0x155e>
 8006faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d128      	bne.n	800700c <USB_EPStartXfer+0x155e>
 8006fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fde:	4413      	add	r3, r2
 8006fe0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	011a      	lsls	r2, r3, #4
 8006ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007004:	b29a      	uxth	r2, r3
 8007006:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800700a:	801a      	strh	r2, [r3, #0]
 800700c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800701a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b00      	cmp	r3, #0
 8007028:	f040 8085 	bne.w	8007136 <USB_EPStartXfer+0x1688>
 800702c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800703a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007048:	b29b      	uxth	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007050:	4413      	add	r3, r2
 8007052:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	011a      	lsls	r2, r3, #4
 8007064:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007068:	4413      	add	r3, r2
 800706a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800706e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007072:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b29b      	uxth	r3, r3
 800707a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800707e:	b29a      	uxth	r2, r3
 8007080:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007084:	801a      	strh	r2, [r3, #0]
 8007086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708a:	2b3e      	cmp	r3, #62	; 0x3e
 800708c:	d923      	bls.n	80070d6 <USB_EPStartXfer+0x1628>
 800708e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <USB_EPStartXfer+0x1600>
 80070a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070a8:	3b01      	subs	r3, #1
 80070aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	029b      	lsls	r3, r3, #10
 80070be:	b29b      	uxth	r3, r3
 80070c0:	4313      	orrs	r3, r2
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070d2:	801a      	strh	r2, [r3, #0]
 80070d4:	e05c      	b.n	8007190 <USB_EPStartXfer+0x16e2>
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10c      	bne.n	80070f8 <USB_EPStartXfer+0x164a>
 80070de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070f4:	801a      	strh	r2, [r3, #0]
 80070f6:	e04b      	b.n	8007190 <USB_EPStartXfer+0x16e2>
 80070f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fc:	085b      	lsrs	r3, r3, #1
 80070fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d004      	beq.n	8007118 <USB_EPStartXfer+0x166a>
 800710e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007112:	3301      	adds	r3, #1
 8007114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007118:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	b29a      	uxth	r2, r3
 8007120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007124:	b29b      	uxth	r3, r3
 8007126:	029b      	lsls	r3, r3, #10
 8007128:	b29b      	uxth	r3, r3
 800712a:	4313      	orrs	r3, r2
 800712c:	b29a      	uxth	r2, r3
 800712e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007132:	801a      	strh	r2, [r3, #0]
 8007134:	e02c      	b.n	8007190 <USB_EPStartXfer+0x16e2>
 8007136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	785b      	ldrb	r3, [r3, #1]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d124      	bne.n	8007190 <USB_EPStartXfer+0x16e2>
 8007146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007154:	b29b      	uxth	r3, r3
 8007156:	461a      	mov	r2, r3
 8007158:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800715c:	4413      	add	r3, r2
 800715e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	011a      	lsls	r2, r3, #4
 8007170:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007174:	4413      	add	r3, r2
 8007176:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800717a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800717e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007182:	b29a      	uxth	r2, r3
 8007184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007188:	801a      	strh	r2, [r3, #0]
 800718a:	e001      	b.n	8007190 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e03a      	b.n	8007206 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80071ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80071be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80071c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80071ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071ce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80071d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	441a      	add	r2, r3
 80071ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80071f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007200:	b29b      	uxth	r3, r3
 8007202:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d020      	beq.n	8007264 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	b29b      	uxth	r3, r3
 8007230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007238:	81bb      	strh	r3, [r7, #12]
 800723a:	89bb      	ldrh	r3, [r7, #12]
 800723c:	f083 0310 	eor.w	r3, r3, #16
 8007240:	81bb      	strh	r3, [r7, #12]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	441a      	add	r2, r3
 800724c:	89bb      	ldrh	r3, [r7, #12]
 800724e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725e:	b29b      	uxth	r3, r3
 8007260:	8013      	strh	r3, [r2, #0]
 8007262:	e01f      	b.n	80072a4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29b      	uxth	r3, r3
 8007272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727a:	81fb      	strh	r3, [r7, #14]
 800727c:	89fb      	ldrh	r3, [r7, #14]
 800727e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007282:	81fb      	strh	r3, [r7, #14]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	441a      	add	r2, r3
 800728e:	89fb      	ldrh	r3, [r7, #14]
 8007290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800729c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b087      	sub	sp, #28
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	7b1b      	ldrb	r3, [r3, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f040 809d 	bne.w	8007400 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d04c      	beq.n	8007368 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	823b      	strh	r3, [r7, #16]
 80072dc:	8a3b      	ldrh	r3, [r7, #16]
 80072de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d01b      	beq.n	800731e <USB_EPClearStall+0x6c>
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fc:	81fb      	strh	r3, [r7, #14]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	441a      	add	r2, r3
 8007308:	89fb      	ldrh	r3, [r7, #14]
 800730a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800730e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007316:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800731a:	b29b      	uxth	r3, r3
 800731c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	78db      	ldrb	r3, [r3, #3]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d06c      	beq.n	8007400 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800733c:	81bb      	strh	r3, [r7, #12]
 800733e:	89bb      	ldrh	r3, [r7, #12]
 8007340:	f083 0320 	eor.w	r3, r3, #32
 8007344:	81bb      	strh	r3, [r7, #12]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	441a      	add	r2, r3
 8007350:	89bb      	ldrh	r3, [r7, #12]
 8007352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800735a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800735e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007362:	b29b      	uxth	r3, r3
 8007364:	8013      	strh	r3, [r2, #0]
 8007366:	e04b      	b.n	8007400 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	82fb      	strh	r3, [r7, #22]
 8007376:	8afb      	ldrh	r3, [r7, #22]
 8007378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01b      	beq.n	80073b8 <USB_EPClearStall+0x106>
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007396:	82bb      	strh	r3, [r7, #20]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	441a      	add	r2, r3
 80073a2:	8abb      	ldrh	r3, [r7, #20]
 80073a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ce:	827b      	strh	r3, [r7, #18]
 80073d0:	8a7b      	ldrh	r3, [r7, #18]
 80073d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073d6:	827b      	strh	r3, [r7, #18]
 80073d8:	8a7b      	ldrh	r3, [r7, #18]
 80073da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073de:	827b      	strh	r3, [r7, #18]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	441a      	add	r2, r3
 80073ea:	8a7b      	ldrh	r3, [r7, #18]
 80073ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	460b      	mov	r3, r1
 8007418:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d103      	bne.n	8007428 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2280      	movs	r2, #128	; 0x80
 8007424:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800745a:	b29b      	uxth	r3, r3
 800745c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800745e:	68fb      	ldr	r3, [r7, #12]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800746c:	b480      	push	{r7}
 800746e:	b08b      	sub	sp, #44	; 0x2c
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4611      	mov	r1, r2
 8007478:	461a      	mov	r2, r3
 800747a:	460b      	mov	r3, r1
 800747c:	80fb      	strh	r3, [r7, #6]
 800747e:	4613      	mov	r3, r2
 8007480:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007482:	88bb      	ldrh	r3, [r7, #4]
 8007484:	3301      	adds	r3, #1
 8007486:	085b      	lsrs	r3, r3, #1
 8007488:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007492:	88fb      	ldrh	r3, [r7, #6]
 8007494:	005a      	lsls	r2, r3, #1
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800749e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
 80074a4:	e01e      	b.n	80074e4 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	3301      	adds	r3, #1
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	b21a      	sxth	r2, r3
 80074b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	b21b      	sxth	r3, r3
 80074be:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	8a7a      	ldrh	r2, [r7, #18]
 80074c4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	3302      	adds	r3, #2
 80074ca:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	3302      	adds	r3, #2
 80074d0:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	3301      	adds	r3, #1
 80074d6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	3301      	adds	r3, #1
 80074dc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	3b01      	subs	r3, #1
 80074e2:	627b      	str	r3, [r7, #36]	; 0x24
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1dd      	bne.n	80074a6 <USB_WritePMA+0x3a>
  }
}
 80074ea:	bf00      	nop
 80074ec:	bf00      	nop
 80074ee:	372c      	adds	r7, #44	; 0x2c
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b08b      	sub	sp, #44	; 0x2c
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	4611      	mov	r1, r2
 8007504:	461a      	mov	r2, r3
 8007506:	460b      	mov	r3, r1
 8007508:	80fb      	strh	r3, [r7, #6]
 800750a:	4613      	mov	r3, r2
 800750c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800750e:	88bb      	ldrh	r3, [r7, #4]
 8007510:	085b      	lsrs	r3, r3, #1
 8007512:	b29b      	uxth	r3, r3
 8007514:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	005a      	lsls	r2, r3, #1
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800752a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
 8007530:	e01b      	b.n	800756a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	3302      	adds	r3, #2
 800753e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	b2da      	uxtb	r2, r3
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	3301      	adds	r3, #1
 800754c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	0a1b      	lsrs	r3, r3, #8
 8007552:	b2da      	uxtb	r2, r3
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	3301      	adds	r3, #1
 800755c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	3302      	adds	r3, #2
 8007562:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	3b01      	subs	r3, #1
 8007568:	627b      	str	r3, [r7, #36]	; 0x24
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e0      	bne.n	8007532 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007570:	88bb      	ldrh	r3, [r7, #4]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	b29b      	uxth	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	b2da      	uxtb	r2, r3
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	701a      	strb	r2, [r3, #0]
  }
}
 800758c:	bf00      	nop
 800758e:	372c      	adds	r7, #44	; 0x2c
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	7c1b      	ldrb	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d115      	bne.n	80075dc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80075b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075b4:	2202      	movs	r2, #2
 80075b6:	2181      	movs	r1, #129	; 0x81
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 feb8 	bl	800932e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80075c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075c8:	2202      	movs	r2, #2
 80075ca:	2101      	movs	r1, #1
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 feae 	bl	800932e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80075da:	e012      	b.n	8007602 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80075dc:	2340      	movs	r3, #64	; 0x40
 80075de:	2202      	movs	r2, #2
 80075e0:	2181      	movs	r1, #129	; 0x81
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 fea3 	bl	800932e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80075ee:	2340      	movs	r3, #64	; 0x40
 80075f0:	2202      	movs	r2, #2
 80075f2:	2101      	movs	r1, #1
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fe9a 	bl	800932e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007602:	2308      	movs	r3, #8
 8007604:	2203      	movs	r2, #3
 8007606:	2182      	movs	r1, #130	; 0x82
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 fe90 	bl	800932e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007614:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007618:	f001 ffb2 	bl	8009580 <USBD_static_malloc>
 800761c:	4602      	mov	r2, r0
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800762e:	2301      	movs	r3, #1
 8007630:	73fb      	strb	r3, [r7, #15]
 8007632:	e026      	b.n	8007682 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800763a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2200      	movs	r2, #0
 800764a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2200      	movs	r2, #0
 8007652:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7c1b      	ldrb	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d109      	bne.n	8007672 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007668:	2101      	movs	r1, #1
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 ff51 	bl	8009512 <USBD_LL_PrepareReceive>
 8007670:	e007      	b.n	8007682 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007678:	2340      	movs	r3, #64	; 0x40
 800767a:	2101      	movs	r1, #1
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 ff48 	bl	8009512 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007682:	7bfb      	ldrb	r3, [r7, #15]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800769c:	2181      	movs	r1, #129	; 0x81
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 fe6b 	bl	800937a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80076aa:	2101      	movs	r1, #1
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 fe64 	bl	800937a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80076ba:	2182      	movs	r1, #130	; 0x82
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 fe5c 	bl	800937a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00e      	beq.n	80076f0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 ff5a 	bl	800959c <USBD_static_free>
    pdev->pClassData = NULL;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b086      	sub	sp, #24
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007720:	2b00      	cmp	r3, #0
 8007722:	d039      	beq.n	8007798 <USBD_CDC_Setup+0x9e>
 8007724:	2b20      	cmp	r3, #32
 8007726:	d17f      	bne.n	8007828 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	88db      	ldrh	r3, [r3, #6]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d029      	beq.n	8007784 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	b25b      	sxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	da11      	bge.n	800775e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007746:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	88d2      	ldrh	r2, [r2, #6]
 800774c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800774e:	6939      	ldr	r1, [r7, #16]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	88db      	ldrh	r3, [r3, #6]
 8007754:	461a      	mov	r2, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fa13 	bl	8008b82 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800775c:	e06b      	b.n	8007836 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	785a      	ldrb	r2, [r3, #1]
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	88db      	ldrh	r3, [r3, #6]
 800776c:	b2da      	uxtb	r2, r3
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007774:	6939      	ldr	r1, [r7, #16]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	88db      	ldrh	r3, [r3, #6]
 800777a:	461a      	mov	r2, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 fa2e 	bl	8008bde <USBD_CtlPrepareRx>
      break;
 8007782:	e058      	b.n	8007836 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	7850      	ldrb	r0, [r2, #1]
 8007790:	2200      	movs	r2, #0
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	4798      	blx	r3
      break;
 8007796:	e04e      	b.n	8007836 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	785b      	ldrb	r3, [r3, #1]
 800779c:	2b0b      	cmp	r3, #11
 800779e:	d02e      	beq.n	80077fe <USBD_CDC_Setup+0x104>
 80077a0:	2b0b      	cmp	r3, #11
 80077a2:	dc38      	bgt.n	8007816 <USBD_CDC_Setup+0x11c>
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <USBD_CDC_Setup+0xb4>
 80077a8:	2b0a      	cmp	r3, #10
 80077aa:	d014      	beq.n	80077d6 <USBD_CDC_Setup+0xdc>
 80077ac:	e033      	b.n	8007816 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d107      	bne.n	80077c8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80077b8:	f107 030c 	add.w	r3, r7, #12
 80077bc:	2202      	movs	r2, #2
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 f9de 	bl	8008b82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077c6:	e02e      	b.n	8007826 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 f96e 	bl	8008aac <USBD_CtlError>
            ret = USBD_FAIL;
 80077d0:	2302      	movs	r3, #2
 80077d2:	75fb      	strb	r3, [r7, #23]
          break;
 80077d4:	e027      	b.n	8007826 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d107      	bne.n	80077f0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80077e0:	f107 030f 	add.w	r3, r7, #15
 80077e4:	2201      	movs	r2, #1
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 f9ca 	bl	8008b82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077ee:	e01a      	b.n	8007826 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 f95a 	bl	8008aac <USBD_CtlError>
            ret = USBD_FAIL;
 80077f8:	2302      	movs	r3, #2
 80077fa:	75fb      	strb	r3, [r7, #23]
          break;
 80077fc:	e013      	b.n	8007826 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007804:	2b03      	cmp	r3, #3
 8007806:	d00d      	beq.n	8007824 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 f94e 	bl	8008aac <USBD_CtlError>
            ret = USBD_FAIL;
 8007810:	2302      	movs	r3, #2
 8007812:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007814:	e006      	b.n	8007824 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 f947 	bl	8008aac <USBD_CtlError>
          ret = USBD_FAIL;
 800781e:	2302      	movs	r3, #2
 8007820:	75fb      	strb	r3, [r7, #23]
          break;
 8007822:	e000      	b.n	8007826 <USBD_CDC_Setup+0x12c>
          break;
 8007824:	bf00      	nop
      }
      break;
 8007826:	e006      	b.n	8007836 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 f93e 	bl	8008aac <USBD_CtlError>
      ret = USBD_FAIL;
 8007830:	2302      	movs	r3, #2
 8007832:	75fb      	strb	r3, [r7, #23]
      break;
 8007834:	bf00      	nop
  }

  return ret;
 8007836:	7dfb      	ldrb	r3, [r7, #23]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007852:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800785a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007862:	2b00      	cmp	r3, #0
 8007864:	d03a      	beq.n	80078dc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007866:	78fa      	ldrb	r2, [r7, #3]
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	331c      	adds	r3, #28
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d029      	beq.n	80078d0 <USBD_CDC_DataIn+0x90>
 800787c:	78fa      	ldrb	r2, [r7, #3]
 800787e:	6879      	ldr	r1, [r7, #4]
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	440b      	add	r3, r1
 800788a:	331c      	adds	r3, #28
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	78f9      	ldrb	r1, [r7, #3]
 8007890:	68b8      	ldr	r0, [r7, #8]
 8007892:	460b      	mov	r3, r1
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	440b      	add	r3, r1
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	4403      	add	r3, r0
 800789c:	3338      	adds	r3, #56	; 0x38
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80078a4:	fb01 f303 	mul.w	r3, r1, r3
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d110      	bne.n	80078d0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80078ae:	78fa      	ldrb	r2, [r7, #3]
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	331c      	adds	r3, #28
 80078be:	2200      	movs	r2, #0
 80078c0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078c2:	78f9      	ldrb	r1, [r7, #3]
 80078c4:	2300      	movs	r3, #0
 80078c6:	2200      	movs	r2, #0
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fdff 	bl	80094cc <USBD_LL_Transmit>
 80078ce:	e003      	b.n	80078d8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	e000      	b.n	80078de <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80078dc:	2302      	movs	r3, #2
  }
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	460b      	mov	r3, r1
 80078f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 fe2a 	bl	8009558 <USBD_LL_GetRxDataSize>
 8007904:	4602      	mov	r2, r0
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00d      	beq.n	8007932 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800792a:	4611      	mov	r1, r2
 800792c:	4798      	blx	r3

    return USBD_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	e000      	b.n	8007934 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007932:	2302      	movs	r3, #2
  }
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007952:	2b00      	cmp	r3, #0
 8007954:	d015      	beq.n	8007982 <USBD_CDC_EP0_RxReady+0x46>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800795c:	2bff      	cmp	r3, #255	; 0xff
 800795e:	d010      	beq.n	8007982 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800796e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007976:	b292      	uxth	r2, r2
 8007978:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	22ff      	movs	r2, #255	; 0xff
 800797e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2243      	movs	r2, #67	; 0x43
 8007998:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800799a:	4b03      	ldr	r3, [pc, #12]	; (80079a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	20000094 	.word	0x20000094

080079ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2243      	movs	r2, #67	; 0x43
 80079b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80079ba:	4b03      	ldr	r3, [pc, #12]	; (80079c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	20000050 	.word	0x20000050

080079cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2243      	movs	r2, #67	; 0x43
 80079d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80079da:	4b03      	ldr	r3, [pc, #12]	; (80079e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	200000d8 	.word	0x200000d8

080079ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	220a      	movs	r2, #10
 80079f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80079fa:	4b03      	ldr	r3, [pc, #12]	; (8007a08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	2000000c 	.word	0x2000000c

08007a0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007a16:	2302      	movs	r3, #2
 8007a18:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d005      	beq.n	8007a2c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b087      	sub	sp, #28
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	4613      	mov	r3, r2
 8007a46:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a58:	88fa      	ldrh	r2, [r7, #6]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01c      	beq.n	8007aea <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d115      	bne.n	8007ae6 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2181      	movs	r1, #129	; 0x81
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 fcf5 	bl	80094cc <USBD_LL_Transmit>

      return USBD_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e002      	b.n	8007aec <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007aea:	2302      	movs	r3, #2
  }
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d017      	beq.n	8007b3e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	7c1b      	ldrb	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d109      	bne.n	8007b2a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b20:	2101      	movs	r1, #1
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 fcf5 	bl	8009512 <USBD_LL_PrepareReceive>
 8007b28:	e007      	b.n	8007b3a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b30:	2340      	movs	r3, #64	; 0x40
 8007b32:	2101      	movs	r1, #1
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 fcec 	bl	8009512 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	e000      	b.n	8007b40 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007b3e:	2302      	movs	r3, #2
  }
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	4613      	mov	r3, r2
 8007b54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	e01a      	b.n	8007b96 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	79fa      	ldrb	r2, [r7, #7]
 8007b8c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f001 fb58 	bl	8009244 <USBD_LL_Init>

  return USBD_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d006      	beq.n	8007bc0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73fb      	strb	r3, [r7, #15]
 8007bbe:	e001      	b.n	8007bc4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 fb8c 	bl	80092f8 <USBD_LL_Start>

  return USBD_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00c      	beq.n	8007c34 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	78fa      	ldrb	r2, [r7, #3]
 8007c24:	4611      	mov	r1, r2
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	4798      	blx	r3
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	460b      	mov	r3, r1
 8007c48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	78fa      	ldrb	r2, [r7, #3]
 8007c54:	4611      	mov	r1, r2
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3

  return USBD_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fedb 	bl	8008a32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c98:	f003 031f 	and.w	r3, r3, #31
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d016      	beq.n	8007cce <USBD_LL_SetupStage+0x6a>
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d81c      	bhi.n	8007cde <USBD_LL_SetupStage+0x7a>
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <USBD_LL_SetupStage+0x4a>
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d008      	beq.n	8007cbe <USBD_LL_SetupStage+0x5a>
 8007cac:	e017      	b.n	8007cde <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f9ce 	bl	8008058 <USBD_StdDevReq>
      break;
 8007cbc:	e01a      	b.n	8007cf4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fa30 	bl	800812c <USBD_StdItfReq>
      break;
 8007ccc:	e012      	b.n	8007cf4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa70 	bl	80081bc <USBD_StdEPReq>
      break;
 8007cdc:	e00a      	b.n	8007cf4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ce4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 fb63 	bl	80093b8 <USBD_LL_StallEP>
      break;
 8007cf2:	bf00      	nop
  }

  return USBD_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b086      	sub	sp, #24
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	60f8      	str	r0, [r7, #12]
 8007d06:	460b      	mov	r3, r1
 8007d08:	607a      	str	r2, [r7, #4]
 8007d0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d0c:	7afb      	ldrb	r3, [r7, #11]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d14b      	bne.n	8007daa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d134      	bne.n	8007d8e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d919      	bls.n	8007d64 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	68da      	ldr	r2, [r3, #12]
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	1ad2      	subs	r2, r2, r3
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d203      	bcs.n	8007d52 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	e002      	b.n	8007d58 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6879      	ldr	r1, [r7, #4]
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 ff5c 	bl	8008c1a <USBD_CtlContinueRx>
 8007d62:	e038      	b.n	8007dd6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d105      	bne.n	8007d86 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 ff59 	bl	8008c3e <USBD_CtlSendStatus>
 8007d8c:	e023      	b.n	8007dd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d94:	2b05      	cmp	r3, #5
 8007d96:	d11e      	bne.n	8007dd6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007da0:	2100      	movs	r1, #0
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f001 fb08 	bl	80093b8 <USBD_LL_StallEP>
 8007da8:	e015      	b.n	8007dd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00d      	beq.n	8007dd2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d108      	bne.n	8007dd2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	7afa      	ldrb	r2, [r7, #11]
 8007dca:	4611      	mov	r1, r2
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	4798      	blx	r3
 8007dd0:	e001      	b.n	8007dd6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e000      	b.n	8007dd8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	460b      	mov	r3, r1
 8007dea:	607a      	str	r2, [r7, #4]
 8007dec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d17f      	bne.n	8007ef4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	3314      	adds	r3, #20
 8007df8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d15c      	bne.n	8007ebe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d915      	bls.n	8007e3c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	1ad2      	subs	r2, r2, r3
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 fec6 	bl	8008bba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e2e:	2300      	movs	r3, #0
 8007e30:	2200      	movs	r2, #0
 8007e32:	2100      	movs	r1, #0
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f001 fb6c 	bl	8009512 <USBD_LL_PrepareReceive>
 8007e3a:	e04e      	b.n	8007eda <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	6912      	ldr	r2, [r2, #16]
 8007e44:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e48:	fb01 f202 	mul.w	r2, r1, r2
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d11c      	bne.n	8007e8c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d316      	bcc.n	8007e8c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d20f      	bcs.n	8007e8c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2100      	movs	r1, #0
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 fea2 	bl	8008bba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e7e:	2300      	movs	r3, #0
 8007e80:	2200      	movs	r2, #0
 8007e82:	2100      	movs	r1, #0
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f001 fb44 	bl	8009512 <USBD_LL_PrepareReceive>
 8007e8a:	e026      	b.n	8007eda <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00a      	beq.n	8007eae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d105      	bne.n	8007eae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007eae:	2180      	movs	r1, #128	; 0x80
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f001 fa81 	bl	80093b8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 fed4 	bl	8008c64 <USBD_CtlReceiveStatus>
 8007ebc:	e00d      	b.n	8007eda <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d004      	beq.n	8007ed2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d103      	bne.n	8007eda <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007ed2:	2180      	movs	r1, #128	; 0x80
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f001 fa6f 	bl	80093b8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d11d      	bne.n	8007f20 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f7ff fe80 	bl	8007bea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ef2:	e015      	b.n	8007f20 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00d      	beq.n	8007f1c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d108      	bne.n	8007f1c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	7afa      	ldrb	r2, [r7, #11]
 8007f14:	4611      	mov	r1, r2
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	4798      	blx	r3
 8007f1a:	e001      	b.n	8007f20 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e000      	b.n	8007f22 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f32:	2340      	movs	r3, #64	; 0x40
 8007f34:	2200      	movs	r2, #0
 8007f36:	2100      	movs	r1, #0
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 f9f8 	bl	800932e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2240      	movs	r2, #64	; 0x40
 8007f4a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f4e:	2340      	movs	r3, #64	; 0x40
 8007f50:	2200      	movs	r2, #0
 8007f52:	2180      	movs	r1, #128	; 0x80
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 f9ea 	bl	800932e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2240      	movs	r2, #64	; 0x40
 8007f64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d009      	beq.n	8007fa2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6852      	ldr	r2, [r2, #4]
 8007f9a:	b2d2      	uxtb	r2, r2
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	4798      	blx	r3
  }

  return USBD_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	78fa      	ldrb	r2, [r7, #3]
 8007fbc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2204      	movs	r2, #4
 8007fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008004:	2b04      	cmp	r3, #4
 8008006:	d105      	bne.n	8008014 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008030:	2b03      	cmp	r3, #3
 8008032:	d10b      	bne.n	800804c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d005      	beq.n	800804c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800806e:	2b40      	cmp	r3, #64	; 0x40
 8008070:	d005      	beq.n	800807e <USBD_StdDevReq+0x26>
 8008072:	2b40      	cmp	r3, #64	; 0x40
 8008074:	d84f      	bhi.n	8008116 <USBD_StdDevReq+0xbe>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d009      	beq.n	800808e <USBD_StdDevReq+0x36>
 800807a:	2b20      	cmp	r3, #32
 800807c:	d14b      	bne.n	8008116 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
      break;
 800808c:	e048      	b.n	8008120 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	785b      	ldrb	r3, [r3, #1]
 8008092:	2b09      	cmp	r3, #9
 8008094:	d839      	bhi.n	800810a <USBD_StdDevReq+0xb2>
 8008096:	a201      	add	r2, pc, #4	; (adr r2, 800809c <USBD_StdDevReq+0x44>)
 8008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809c:	080080ed 	.word	0x080080ed
 80080a0:	08008101 	.word	0x08008101
 80080a4:	0800810b 	.word	0x0800810b
 80080a8:	080080f7 	.word	0x080080f7
 80080ac:	0800810b 	.word	0x0800810b
 80080b0:	080080cf 	.word	0x080080cf
 80080b4:	080080c5 	.word	0x080080c5
 80080b8:	0800810b 	.word	0x0800810b
 80080bc:	080080e3 	.word	0x080080e3
 80080c0:	080080d9 	.word	0x080080d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f9dc 	bl	8008484 <USBD_GetDescriptor>
          break;
 80080cc:	e022      	b.n	8008114 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fb3f 	bl	8008754 <USBD_SetAddress>
          break;
 80080d6:	e01d      	b.n	8008114 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fb7e 	bl	80087dc <USBD_SetConfig>
          break;
 80080e0:	e018      	b.n	8008114 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fc07 	bl	80088f8 <USBD_GetConfig>
          break;
 80080ea:	e013      	b.n	8008114 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fc37 	bl	8008962 <USBD_GetStatus>
          break;
 80080f4:	e00e      	b.n	8008114 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fc65 	bl	80089c8 <USBD_SetFeature>
          break;
 80080fe:	e009      	b.n	8008114 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fc74 	bl	80089f0 <USBD_ClrFeature>
          break;
 8008108:	e004      	b.n	8008114 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fccd 	bl	8008aac <USBD_CtlError>
          break;
 8008112:	bf00      	nop
      }
      break;
 8008114:	e004      	b.n	8008120 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fcc7 	bl	8008aac <USBD_CtlError>
      break;
 800811e:	bf00      	nop
  }

  return ret;
 8008120:	7bfb      	ldrb	r3, [r7, #15]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop

0800812c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008142:	2b40      	cmp	r3, #64	; 0x40
 8008144:	d005      	beq.n	8008152 <USBD_StdItfReq+0x26>
 8008146:	2b40      	cmp	r3, #64	; 0x40
 8008148:	d82e      	bhi.n	80081a8 <USBD_StdItfReq+0x7c>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <USBD_StdItfReq+0x26>
 800814e:	2b20      	cmp	r3, #32
 8008150:	d12a      	bne.n	80081a8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008158:	3b01      	subs	r3, #1
 800815a:	2b02      	cmp	r3, #2
 800815c:	d81d      	bhi.n	800819a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	889b      	ldrh	r3, [r3, #4]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b01      	cmp	r3, #1
 8008166:	d813      	bhi.n	8008190 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
 8008176:	4603      	mov	r3, r0
 8008178:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	88db      	ldrh	r3, [r3, #6]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d110      	bne.n	80081a4 <USBD_StdItfReq+0x78>
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10d      	bne.n	80081a4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fd58 	bl	8008c3e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800818e:	e009      	b.n	80081a4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fc8a 	bl	8008aac <USBD_CtlError>
          break;
 8008198:	e004      	b.n	80081a4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fc85 	bl	8008aac <USBD_CtlError>
          break;
 80081a2:	e000      	b.n	80081a6 <USBD_StdItfReq+0x7a>
          break;
 80081a4:	bf00      	nop
      }
      break;
 80081a6:	e004      	b.n	80081b2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fc7e 	bl	8008aac <USBD_CtlError>
      break;
 80081b0:	bf00      	nop
  }

  return USBD_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	889b      	ldrh	r3, [r3, #4]
 80081ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081d8:	2b40      	cmp	r3, #64	; 0x40
 80081da:	d007      	beq.n	80081ec <USBD_StdEPReq+0x30>
 80081dc:	2b40      	cmp	r3, #64	; 0x40
 80081de:	f200 8146 	bhi.w	800846e <USBD_StdEPReq+0x2b2>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00a      	beq.n	80081fc <USBD_StdEPReq+0x40>
 80081e6:	2b20      	cmp	r3, #32
 80081e8:	f040 8141 	bne.w	800846e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	4798      	blx	r3
      break;
 80081fa:	e13d      	b.n	8008478 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008204:	2b20      	cmp	r3, #32
 8008206:	d10a      	bne.n	800821e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	4798      	blx	r3
 8008216:	4603      	mov	r3, r0
 8008218:	73fb      	strb	r3, [r7, #15]

        return ret;
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	e12d      	b.n	800847a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	785b      	ldrb	r3, [r3, #1]
 8008222:	2b03      	cmp	r3, #3
 8008224:	d007      	beq.n	8008236 <USBD_StdEPReq+0x7a>
 8008226:	2b03      	cmp	r3, #3
 8008228:	f300 811b 	bgt.w	8008462 <USBD_StdEPReq+0x2a6>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d072      	beq.n	8008316 <USBD_StdEPReq+0x15a>
 8008230:	2b01      	cmp	r3, #1
 8008232:	d03a      	beq.n	80082aa <USBD_StdEPReq+0xee>
 8008234:	e115      	b.n	8008462 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800823c:	2b02      	cmp	r3, #2
 800823e:	d002      	beq.n	8008246 <USBD_StdEPReq+0x8a>
 8008240:	2b03      	cmp	r3, #3
 8008242:	d015      	beq.n	8008270 <USBD_StdEPReq+0xb4>
 8008244:	e02b      	b.n	800829e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008246:	7bbb      	ldrb	r3, [r7, #14]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00c      	beq.n	8008266 <USBD_StdEPReq+0xaa>
 800824c:	7bbb      	ldrb	r3, [r7, #14]
 800824e:	2b80      	cmp	r3, #128	; 0x80
 8008250:	d009      	beq.n	8008266 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 f8ae 	bl	80093b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800825c:	2180      	movs	r1, #128	; 0x80
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 f8aa 	bl	80093b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008264:	e020      	b.n	80082a8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fc1f 	bl	8008aac <USBD_CtlError>
              break;
 800826e:	e01b      	b.n	80082a8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	885b      	ldrh	r3, [r3, #2]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10e      	bne.n	8008296 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00b      	beq.n	8008296 <USBD_StdEPReq+0xda>
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	2b80      	cmp	r3, #128	; 0x80
 8008282:	d008      	beq.n	8008296 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	88db      	ldrh	r3, [r3, #6]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 f891 	bl	80093b8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fcd1 	bl	8008c3e <USBD_CtlSendStatus>

              break;
 800829c:	e004      	b.n	80082a8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fc03 	bl	8008aac <USBD_CtlError>
              break;
 80082a6:	bf00      	nop
          }
          break;
 80082a8:	e0e0      	b.n	800846c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d002      	beq.n	80082ba <USBD_StdEPReq+0xfe>
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d015      	beq.n	80082e4 <USBD_StdEPReq+0x128>
 80082b8:	e026      	b.n	8008308 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00c      	beq.n	80082da <USBD_StdEPReq+0x11e>
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	2b80      	cmp	r3, #128	; 0x80
 80082c4:	d009      	beq.n	80082da <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 f874 	bl	80093b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80082d0:	2180      	movs	r1, #128	; 0x80
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 f870 	bl	80093b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082d8:	e01c      	b.n	8008314 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fbe5 	bl	8008aac <USBD_CtlError>
              break;
 80082e2:	e017      	b.n	8008314 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	885b      	ldrh	r3, [r3, #2]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d112      	bne.n	8008312 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d004      	beq.n	8008300 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f001 f87b 	bl	80093f6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fc9c 	bl	8008c3e <USBD_CtlSendStatus>
              }
              break;
 8008306:	e004      	b.n	8008312 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fbce 	bl	8008aac <USBD_CtlError>
              break;
 8008310:	e000      	b.n	8008314 <USBD_StdEPReq+0x158>
              break;
 8008312:	bf00      	nop
          }
          break;
 8008314:	e0aa      	b.n	800846c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800831c:	2b02      	cmp	r3, #2
 800831e:	d002      	beq.n	8008326 <USBD_StdEPReq+0x16a>
 8008320:	2b03      	cmp	r3, #3
 8008322:	d032      	beq.n	800838a <USBD_StdEPReq+0x1ce>
 8008324:	e097      	b.n	8008456 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d007      	beq.n	800833c <USBD_StdEPReq+0x180>
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	2b80      	cmp	r3, #128	; 0x80
 8008330:	d004      	beq.n	800833c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fbb9 	bl	8008aac <USBD_CtlError>
                break;
 800833a:	e091      	b.n	8008460 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800833c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008340:	2b00      	cmp	r3, #0
 8008342:	da0b      	bge.n	800835c <USBD_StdEPReq+0x1a0>
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	3310      	adds	r3, #16
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	4413      	add	r3, r2
 8008358:	3304      	adds	r3, #4
 800835a:	e00b      	b.n	8008374 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	4413      	add	r3, r2
 8008372:	3304      	adds	r3, #4
 8008374:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2202      	movs	r2, #2
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fbfd 	bl	8008b82 <USBD_CtlSendData>
              break;
 8008388:	e06a      	b.n	8008460 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800838a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800838e:	2b00      	cmp	r3, #0
 8008390:	da11      	bge.n	80083b6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	f003 020f 	and.w	r2, r3, #15
 8008398:	6879      	ldr	r1, [r7, #4]
 800839a:	4613      	mov	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	440b      	add	r3, r1
 80083a4:	3318      	adds	r3, #24
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d117      	bne.n	80083dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fb7c 	bl	8008aac <USBD_CtlError>
                  break;
 80083b4:	e054      	b.n	8008460 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	f003 020f 	and.w	r2, r3, #15
 80083bc:	6879      	ldr	r1, [r7, #4]
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	440b      	add	r3, r1
 80083c8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fb69 	bl	8008aac <USBD_CtlError>
                  break;
 80083da:	e041      	b.n	8008460 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	da0b      	bge.n	80083fc <USBD_StdEPReq+0x240>
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	3310      	adds	r3, #16
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	4413      	add	r3, r2
 80083f8:	3304      	adds	r3, #4
 80083fa:	e00b      	b.n	8008414 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	4413      	add	r3, r2
 8008412:	3304      	adds	r3, #4
 8008414:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <USBD_StdEPReq+0x266>
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b80      	cmp	r3, #128	; 0x80
 8008420:	d103      	bne.n	800842a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	e00e      	b.n	8008448 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f001 f800 	bl	8009434 <USBD_LL_IsStallEP>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2201      	movs	r2, #1
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	e002      	b.n	8008448 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2202      	movs	r2, #2
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fb97 	bl	8008b82 <USBD_CtlSendData>
              break;
 8008454:	e004      	b.n	8008460 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fb27 	bl	8008aac <USBD_CtlError>
              break;
 800845e:	bf00      	nop
          }
          break;
 8008460:	e004      	b.n	800846c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fb21 	bl	8008aac <USBD_CtlError>
          break;
 800846a:	bf00      	nop
      }
      break;
 800846c:	e004      	b.n	8008478 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fb1b 	bl	8008aac <USBD_CtlError>
      break;
 8008476:	bf00      	nop
  }

  return ret;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	885b      	ldrh	r3, [r3, #2]
 800849e:	0a1b      	lsrs	r3, r3, #8
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	3b01      	subs	r3, #1
 80084a4:	2b06      	cmp	r3, #6
 80084a6:	f200 8128 	bhi.w	80086fa <USBD_GetDescriptor+0x276>
 80084aa:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <USBD_GetDescriptor+0x2c>)
 80084ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b0:	080084cd 	.word	0x080084cd
 80084b4:	080084e5 	.word	0x080084e5
 80084b8:	08008525 	.word	0x08008525
 80084bc:	080086fb 	.word	0x080086fb
 80084c0:	080086fb 	.word	0x080086fb
 80084c4:	0800869b 	.word	0x0800869b
 80084c8:	080086c7 	.word	0x080086c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	7c12      	ldrb	r2, [r2, #16]
 80084d8:	f107 0108 	add.w	r1, r7, #8
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
 80084e0:	60f8      	str	r0, [r7, #12]
      break;
 80084e2:	e112      	b.n	800870a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7c1b      	ldrb	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10d      	bne.n	8008508 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f4:	f107 0208 	add.w	r2, r7, #8
 80084f8:	4610      	mov	r0, r2
 80084fa:	4798      	blx	r3
 80084fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	2202      	movs	r2, #2
 8008504:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008506:	e100      	b.n	800870a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	f107 0208 	add.w	r2, r7, #8
 8008514:	4610      	mov	r0, r2
 8008516:	4798      	blx	r3
 8008518:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3301      	adds	r3, #1
 800851e:	2202      	movs	r2, #2
 8008520:	701a      	strb	r2, [r3, #0]
      break;
 8008522:	e0f2      	b.n	800870a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	885b      	ldrh	r3, [r3, #2]
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b05      	cmp	r3, #5
 800852c:	f200 80ac 	bhi.w	8008688 <USBD_GetDescriptor+0x204>
 8008530:	a201      	add	r2, pc, #4	; (adr r2, 8008538 <USBD_GetDescriptor+0xb4>)
 8008532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008536:	bf00      	nop
 8008538:	08008551 	.word	0x08008551
 800853c:	08008585 	.word	0x08008585
 8008540:	080085b9 	.word	0x080085b9
 8008544:	080085ed 	.word	0x080085ed
 8008548:	08008621 	.word	0x08008621
 800854c:	08008655 	.word	0x08008655
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00b      	beq.n	8008574 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	7c12      	ldrb	r2, [r2, #16]
 8008568:	f107 0108 	add.w	r1, r7, #8
 800856c:	4610      	mov	r0, r2
 800856e:	4798      	blx	r3
 8008570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008572:	e091      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fa98 	bl	8008aac <USBD_CtlError>
            err++;
 800857c:	7afb      	ldrb	r3, [r7, #11]
 800857e:	3301      	adds	r3, #1
 8008580:	72fb      	strb	r3, [r7, #11]
          break;
 8008582:	e089      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	7c12      	ldrb	r2, [r2, #16]
 800859c:	f107 0108 	add.w	r1, r7, #8
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
 80085a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085a6:	e077      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fa7e 	bl	8008aac <USBD_CtlError>
            err++;
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	3301      	adds	r3, #1
 80085b4:	72fb      	strb	r3, [r7, #11]
          break;
 80085b6:	e06f      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	7c12      	ldrb	r2, [r2, #16]
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085da:	e05d      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa64 	bl	8008aac <USBD_CtlError>
            err++;
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	3301      	adds	r3, #1
 80085e8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ea:	e055      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7c12      	ldrb	r2, [r2, #16]
 8008604:	f107 0108 	add.w	r1, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860e:	e043      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa4a 	bl	8008aac <USBD_CtlError>
            err++;
 8008618:	7afb      	ldrb	r3, [r7, #11]
 800861a:	3301      	adds	r3, #1
 800861c:	72fb      	strb	r3, [r7, #11]
          break;
 800861e:	e03b      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	7c12      	ldrb	r2, [r2, #16]
 8008638:	f107 0108 	add.w	r1, r7, #8
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
 8008640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008642:	e029      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa30 	bl	8008aac <USBD_CtlError>
            err++;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	3301      	adds	r3, #1
 8008650:	72fb      	strb	r3, [r7, #11]
          break;
 8008652:	e021      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	7c12      	ldrb	r2, [r2, #16]
 800866c:	f107 0108 	add.w	r1, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008676:	e00f      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa16 	bl	8008aac <USBD_CtlError>
            err++;
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	3301      	adds	r3, #1
 8008684:	72fb      	strb	r3, [r7, #11]
          break;
 8008686:	e007      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa0e 	bl	8008aac <USBD_CtlError>
          err++;
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	3301      	adds	r3, #1
 8008694:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008696:	e038      	b.n	800870a <USBD_GetDescriptor+0x286>
 8008698:	e037      	b.n	800870a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	7c1b      	ldrb	r3, [r3, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d109      	bne.n	80086b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086aa:	f107 0208 	add.w	r2, r7, #8
 80086ae:	4610      	mov	r0, r2
 80086b0:	4798      	blx	r3
 80086b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086b4:	e029      	b.n	800870a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f9f7 	bl	8008aac <USBD_CtlError>
        err++;
 80086be:	7afb      	ldrb	r3, [r7, #11]
 80086c0:	3301      	adds	r3, #1
 80086c2:	72fb      	strb	r3, [r7, #11]
      break;
 80086c4:	e021      	b.n	800870a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	7c1b      	ldrb	r3, [r3, #16]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10d      	bne.n	80086ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d6:	f107 0208 	add.w	r2, r7, #8
 80086da:	4610      	mov	r0, r2
 80086dc:	4798      	blx	r3
 80086de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3301      	adds	r3, #1
 80086e4:	2207      	movs	r2, #7
 80086e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086e8:	e00f      	b.n	800870a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f9dd 	bl	8008aac <USBD_CtlError>
        err++;
 80086f2:	7afb      	ldrb	r3, [r7, #11]
 80086f4:	3301      	adds	r3, #1
 80086f6:	72fb      	strb	r3, [r7, #11]
      break;
 80086f8:	e007      	b.n	800870a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f9d5 	bl	8008aac <USBD_CtlError>
      err++;
 8008702:	7afb      	ldrb	r3, [r7, #11]
 8008704:	3301      	adds	r3, #1
 8008706:	72fb      	strb	r3, [r7, #11]
      break;
 8008708:	bf00      	nop
  }

  if (err != 0U)
 800870a:	7afb      	ldrb	r3, [r7, #11]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d11c      	bne.n	800874a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008710:	893b      	ldrh	r3, [r7, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d011      	beq.n	800873a <USBD_GetDescriptor+0x2b6>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	88db      	ldrh	r3, [r3, #6]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00d      	beq.n	800873a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	88da      	ldrh	r2, [r3, #6]
 8008722:	893b      	ldrh	r3, [r7, #8]
 8008724:	4293      	cmp	r3, r2
 8008726:	bf28      	it	cs
 8008728:	4613      	movcs	r3, r2
 800872a:	b29b      	uxth	r3, r3
 800872c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800872e:	893b      	ldrh	r3, [r7, #8]
 8008730:	461a      	mov	r2, r3
 8008732:	68f9      	ldr	r1, [r7, #12]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fa24 	bl	8008b82 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	88db      	ldrh	r3, [r3, #6]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d104      	bne.n	800874c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fa7b 	bl	8008c3e <USBD_CtlSendStatus>
 8008748:	e000      	b.n	800874c <USBD_GetDescriptor+0x2c8>
    return;
 800874a:	bf00      	nop
    }
  }
}
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop

08008754 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	889b      	ldrh	r3, [r3, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d130      	bne.n	80087c8 <USBD_SetAddress+0x74>
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	88db      	ldrh	r3, [r3, #6]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d12c      	bne.n	80087c8 <USBD_SetAddress+0x74>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	885b      	ldrh	r3, [r3, #2]
 8008772:	2b7f      	cmp	r3, #127	; 0x7f
 8008774:	d828      	bhi.n	80087c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	885b      	ldrh	r3, [r3, #2]
 800877a:	b2db      	uxtb	r3, r3
 800877c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008780:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008788:	2b03      	cmp	r3, #3
 800878a:	d104      	bne.n	8008796 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f98c 	bl	8008aac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008794:	e01d      	b.n	80087d2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	7bfa      	ldrb	r2, [r7, #15]
 800879a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fe73 	bl	800948e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fa48 	bl	8008c3e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d004      	beq.n	80087be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087bc:	e009      	b.n	80087d2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c6:	e004      	b.n	80087d2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f96e 	bl	8008aac <USBD_CtlError>
  }
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
	...

080087dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	885b      	ldrh	r3, [r3, #2]
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	4b41      	ldr	r3, [pc, #260]	; (80088f4 <USBD_SetConfig+0x118>)
 80087ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087f0:	4b40      	ldr	r3, [pc, #256]	; (80088f4 <USBD_SetConfig+0x118>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d904      	bls.n	8008802 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f956 	bl	8008aac <USBD_CtlError>
 8008800:	e075      	b.n	80088ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008808:	2b02      	cmp	r3, #2
 800880a:	d002      	beq.n	8008812 <USBD_SetConfig+0x36>
 800880c:	2b03      	cmp	r3, #3
 800880e:	d023      	beq.n	8008858 <USBD_SetConfig+0x7c>
 8008810:	e062      	b.n	80088d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008812:	4b38      	ldr	r3, [pc, #224]	; (80088f4 <USBD_SetConfig+0x118>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d01a      	beq.n	8008850 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800881a:	4b36      	ldr	r3, [pc, #216]	; (80088f4 <USBD_SetConfig+0x118>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2203      	movs	r2, #3
 8008828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800882c:	4b31      	ldr	r3, [pc, #196]	; (80088f4 <USBD_SetConfig+0x118>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7ff f9e4 	bl	8007c00 <USBD_SetClassConfig>
 8008838:	4603      	mov	r3, r0
 800883a:	2b02      	cmp	r3, #2
 800883c:	d104      	bne.n	8008848 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f933 	bl	8008aac <USBD_CtlError>
            return;
 8008846:	e052      	b.n	80088ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f9f8 	bl	8008c3e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800884e:	e04e      	b.n	80088ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f9f4 	bl	8008c3e <USBD_CtlSendStatus>
        break;
 8008856:	e04a      	b.n	80088ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008858:	4b26      	ldr	r3, [pc, #152]	; (80088f4 <USBD_SetConfig+0x118>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d112      	bne.n	8008886 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008868:	4b22      	ldr	r3, [pc, #136]	; (80088f4 <USBD_SetConfig+0x118>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	461a      	mov	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008872:	4b20      	ldr	r3, [pc, #128]	; (80088f4 <USBD_SetConfig+0x118>)
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff f9e0 	bl	8007c3e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f9dd 	bl	8008c3e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008884:	e033      	b.n	80088ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008886:	4b1b      	ldr	r3, [pc, #108]	; (80088f4 <USBD_SetConfig+0x118>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d01d      	beq.n	80088d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	b2db      	uxtb	r3, r3
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff f9ce 	bl	8007c3e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80088a2:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <USBD_SetConfig+0x118>)
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80088ac:	4b11      	ldr	r3, [pc, #68]	; (80088f4 <USBD_SetConfig+0x118>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff f9a4 	bl	8007c00 <USBD_SetClassConfig>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d104      	bne.n	80088c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f8f3 	bl	8008aac <USBD_CtlError>
            return;
 80088c6:	e012      	b.n	80088ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f9b8 	bl	8008c3e <USBD_CtlSendStatus>
        break;
 80088ce:	e00e      	b.n	80088ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f9b4 	bl	8008c3e <USBD_CtlSendStatus>
        break;
 80088d6:	e00a      	b.n	80088ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f8e6 	bl	8008aac <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80088e0:	4b04      	ldr	r3, [pc, #16]	; (80088f4 <USBD_SetConfig+0x118>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff f9a9 	bl	8007c3e <USBD_ClrClassConfig>
        break;
 80088ec:	bf00      	nop
    }
  }
}
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	200001f0 	.word	0x200001f0

080088f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	88db      	ldrh	r3, [r3, #6]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d004      	beq.n	8008914 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f8cd 	bl	8008aac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008912:	e022      	b.n	800895a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800891a:	2b02      	cmp	r3, #2
 800891c:	dc02      	bgt.n	8008924 <USBD_GetConfig+0x2c>
 800891e:	2b00      	cmp	r3, #0
 8008920:	dc03      	bgt.n	800892a <USBD_GetConfig+0x32>
 8008922:	e015      	b.n	8008950 <USBD_GetConfig+0x58>
 8008924:	2b03      	cmp	r3, #3
 8008926:	d00b      	beq.n	8008940 <USBD_GetConfig+0x48>
 8008928:	e012      	b.n	8008950 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3308      	adds	r3, #8
 8008934:	2201      	movs	r2, #1
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f922 	bl	8008b82 <USBD_CtlSendData>
        break;
 800893e:	e00c      	b.n	800895a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	3304      	adds	r3, #4
 8008944:	2201      	movs	r2, #1
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f91a 	bl	8008b82 <USBD_CtlSendData>
        break;
 800894e:	e004      	b.n	800895a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f8aa 	bl	8008aac <USBD_CtlError>
        break;
 8008958:	bf00      	nop
}
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008972:	3b01      	subs	r3, #1
 8008974:	2b02      	cmp	r3, #2
 8008976:	d81e      	bhi.n	80089b6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	88db      	ldrh	r3, [r3, #6]
 800897c:	2b02      	cmp	r3, #2
 800897e:	d004      	beq.n	800898a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f892 	bl	8008aac <USBD_CtlError>
        break;
 8008988:	e01a      	b.n	80089c0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f043 0202 	orr.w	r2, r3, #2
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	330c      	adds	r3, #12
 80089aa:	2202      	movs	r2, #2
 80089ac:	4619      	mov	r1, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f8e7 	bl	8008b82 <USBD_CtlSendData>
      break;
 80089b4:	e004      	b.n	80089c0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f877 	bl	8008aac <USBD_CtlError>
      break;
 80089be:	bf00      	nop
  }
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	885b      	ldrh	r3, [r3, #2]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d106      	bne.n	80089e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f92b 	bl	8008c3e <USBD_CtlSendStatus>
  }
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a00:	3b01      	subs	r3, #1
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d80b      	bhi.n	8008a1e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	885b      	ldrh	r3, [r3, #2]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d10c      	bne.n	8008a28 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f911 	bl	8008c3e <USBD_CtlSendStatus>
      }
      break;
 8008a1c:	e004      	b.n	8008a28 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f843 	bl	8008aac <USBD_CtlError>
      break;
 8008a26:	e000      	b.n	8008a2a <USBD_ClrFeature+0x3a>
      break;
 8008a28:	bf00      	nop
  }
}
 8008a2a:	bf00      	nop
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b083      	sub	sp, #12
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	781a      	ldrb	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	785a      	ldrb	r2, [r3, #1]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	3302      	adds	r3, #2
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	3303      	adds	r3, #3
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	021b      	lsls	r3, r3, #8
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	4413      	add	r3, r2
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	3305      	adds	r3, #5
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	021b      	lsls	r3, r3, #8
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	4413      	add	r3, r2
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	3306      	adds	r3, #6
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	3307      	adds	r3, #7
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	021b      	lsls	r3, r3, #8
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	4413      	add	r3, r2
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	80da      	strh	r2, [r3, #6]

}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008ab6:	2180      	movs	r1, #128	; 0x80
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fc7d 	bl	80093b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008abe:	2100      	movs	r1, #0
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fc79 	bl	80093b8 <USBD_LL_StallEP>
}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b086      	sub	sp, #24
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	60f8      	str	r0, [r7, #12]
 8008ad6:	60b9      	str	r1, [r7, #8]
 8008ad8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d032      	beq.n	8008b4a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f834 	bl	8008b52 <USBD_GetLen>
 8008aea:	4603      	mov	r3, r0
 8008aec:	3301      	adds	r3, #1
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
 8008afa:	1c5a      	adds	r2, r3, #1
 8008afc:	75fa      	strb	r2, [r7, #23]
 8008afe:	461a      	mov	r2, r3
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	4413      	add	r3, r2
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	7812      	ldrb	r2, [r2, #0]
 8008b08:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008b0a:	7dfb      	ldrb	r3, [r7, #23]
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	75fa      	strb	r2, [r7, #23]
 8008b10:	461a      	mov	r2, r3
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	4413      	add	r3, r2
 8008b16:	2203      	movs	r2, #3
 8008b18:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008b1a:	e012      	b.n	8008b42 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	60fa      	str	r2, [r7, #12]
 8008b22:	7dfa      	ldrb	r2, [r7, #23]
 8008b24:	1c51      	adds	r1, r2, #1
 8008b26:	75f9      	strb	r1, [r7, #23]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	440a      	add	r2, r1
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008b32:	7dfb      	ldrb	r3, [r7, #23]
 8008b34:	1c5a      	adds	r2, r3, #1
 8008b36:	75fa      	strb	r2, [r7, #23]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1e8      	bne.n	8008b1c <USBD_GetString+0x4e>
    }
  }
}
 8008b4a:	bf00      	nop
 8008b4c:	3718      	adds	r7, #24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b085      	sub	sp, #20
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008b5e:	e005      	b.n	8008b6c <USBD_GetLen+0x1a>
  {
    len++;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	3301      	adds	r3, #1
 8008b64:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1f5      	bne.n	8008b60 <USBD_GetLen+0xe>
  }

  return len;
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	60f8      	str	r0, [r7, #12]
 8008b8a:	60b9      	str	r1, [r7, #8]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b98:	88fa      	ldrh	r2, [r7, #6]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008b9e:	88fa      	ldrh	r2, [r7, #6]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ba4:	88fb      	ldrh	r3, [r7, #6]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	2100      	movs	r1, #0
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 fc8e 	bl	80094cc <USBD_LL_Transmit>

  return USBD_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	60f8      	str	r0, [r7, #12]
 8008bc2:	60b9      	str	r1, [r7, #8]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bc8:	88fb      	ldrh	r3, [r7, #6]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	2100      	movs	r1, #0
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 fc7c 	bl	80094cc <USBD_LL_Transmit>

  return USBD_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	60f8      	str	r0, [r7, #12]
 8008be6:	60b9      	str	r1, [r7, #8]
 8008be8:	4613      	mov	r3, r2
 8008bea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2203      	movs	r2, #3
 8008bf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008bf4:	88fa      	ldrh	r2, [r7, #6]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008bfc:	88fa      	ldrh	r2, [r7, #6]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c04:	88fb      	ldrh	r3, [r7, #6]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fc81 	bl	8009512 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	60b9      	str	r1, [r7, #8]
 8008c24:	4613      	mov	r3, r2
 8008c26:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c28:	88fb      	ldrh	r3, [r7, #6]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 fc6f 	bl	8009512 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b082      	sub	sp, #8
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2204      	movs	r2, #4
 8008c4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c4e:	2300      	movs	r3, #0
 8008c50:	2200      	movs	r2, #0
 8008c52:	2100      	movs	r1, #0
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fc39 	bl	80094cc <USBD_LL_Transmit>

  return USBD_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2205      	movs	r2, #5
 8008c70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c74:	2300      	movs	r3, #0
 8008c76:	2200      	movs	r2, #0
 8008c78:	2100      	movs	r1, #0
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fc49 	bl	8009512 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
	...

08008c8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c90:	2200      	movs	r2, #0
 8008c92:	4912      	ldr	r1, [pc, #72]	; (8008cdc <MX_USB_DEVICE_Init+0x50>)
 8008c94:	4812      	ldr	r0, [pc, #72]	; (8008ce0 <MX_USB_DEVICE_Init+0x54>)
 8008c96:	f7fe ff57 	bl	8007b48 <USBD_Init>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ca0:	f7f7 fe38 	bl	8000914 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ca4:	490f      	ldr	r1, [pc, #60]	; (8008ce4 <MX_USB_DEVICE_Init+0x58>)
 8008ca6:	480e      	ldr	r0, [pc, #56]	; (8008ce0 <MX_USB_DEVICE_Init+0x54>)
 8008ca8:	f7fe ff79 	bl	8007b9e <USBD_RegisterClass>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cb2:	f7f7 fe2f 	bl	8000914 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cb6:	490c      	ldr	r1, [pc, #48]	; (8008ce8 <MX_USB_DEVICE_Init+0x5c>)
 8008cb8:	4809      	ldr	r0, [pc, #36]	; (8008ce0 <MX_USB_DEVICE_Init+0x54>)
 8008cba:	f7fe fea7 	bl	8007a0c <USBD_CDC_RegisterInterface>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008cc4:	f7f7 fe26 	bl	8000914 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008cc8:	4805      	ldr	r0, [pc, #20]	; (8008ce0 <MX_USB_DEVICE_Init+0x54>)
 8008cca:	f7fe ff82 	bl	8007bd2 <USBD_Start>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cd4:	f7f7 fe1e 	bl	8000914 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cd8:	bf00      	nop
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	2000012c 	.word	0x2000012c
 8008ce0:	200001f4 	.word	0x200001f4
 8008ce4:	20000018 	.word	0x20000018
 8008ce8:	2000011c 	.word	0x2000011c

08008cec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4905      	ldr	r1, [pc, #20]	; (8008d08 <CDC_Init_FS+0x1c>)
 8008cf4:	4805      	ldr	r0, [pc, #20]	; (8008d0c <CDC_Init_FS+0x20>)
 8008cf6:	f7fe fea0 	bl	8007a3a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008cfa:	4905      	ldr	r1, [pc, #20]	; (8008d10 <CDC_Init_FS+0x24>)
 8008cfc:	4803      	ldr	r0, [pc, #12]	; (8008d0c <CDC_Init_FS+0x20>)
 8008cfe:	f7fe feb6 	bl	8007a6e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	200008b8 	.word	0x200008b8
 8008d0c:	200001f4 	.word	0x200001f4
 8008d10:	200004b8 	.word	0x200004b8

08008d14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d14:	b480      	push	{r7}
 8008d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	6039      	str	r1, [r7, #0]
 8008d2e:	71fb      	strb	r3, [r7, #7]
 8008d30:	4613      	mov	r3, r2
 8008d32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d34:	79fb      	ldrb	r3, [r7, #7]
 8008d36:	2b23      	cmp	r3, #35	; 0x23
 8008d38:	d84a      	bhi.n	8008dd0 <CDC_Control_FS+0xac>
 8008d3a:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <CDC_Control_FS+0x1c>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008dd1 	.word	0x08008dd1
 8008d44:	08008dd1 	.word	0x08008dd1
 8008d48:	08008dd1 	.word	0x08008dd1
 8008d4c:	08008dd1 	.word	0x08008dd1
 8008d50:	08008dd1 	.word	0x08008dd1
 8008d54:	08008dd1 	.word	0x08008dd1
 8008d58:	08008dd1 	.word	0x08008dd1
 8008d5c:	08008dd1 	.word	0x08008dd1
 8008d60:	08008dd1 	.word	0x08008dd1
 8008d64:	08008dd1 	.word	0x08008dd1
 8008d68:	08008dd1 	.word	0x08008dd1
 8008d6c:	08008dd1 	.word	0x08008dd1
 8008d70:	08008dd1 	.word	0x08008dd1
 8008d74:	08008dd1 	.word	0x08008dd1
 8008d78:	08008dd1 	.word	0x08008dd1
 8008d7c:	08008dd1 	.word	0x08008dd1
 8008d80:	08008dd1 	.word	0x08008dd1
 8008d84:	08008dd1 	.word	0x08008dd1
 8008d88:	08008dd1 	.word	0x08008dd1
 8008d8c:	08008dd1 	.word	0x08008dd1
 8008d90:	08008dd1 	.word	0x08008dd1
 8008d94:	08008dd1 	.word	0x08008dd1
 8008d98:	08008dd1 	.word	0x08008dd1
 8008d9c:	08008dd1 	.word	0x08008dd1
 8008da0:	08008dd1 	.word	0x08008dd1
 8008da4:	08008dd1 	.word	0x08008dd1
 8008da8:	08008dd1 	.word	0x08008dd1
 8008dac:	08008dd1 	.word	0x08008dd1
 8008db0:	08008dd1 	.word	0x08008dd1
 8008db4:	08008dd1 	.word	0x08008dd1
 8008db8:	08008dd1 	.word	0x08008dd1
 8008dbc:	08008dd1 	.word	0x08008dd1
 8008dc0:	08008dd1 	.word	0x08008dd1
 8008dc4:	08008dd1 	.word	0x08008dd1
 8008dc8:	08008dd1 	.word	0x08008dd1
 8008dcc:	08008dd1 	.word	0x08008dd1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008dd0:	bf00      	nop
  }

  return (USBD_OK);
 8008dd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	4805      	ldr	r0, [pc, #20]	; (8008e04 <CDC_Receive_FS+0x24>)
 8008dee:	f7fe fe3e 	bl	8007a6e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008df2:	4804      	ldr	r0, [pc, #16]	; (8008e04 <CDC_Receive_FS+0x24>)
 8008df4:	f7fe fe7e 	bl	8007af4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008df8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	200001f4 	.word	0x200001f4

08008e08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	460b      	mov	r3, r1
 8008e12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e18:	4b0d      	ldr	r3, [pc, #52]	; (8008e50 <CDC_Transmit_FS+0x48>)
 8008e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e00b      	b.n	8008e46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e2e:	887b      	ldrh	r3, [r7, #2]
 8008e30:	461a      	mov	r2, r3
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	4806      	ldr	r0, [pc, #24]	; (8008e50 <CDC_Transmit_FS+0x48>)
 8008e36:	f7fe fe00 	bl	8007a3a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e3a:	4805      	ldr	r0, [pc, #20]	; (8008e50 <CDC_Transmit_FS+0x48>)
 8008e3c:	f7fe fe2b 	bl	8007a96 <USBD_CDC_TransmitPacket>
 8008e40:	4603      	mov	r3, r0
 8008e42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	200001f4 	.word	0x200001f4

08008e54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	6039      	str	r1, [r7, #0]
 8008e5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2212      	movs	r2, #18
 8008e64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e66:	4b03      	ldr	r3, [pc, #12]	; (8008e74 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	20000148 	.word	0x20000148

08008e78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	6039      	str	r1, [r7, #0]
 8008e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	2204      	movs	r2, #4
 8008e88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e8a:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	2000015c 	.word	0x2000015c

08008e9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	6039      	str	r1, [r7, #0]
 8008ea6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ea8:	79fb      	ldrb	r3, [r7, #7]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d105      	bne.n	8008eba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	4907      	ldr	r1, [pc, #28]	; (8008ed0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008eb2:	4808      	ldr	r0, [pc, #32]	; (8008ed4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008eb4:	f7ff fe0b 	bl	8008ace <USBD_GetString>
 8008eb8:	e004      	b.n	8008ec4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	4904      	ldr	r1, [pc, #16]	; (8008ed0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ebe:	4805      	ldr	r0, [pc, #20]	; (8008ed4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ec0:	f7ff fe05 	bl	8008ace <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ec4:	4b02      	ldr	r3, [pc, #8]	; (8008ed0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20000cb8 	.word	0x20000cb8
 8008ed4:	08009694 	.word	0x08009694

08008ed8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	6039      	str	r1, [r7, #0]
 8008ee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	4904      	ldr	r1, [pc, #16]	; (8008ef8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ee8:	4804      	ldr	r0, [pc, #16]	; (8008efc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008eea:	f7ff fdf0 	bl	8008ace <USBD_GetString>
  return USBD_StrDesc;
 8008eee:	4b02      	ldr	r3, [pc, #8]	; (8008ef8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20000cb8 	.word	0x20000cb8
 8008efc:	080096ac 	.word	0x080096ac

08008f00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	6039      	str	r1, [r7, #0]
 8008f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	221a      	movs	r2, #26
 8008f10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f12:	f000 f843 	bl	8008f9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f16:	4b02      	ldr	r3, [pc, #8]	; (8008f20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	20000160 	.word	0x20000160

08008f24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	6039      	str	r1, [r7, #0]
 8008f2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d105      	bne.n	8008f42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	4907      	ldr	r1, [pc, #28]	; (8008f58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f3a:	4808      	ldr	r0, [pc, #32]	; (8008f5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f3c:	f7ff fdc7 	bl	8008ace <USBD_GetString>
 8008f40:	e004      	b.n	8008f4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	4904      	ldr	r1, [pc, #16]	; (8008f58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f46:	4805      	ldr	r0, [pc, #20]	; (8008f5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f48:	f7ff fdc1 	bl	8008ace <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f4c:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20000cb8 	.word	0x20000cb8
 8008f5c:	080096c0 	.word	0x080096c0

08008f60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	4603      	mov	r3, r0
 8008f68:	6039      	str	r1, [r7, #0]
 8008f6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f6c:	79fb      	ldrb	r3, [r7, #7]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d105      	bne.n	8008f7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	4907      	ldr	r1, [pc, #28]	; (8008f94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f76:	4808      	ldr	r0, [pc, #32]	; (8008f98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f78:	f7ff fda9 	bl	8008ace <USBD_GetString>
 8008f7c:	e004      	b.n	8008f88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	4904      	ldr	r1, [pc, #16]	; (8008f94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f82:	4805      	ldr	r0, [pc, #20]	; (8008f98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f84:	f7ff fda3 	bl	8008ace <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f88:	4b02      	ldr	r3, [pc, #8]	; (8008f94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	20000cb8 	.word	0x20000cb8
 8008f98:	080096cc 	.word	0x080096cc

08008f9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <Get_SerialNum+0x44>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008fa8:	4b0e      	ldr	r3, [pc, #56]	; (8008fe4 <Get_SerialNum+0x48>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008fae:	4b0e      	ldr	r3, [pc, #56]	; (8008fe8 <Get_SerialNum+0x4c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4413      	add	r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d009      	beq.n	8008fd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008fc2:	2208      	movs	r2, #8
 8008fc4:	4909      	ldr	r1, [pc, #36]	; (8008fec <Get_SerialNum+0x50>)
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 f814 	bl	8008ff4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fcc:	2204      	movs	r2, #4
 8008fce:	4908      	ldr	r1, [pc, #32]	; (8008ff0 <Get_SerialNum+0x54>)
 8008fd0:	68b8      	ldr	r0, [r7, #8]
 8008fd2:	f000 f80f 	bl	8008ff4 <IntToUnicode>
  }
}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	1ffff7ac 	.word	0x1ffff7ac
 8008fe4:	1ffff7b0 	.word	0x1ffff7b0
 8008fe8:	1ffff7b4 	.word	0x1ffff7b4
 8008fec:	20000162 	.word	0x20000162
 8008ff0:	20000172 	.word	0x20000172

08008ff4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b087      	sub	sp, #28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	4613      	mov	r3, r2
 8009000:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009006:	2300      	movs	r3, #0
 8009008:	75fb      	strb	r3, [r7, #23]
 800900a:	e027      	b.n	800905c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	0f1b      	lsrs	r3, r3, #28
 8009010:	2b09      	cmp	r3, #9
 8009012:	d80b      	bhi.n	800902c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	0f1b      	lsrs	r3, r3, #28
 8009018:	b2da      	uxtb	r2, r3
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	005b      	lsls	r3, r3, #1
 800901e:	4619      	mov	r1, r3
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	440b      	add	r3, r1
 8009024:	3230      	adds	r2, #48	; 0x30
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	701a      	strb	r2, [r3, #0]
 800902a:	e00a      	b.n	8009042 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	0f1b      	lsrs	r3, r3, #28
 8009030:	b2da      	uxtb	r2, r3
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	005b      	lsls	r3, r3, #1
 8009036:	4619      	mov	r1, r3
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	440b      	add	r3, r1
 800903c:	3237      	adds	r2, #55	; 0x37
 800903e:	b2d2      	uxtb	r2, r2
 8009040:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	011b      	lsls	r3, r3, #4
 8009046:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009048:	7dfb      	ldrb	r3, [r7, #23]
 800904a:	005b      	lsls	r3, r3, #1
 800904c:	3301      	adds	r3, #1
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	4413      	add	r3, r2
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009056:	7dfb      	ldrb	r3, [r7, #23]
 8009058:	3301      	adds	r3, #1
 800905a:	75fb      	strb	r3, [r7, #23]
 800905c:	7dfa      	ldrb	r2, [r7, #23]
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	429a      	cmp	r2, r3
 8009062:	d3d3      	bcc.n	800900c <IntToUnicode+0x18>
  }
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop
 8009068:	371c      	adds	r7, #28
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
	...

08009074 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08a      	sub	sp, #40	; 0x28
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800907c:	f107 0314 	add.w	r3, r7, #20
 8009080:	2200      	movs	r2, #0
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	605a      	str	r2, [r3, #4]
 8009086:	609a      	str	r2, [r3, #8]
 8009088:	60da      	str	r2, [r3, #12]
 800908a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a1c      	ldr	r2, [pc, #112]	; (8009104 <HAL_PCD_MspInit+0x90>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d131      	bne.n	80090fa <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009096:	4b1c      	ldr	r3, [pc, #112]	; (8009108 <HAL_PCD_MspInit+0x94>)
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	4a1b      	ldr	r2, [pc, #108]	; (8009108 <HAL_PCD_MspInit+0x94>)
 800909c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090a0:	6153      	str	r3, [r2, #20]
 80090a2:	4b19      	ldr	r3, [pc, #100]	; (8009108 <HAL_PCD_MspInit+0x94>)
 80090a4:	695b      	ldr	r3, [r3, #20]
 80090a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80090ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80090b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090b4:	2302      	movs	r3, #2
 80090b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090b8:	2300      	movs	r3, #0
 80090ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80090bc:	2303      	movs	r3, #3
 80090be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80090c0:	230e      	movs	r3, #14
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090c4:	f107 0314 	add.w	r3, r7, #20
 80090c8:	4619      	mov	r1, r3
 80090ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80090ce:	f7f7 fe9b 	bl	8000e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80090d2:	4b0d      	ldr	r3, [pc, #52]	; (8009108 <HAL_PCD_MspInit+0x94>)
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	4a0c      	ldr	r2, [pc, #48]	; (8009108 <HAL_PCD_MspInit+0x94>)
 80090d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090dc:	61d3      	str	r3, [r2, #28]
 80090de:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <HAL_PCD_MspInit+0x94>)
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80090ea:	2200      	movs	r2, #0
 80090ec:	2100      	movs	r1, #0
 80090ee:	2014      	movs	r0, #20
 80090f0:	f7f7 fe53 	bl	8000d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80090f4:	2014      	movs	r0, #20
 80090f6:	f7f7 fe6c 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80090fa:	bf00      	nop
 80090fc:	3728      	adds	r7, #40	; 0x28
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	40005c00 	.word	0x40005c00
 8009108:	40021000 	.word	0x40021000

0800910c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009120:	4619      	mov	r1, r3
 8009122:	4610      	mov	r0, r2
 8009124:	f7fe fd9e 	bl	8007c64 <USBD_LL_SetupStage>
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009142:	78fa      	ldrb	r2, [r7, #3]
 8009144:	6879      	ldr	r1, [r7, #4]
 8009146:	4613      	mov	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	440b      	add	r3, r1
 8009150:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	78fb      	ldrb	r3, [r7, #3]
 8009158:	4619      	mov	r1, r3
 800915a:	f7fe fdd0 	bl	8007cfe <USBD_LL_DataOutStage>
}
 800915e:	bf00      	nop
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b082      	sub	sp, #8
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	460b      	mov	r3, r1
 8009170:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009178:	78fa      	ldrb	r2, [r7, #3]
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	4613      	mov	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	440b      	add	r3, r1
 8009186:	333c      	adds	r3, #60	; 0x3c
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	78fb      	ldrb	r3, [r7, #3]
 800918c:	4619      	mov	r1, r3
 800918e:	f7fe fe27 	bl	8007de0 <USBD_LL_DataInStage>
}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b082      	sub	sp, #8
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fe ff3a 	bl	8008022 <USBD_LL_SOF>
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091be:	2301      	movs	r3, #1
 80091c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d001      	beq.n	80091ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091ca:	f7f7 fba3 	bl	8000914 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091d4:	7bfa      	ldrb	r2, [r7, #15]
 80091d6:	4611      	mov	r1, r2
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fe fee7 	bl	8007fac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fe fea0 	bl	8007f2a <USBD_LL_Reset>
}
 80091ea:	bf00      	nop
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe fee2 	bl	8007fcc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d005      	beq.n	800921c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009210:	4b04      	ldr	r3, [pc, #16]	; (8009224 <HAL_PCD_SuspendCallback+0x30>)
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	4a03      	ldr	r2, [pc, #12]	; (8009224 <HAL_PCD_SuspendCallback+0x30>)
 8009216:	f043 0306 	orr.w	r3, r3, #6
 800921a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	e000ed00 	.word	0xe000ed00

08009228 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe fedd 	bl	8007ff6 <USBD_LL_Resume>
}
 800923c:	bf00      	nop
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800924c:	4a28      	ldr	r2, [pc, #160]	; (80092f0 <USBD_LL_Init+0xac>)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a26      	ldr	r2, [pc, #152]	; (80092f0 <USBD_LL_Init+0xac>)
 8009258:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800925c:	4b24      	ldr	r3, [pc, #144]	; (80092f0 <USBD_LL_Init+0xac>)
 800925e:	4a25      	ldr	r2, [pc, #148]	; (80092f4 <USBD_LL_Init+0xb0>)
 8009260:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009262:	4b23      	ldr	r3, [pc, #140]	; (80092f0 <USBD_LL_Init+0xac>)
 8009264:	2208      	movs	r2, #8
 8009266:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009268:	4b21      	ldr	r3, [pc, #132]	; (80092f0 <USBD_LL_Init+0xac>)
 800926a:	2202      	movs	r2, #2
 800926c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800926e:	4b20      	ldr	r3, [pc, #128]	; (80092f0 <USBD_LL_Init+0xac>)
 8009270:	2202      	movs	r2, #2
 8009272:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009274:	4b1e      	ldr	r3, [pc, #120]	; (80092f0 <USBD_LL_Init+0xac>)
 8009276:	2200      	movs	r2, #0
 8009278:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800927a:	4b1d      	ldr	r3, [pc, #116]	; (80092f0 <USBD_LL_Init+0xac>)
 800927c:	2200      	movs	r2, #0
 800927e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009280:	481b      	ldr	r0, [pc, #108]	; (80092f0 <USBD_LL_Init+0xac>)
 8009282:	f7f8 fd60 	bl	8001d46 <HAL_PCD_Init>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800928c:	f7f7 fb42 	bl	8000914 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009296:	2318      	movs	r3, #24
 8009298:	2200      	movs	r2, #0
 800929a:	2100      	movs	r1, #0
 800929c:	f7fa f9e9 	bl	8003672 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092a6:	2358      	movs	r3, #88	; 0x58
 80092a8:	2200      	movs	r2, #0
 80092aa:	2180      	movs	r1, #128	; 0x80
 80092ac:	f7fa f9e1 	bl	8003672 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092b6:	23c0      	movs	r3, #192	; 0xc0
 80092b8:	2200      	movs	r2, #0
 80092ba:	2181      	movs	r1, #129	; 0x81
 80092bc:	f7fa f9d9 	bl	8003672 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80092ca:	2200      	movs	r2, #0
 80092cc:	2101      	movs	r1, #1
 80092ce:	f7fa f9d0 	bl	8003672 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092dc:	2200      	movs	r2, #0
 80092de:	2182      	movs	r1, #130	; 0x82
 80092e0:	f7fa f9c7 	bl	8003672 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20000eb8 	.word	0x20000eb8
 80092f4:	40005c00 	.word	0x40005c00

080092f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800930e:	4618      	mov	r0, r3
 8009310:	f7f8 fdeb 	bl	8001eea <HAL_PCD_Start>
 8009314:	4603      	mov	r3, r0
 8009316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	4618      	mov	r0, r3
 800931c:	f000 f954 	bl	80095c8 <USBD_Get_USB_Status>
 8009320:	4603      	mov	r3, r0
 8009322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009324:	7bbb      	ldrb	r3, [r7, #14]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	4608      	mov	r0, r1
 8009338:	4611      	mov	r1, r2
 800933a:	461a      	mov	r2, r3
 800933c:	4603      	mov	r3, r0
 800933e:	70fb      	strb	r3, [r7, #3]
 8009340:	460b      	mov	r3, r1
 8009342:	70bb      	strb	r3, [r7, #2]
 8009344:	4613      	mov	r3, r2
 8009346:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009356:	78bb      	ldrb	r3, [r7, #2]
 8009358:	883a      	ldrh	r2, [r7, #0]
 800935a:	78f9      	ldrb	r1, [r7, #3]
 800935c:	f7f8 fee4 	bl	8002128 <HAL_PCD_EP_Open>
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	4618      	mov	r0, r3
 8009368:	f000 f92e 	bl	80095c8 <USBD_Get_USB_Status>
 800936c:	4603      	mov	r3, r0
 800936e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009370:	7bbb      	ldrb	r3, [r7, #14]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	460b      	mov	r3, r1
 8009384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009394:	78fa      	ldrb	r2, [r7, #3]
 8009396:	4611      	mov	r1, r2
 8009398:	4618      	mov	r0, r3
 800939a:	f7f8 ff22 	bl	80021e2 <HAL_PCD_EP_Close>
 800939e:	4603      	mov	r3, r0
 80093a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 f90f 	bl	80095c8 <USBD_Get_USB_Status>
 80093aa:	4603      	mov	r3, r0
 80093ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093d2:	78fa      	ldrb	r2, [r7, #3]
 80093d4:	4611      	mov	r1, r2
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7f8 ffcb 	bl	8002372 <HAL_PCD_EP_SetStall>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 f8f0 	bl	80095c8 <USBD_Get_USB_Status>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	460b      	mov	r3, r1
 8009400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009410:	78fa      	ldrb	r2, [r7, #3]
 8009412:	4611      	mov	r1, r2
 8009414:	4618      	mov	r0, r3
 8009416:	f7f8 fffe 	bl	8002416 <HAL_PCD_EP_ClrStall>
 800941a:	4603      	mov	r3, r0
 800941c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	4618      	mov	r0, r3
 8009422:	f000 f8d1 	bl	80095c8 <USBD_Get_USB_Status>
 8009426:	4603      	mov	r3, r0
 8009428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800942a:	7bbb      	ldrb	r3, [r7, #14]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009446:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800944c:	2b00      	cmp	r3, #0
 800944e:	da0c      	bge.n	800946a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009456:	68f9      	ldr	r1, [r7, #12]
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	00db      	lsls	r3, r3, #3
 8009462:	440b      	add	r3, r1
 8009464:	3302      	adds	r3, #2
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	e00b      	b.n	8009482 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009470:	68f9      	ldr	r1, [r7, #12]
 8009472:	4613      	mov	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	440b      	add	r3, r1
 800947c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009480:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	460b      	mov	r3, r1
 8009498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094a8:	78fa      	ldrb	r2, [r7, #3]
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7f8 fe16 	bl	80020de <HAL_PCD_SetAddress>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 f885 	bl	80095c8 <USBD_Get_USB_Status>
 80094be:	4603      	mov	r3, r0
 80094c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	607a      	str	r2, [r7, #4]
 80094d6:	461a      	mov	r2, r3
 80094d8:	460b      	mov	r3, r1
 80094da:	72fb      	strb	r3, [r7, #11]
 80094dc:	4613      	mov	r3, r2
 80094de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094ee:	893b      	ldrh	r3, [r7, #8]
 80094f0:	7af9      	ldrb	r1, [r7, #11]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	f7f8 ff06 	bl	8002304 <HAL_PCD_EP_Transmit>
 80094f8:	4603      	mov	r3, r0
 80094fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094fc:	7dfb      	ldrb	r3, [r7, #23]
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 f862 	bl	80095c8 <USBD_Get_USB_Status>
 8009504:	4603      	mov	r3, r0
 8009506:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009508:	7dbb      	ldrb	r3, [r7, #22]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b086      	sub	sp, #24
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	461a      	mov	r2, r3
 800951e:	460b      	mov	r3, r1
 8009520:	72fb      	strb	r3, [r7, #11]
 8009522:	4613      	mov	r3, r2
 8009524:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009534:	893b      	ldrh	r3, [r7, #8]
 8009536:	7af9      	ldrb	r1, [r7, #11]
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	f7f8 fe9a 	bl	8002272 <HAL_PCD_EP_Receive>
 800953e:	4603      	mov	r3, r0
 8009540:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009542:	7dfb      	ldrb	r3, [r7, #23]
 8009544:	4618      	mov	r0, r3
 8009546:	f000 f83f 	bl	80095c8 <USBD_Get_USB_Status>
 800954a:	4603      	mov	r3, r0
 800954c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800954e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800956a:	78fa      	ldrb	r2, [r7, #3]
 800956c:	4611      	mov	r1, r2
 800956e:	4618      	mov	r0, r3
 8009570:	f7f8 feb0 	bl	80022d4 <HAL_PCD_EP_GetRxCount>
 8009574:	4603      	mov	r3, r0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009588:	4b03      	ldr	r3, [pc, #12]	; (8009598 <USBD_static_malloc+0x18>)
}
 800958a:	4618      	mov	r0, r3
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	200011a4 	.word	0x200011a4

0800959c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]

}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095d6:	79fb      	ldrb	r3, [r7, #7]
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d817      	bhi.n	800960c <USBD_Get_USB_Status+0x44>
 80095dc:	a201      	add	r2, pc, #4	; (adr r2, 80095e4 <USBD_Get_USB_Status+0x1c>)
 80095de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e2:	bf00      	nop
 80095e4:	080095f5 	.word	0x080095f5
 80095e8:	080095fb 	.word	0x080095fb
 80095ec:	08009601 	.word	0x08009601
 80095f0:	08009607 	.word	0x08009607
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73fb      	strb	r3, [r7, #15]
    break;
 80095f8:	e00b      	b.n	8009612 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095fa:	2302      	movs	r3, #2
 80095fc:	73fb      	strb	r3, [r7, #15]
    break;
 80095fe:	e008      	b.n	8009612 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009600:	2301      	movs	r3, #1
 8009602:	73fb      	strb	r3, [r7, #15]
    break;
 8009604:	e005      	b.n	8009612 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009606:	2302      	movs	r3, #2
 8009608:	73fb      	strb	r3, [r7, #15]
    break;
 800960a:	e002      	b.n	8009612 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800960c:	2302      	movs	r3, #2
 800960e:	73fb      	strb	r3, [r7, #15]
    break;
 8009610:	bf00      	nop
  }
  return usb_status;
 8009612:	7bfb      	ldrb	r3, [r7, #15]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <__libc_init_array>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	4d0d      	ldr	r5, [pc, #52]	; (8009658 <__libc_init_array+0x38>)
 8009624:	4c0d      	ldr	r4, [pc, #52]	; (800965c <__libc_init_array+0x3c>)
 8009626:	1b64      	subs	r4, r4, r5
 8009628:	10a4      	asrs	r4, r4, #2
 800962a:	2600      	movs	r6, #0
 800962c:	42a6      	cmp	r6, r4
 800962e:	d109      	bne.n	8009644 <__libc_init_array+0x24>
 8009630:	4d0b      	ldr	r5, [pc, #44]	; (8009660 <__libc_init_array+0x40>)
 8009632:	4c0c      	ldr	r4, [pc, #48]	; (8009664 <__libc_init_array+0x44>)
 8009634:	f000 f820 	bl	8009678 <_init>
 8009638:	1b64      	subs	r4, r4, r5
 800963a:	10a4      	asrs	r4, r4, #2
 800963c:	2600      	movs	r6, #0
 800963e:	42a6      	cmp	r6, r4
 8009640:	d105      	bne.n	800964e <__libc_init_array+0x2e>
 8009642:	bd70      	pop	{r4, r5, r6, pc}
 8009644:	f855 3b04 	ldr.w	r3, [r5], #4
 8009648:	4798      	blx	r3
 800964a:	3601      	adds	r6, #1
 800964c:	e7ee      	b.n	800962c <__libc_init_array+0xc>
 800964e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009652:	4798      	blx	r3
 8009654:	3601      	adds	r6, #1
 8009656:	e7f2      	b.n	800963e <__libc_init_array+0x1e>
 8009658:	0800970c 	.word	0x0800970c
 800965c:	0800970c 	.word	0x0800970c
 8009660:	0800970c 	.word	0x0800970c
 8009664:	08009710 	.word	0x08009710

08009668 <memset>:
 8009668:	4402      	add	r2, r0
 800966a:	4603      	mov	r3, r0
 800966c:	4293      	cmp	r3, r2
 800966e:	d100      	bne.n	8009672 <memset+0xa>
 8009670:	4770      	bx	lr
 8009672:	f803 1b01 	strb.w	r1, [r3], #1
 8009676:	e7f9      	b.n	800966c <memset+0x4>

08009678 <_init>:
 8009678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967a:	bf00      	nop
 800967c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967e:	bc08      	pop	{r3}
 8009680:	469e      	mov	lr, r3
 8009682:	4770      	bx	lr

08009684 <_fini>:
 8009684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009686:	bf00      	nop
 8009688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968a:	bc08      	pop	{r3}
 800968c:	469e      	mov	lr, r3
 800968e:	4770      	bx	lr
